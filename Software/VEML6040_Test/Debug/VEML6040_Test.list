
VEML6040_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005358  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080054e8  080054e8  000154e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055ac  080055ac  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080055ac  080055ac  000155ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055b4  080055b4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055b4  080055b4  000155b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055b8  080055b8  000155b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080055bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000068  08005624  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08005624  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013cbc  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a69  00000000  00000000  00033d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  00036800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e53  00000000  00000000  00037a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d99  00000000  00000000  000388ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000176c0  00000000  00000000  00060644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f70e0  00000000  00000000  00077d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005434  00000000  00000000  0016ede4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  00174218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054d0 	.word	0x080054d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080054d0 	.word	0x080054d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4b2f      	ldr	r3, [pc, #188]	; (8000640 <MX_GPIO_Init+0xd4>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	4a2e      	ldr	r2, [pc, #184]	; (8000640 <MX_GPIO_Init+0xd4>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058e:	4b2c      	ldr	r3, [pc, #176]	; (8000640 <MX_GPIO_Init+0xd4>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	4b29      	ldr	r3, [pc, #164]	; (8000640 <MX_GPIO_Init+0xd4>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a28      	ldr	r2, [pc, #160]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b26      	ldr	r3, [pc, #152]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b23      	ldr	r3, [pc, #140]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a22      	ldr	r2, [pc, #136]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a1c      	ldr	r2, [pc, #112]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0302 	and.w	r3, r3, #2
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2120      	movs	r1, #32
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ea:	f000 ff39 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	480f      	ldr	r0, [pc, #60]	; (8000644 <MX_GPIO_Init+0xd8>)
 8000606:	f000 fd81 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800060a:	2320      	movs	r3, #32
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2300      	movs	r3, #0
 8000618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f000 fd72 	bl	800110c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	2028      	movs	r0, #40	; 0x28
 800062e:	f000 fd36 	bl	800109e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000632:	2028      	movs	r0, #40	; 0x28
 8000634:	f000 fd4f 	bl	80010d6 <HAL_NVIC_EnableIRQ>

}
 8000638:	bf00      	nop
 800063a:	3728      	adds	r7, #40	; 0x28
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000
 8000644:	48000800 	.word	0x48000800

08000648 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_I2C3_Init+0x74>)
 800064e:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <MX_I2C3_Init+0x78>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_I2C3_Init+0x74>)
 8000654:	4a1b      	ldr	r2, [pc, #108]	; (80006c4 <MX_I2C3_Init+0x7c>)
 8000656:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <MX_I2C3_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_I2C3_Init+0x74>)
 8000660:	2201      	movs	r2, #1
 8000662:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_I2C3_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_I2C3_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_I2C3_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_I2C3_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_I2C3_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000682:	480e      	ldr	r0, [pc, #56]	; (80006bc <MX_I2C3_Init+0x74>)
 8000684:	f000 ff27 	bl	80014d6 <HAL_I2C_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800068e:	f000 f96b 	bl	8000968 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000692:	2100      	movs	r1, #0
 8000694:	4809      	ldr	r0, [pc, #36]	; (80006bc <MX_I2C3_Init+0x74>)
 8000696:	f001 fc41 	bl	8001f1c <HAL_I2CEx_ConfigAnalogFilter>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80006a0:	f000 f962 	bl	8000968 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006a4:	2100      	movs	r1, #0
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_I2C3_Init+0x74>)
 80006a8:	f001 fc83 	bl	8001fb2 <HAL_I2CEx_ConfigDigitalFilter>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80006b2:	f000 f959 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000084 	.word	0x20000084
 80006c0:	40005c00 	.word	0x40005c00
 80006c4:	10909cec 	.word	0x10909cec

080006c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b0ac      	sub	sp, #176	; 0xb0
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2288      	movs	r2, #136	; 0x88
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f004 f8d0 	bl	800488e <memset>
  if(i2cHandle->Instance==I2C3)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a21      	ldr	r2, [pc, #132]	; (8000778 <HAL_I2C_MspInit+0xb0>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d13b      	bne.n	8000770 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80006f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006fc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80006fe:	2300      	movs	r3, #0
 8000700:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4618      	mov	r0, r3
 8000708:	f002 fb04 	bl	8002d14 <HAL_RCCEx_PeriphCLKConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000712:	f000 f929 	bl	8000968 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <HAL_I2C_MspInit+0xb4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	4a18      	ldr	r2, [pc, #96]	; (800077c <HAL_I2C_MspInit+0xb4>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <HAL_I2C_MspInit+0xb4>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = VEML6040_SCL_Pin|VEML6040_SDA_Pin;
 800072e:	2303      	movs	r3, #3
 8000730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000734:	2312      	movs	r3, #18
 8000736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000746:	2304      	movs	r3, #4
 8000748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000750:	4619      	mov	r1, r3
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 8000754:	f000 fcda 	bl	800110c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <HAL_I2C_MspInit+0xb4>)
 800075a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_I2C_MspInit+0xb4>)
 800075e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000762:	6593      	str	r3, [r2, #88]	; 0x58
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_I2C_MspInit+0xb4>)
 8000766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000770:	bf00      	nop
 8000772:	37b0      	adds	r7, #176	; 0xb0
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40005c00 	.word	0x40005c00
 800077c:	40021000 	.word	0x40021000
 8000780:	48000800 	.word	0x48000800

08000784 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800078c:	1d39      	adds	r1, r7, #4
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
 8000792:	2201      	movs	r2, #1
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <__io_putchar+0x20>)
 8000796:	f003 fa0b 	bl	8003bb0 <HAL_UART_Transmit>
  return ch;
 800079a:	687b      	ldr	r3, [r7, #4]
}
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000138 	.word	0x20000138

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ac:	f000 fafc 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 f848 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f7ff feda 	bl	800056c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007b8:	f000 fa40 	bl	8000c3c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80007bc:	f000 f9f0 	bl	8000ba0 <MX_TIM16_Init>
  MX_I2C3_Init();
 80007c0:	f7ff ff42 	bl	8000648 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  printf("Configuring device");
 80007c4:	4816      	ldr	r0, [pc, #88]	; (8000820 <main+0x78>)
 80007c6:	f004 f80d 	bl	80047e4 <iprintf>
  // Configure VEML6040 color sensor
//  VEML6040_Configuration();


  // Check if VEML6040 color sensor is ready
  while (HAL_I2C_IsDeviceReady(&hi2c3, VEML6040_ADDRESS, 10, HAL_MAX_DELAY) != HAL_OK);
 80007ca:	bf00      	nop
 80007cc:	f04f 33ff 	mov.w	r3, #4294967295
 80007d0:	220a      	movs	r2, #10
 80007d2:	2110      	movs	r1, #16
 80007d4:	4813      	ldr	r0, [pc, #76]	; (8000824 <main+0x7c>)
 80007d6:	f001 f833 	bl	8001840 <HAL_I2C_IsDeviceReady>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1f5      	bne.n	80007cc <main+0x24>
  printf("Device ready!");
 80007e0:	4811      	ldr	r0, [pc, #68]	; (8000828 <main+0x80>)
 80007e2:	f003 ffff 	bl	80047e4 <iprintf>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Read RGB data values from VEML6040 color sensor
	    VEML6040_ReadRGBData(&redData, &greenData, &blueData);
 80007e6:	4a11      	ldr	r2, [pc, #68]	; (800082c <main+0x84>)
 80007e8:	4911      	ldr	r1, [pc, #68]	; (8000830 <main+0x88>)
 80007ea:	4812      	ldr	r0, [pc, #72]	; (8000834 <main+0x8c>)
 80007ec:	f000 f87c 	bl	80008e8 <VEML6040_ReadRGBData>

	    // Print RGB data values to console
	    printf("Red: %d\n", redData);
 80007f0:	4b10      	ldr	r3, [pc, #64]	; (8000834 <main+0x8c>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	4619      	mov	r1, r3
 80007f6:	4810      	ldr	r0, [pc, #64]	; (8000838 <main+0x90>)
 80007f8:	f003 fff4 	bl	80047e4 <iprintf>
	    printf("Green: %d\n", greenData);
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <main+0x88>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	4619      	mov	r1, r3
 8000802:	480e      	ldr	r0, [pc, #56]	; (800083c <main+0x94>)
 8000804:	f003 ffee 	bl	80047e4 <iprintf>
	    printf("Blue: %d\n", blueData);
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <main+0x84>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	480c      	ldr	r0, [pc, #48]	; (8000840 <main+0x98>)
 8000810:	f003 ffe8 	bl	80047e4 <iprintf>
	  HAL_Delay(500);
 8000814:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000818:	f000 fb42 	bl	8000ea0 <HAL_Delay>
	    VEML6040_ReadRGBData(&redData, &greenData, &blueData);
 800081c:	e7e3      	b.n	80007e6 <main+0x3e>
 800081e:	bf00      	nop
 8000820:	080054e8 	.word	0x080054e8
 8000824:	20000084 	.word	0x20000084
 8000828:	080054fc 	.word	0x080054fc
 800082c:	200000dc 	.word	0x200000dc
 8000830:	200000da 	.word	0x200000da
 8000834:	200000d8 	.word	0x200000d8
 8000838:	0800550c 	.word	0x0800550c
 800083c:	08005518 	.word	0x08005518
 8000840:	08005524 	.word	0x08005524

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b096      	sub	sp, #88	; 0x58
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	2244      	movs	r2, #68	; 0x44
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f004 f81b 	bl	800488e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	463b      	mov	r3, r7
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000866:	f44f 7000 	mov.w	r0, #512	; 0x200
 800086a:	f001 fbfd 	bl	8002068 <HAL_PWREx_ControlVoltageScaling>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000874:	f000 f878 	bl	8000968 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000878:	2302      	movs	r3, #2
 800087a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000880:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000882:	2310      	movs	r3, #16
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	2302      	movs	r3, #2
 8000888:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800088a:	2302      	movs	r3, #2
 800088c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800088e:	2301      	movs	r3, #1
 8000890:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000892:	230a      	movs	r3, #10
 8000894:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000896:	2307      	movs	r3, #7
 8000898:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800089a:	2302      	movs	r3, #2
 800089c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800089e:	2302      	movs	r3, #2
 80008a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 fc34 	bl	8002114 <HAL_RCC_OscConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008b2:	f000 f859 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	230f      	movs	r3, #15
 80008b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ba:	2303      	movs	r3, #3
 80008bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008ca:	463b      	mov	r3, r7
 80008cc:	2104      	movs	r1, #4
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 fffc 	bl	80028cc <HAL_RCC_ClockConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008da:	f000 f845 	bl	8000968 <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3758      	adds	r7, #88	; 0x58
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <VEML6040_ReadRGBData>:

/* USER CODE BEGIN 4 */
void VEML6040_ReadRGBData(uint16_t *redData, uint16_t *greenData, uint16_t *blueData)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af04      	add	r7, sp, #16
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  // Send read command to VEML6040 color sensor
  HAL_I2C_Mem_Read(&hi2c3, VEML6040_ADDRESS, RED_DATA_REGISTER, I2C_MEMADD_SIZE_8BIT, data, 6, HAL_MAX_DELAY);
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295
 80008f8:	9302      	str	r3, [sp, #8]
 80008fa:	2306      	movs	r3, #6
 80008fc:	9301      	str	r3, [sp, #4]
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <VEML6040_ReadRGBData+0x78>)
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	2301      	movs	r3, #1
 8000904:	2208      	movs	r2, #8
 8000906:	2110      	movs	r1, #16
 8000908:	4816      	ldr	r0, [pc, #88]	; (8000964 <VEML6040_ReadRGBData+0x7c>)
 800090a:	f000 fe7f 	bl	800160c <HAL_I2C_Mem_Read>

  // Combine MSB and LSB to get 16-bit red data value
  *redData = (data[1] << 8) | data[0];
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <VEML6040_ReadRGBData+0x78>)
 8000910:	785b      	ldrb	r3, [r3, #1]
 8000912:	021b      	lsls	r3, r3, #8
 8000914:	b21a      	sxth	r2, r3
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <VEML6040_ReadRGBData+0x78>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b21b      	sxth	r3, r3
 800091c:	4313      	orrs	r3, r2
 800091e:	b21b      	sxth	r3, r3
 8000920:	b29a      	uxth	r2, r3
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	801a      	strh	r2, [r3, #0]

  // Combine MSB and LSB to get 16-bit green data value
  *greenData = (data[3] << 8) | data[2];
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <VEML6040_ReadRGBData+0x78>)
 8000928:	78db      	ldrb	r3, [r3, #3]
 800092a:	021b      	lsls	r3, r3, #8
 800092c:	b21a      	sxth	r2, r3
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <VEML6040_ReadRGBData+0x78>)
 8000930:	789b      	ldrb	r3, [r3, #2]
 8000932:	b21b      	sxth	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b21b      	sxth	r3, r3
 8000938:	b29a      	uxth	r2, r3
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	801a      	strh	r2, [r3, #0]

  // Combine MSB and LSB to get 16-bit blue data value
  *blueData = (data[5] << 8) | data[4];
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <VEML6040_ReadRGBData+0x78>)
 8000940:	795b      	ldrb	r3, [r3, #5]
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	b21a      	sxth	r2, r3
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <VEML6040_ReadRGBData+0x78>)
 8000948:	791b      	ldrb	r3, [r3, #4]
 800094a:	b21b      	sxth	r3, r3
 800094c:	4313      	orrs	r3, r2
 800094e:	b21b      	sxth	r3, r3
 8000950:	b29a      	uxth	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	801a      	strh	r2, [r3, #0]
}
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200000e0 	.word	0x200000e0
 8000964:	20000084 	.word	0x20000084

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_MspInit+0x44>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_MspInit+0x44>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6613      	str	r3, [r2, #96]	; 0x60
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_MspInit+0x44>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x44>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x44>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6593      	str	r3, [r2, #88]	; 0x58
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x44>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a08:	f000 fa2a 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a16:	f002 fe90 	bl	800373a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200000ec 	.word	0x200000ec

08000a24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a2c:	f000 fd30 	bl	8001490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	e00a      	b.n	8000a5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a46:	f3af 8000 	nop.w
 8000a4a:	4601      	mov	r1, r0
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	60ba      	str	r2, [r7, #8]
 8000a52:	b2ca      	uxtb	r2, r1
 8000a54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dbf0      	blt.n	8000a46 <_read+0x12>
  }

  return len;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b086      	sub	sp, #24
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	60f8      	str	r0, [r7, #12]
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	e009      	b.n	8000a94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	60ba      	str	r2, [r7, #8]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fe7b 	bl	8000784 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	3301      	adds	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbf1      	blt.n	8000a80 <_write+0x12>
  }
  return len;
 8000a9c:	687b      	ldr	r3, [r7, #4]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_close>:

int _close(int file)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ace:	605a      	str	r2, [r3, #4]
  return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <_isatty>:

int _isatty(int file)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f003 fef4 	bl	800492c <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20018000 	.word	0x20018000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	200000e8 	.word	0x200000e8
 8000b78:	20000310 	.word	0x20000310

08000b7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <SystemInit+0x20>)
 8000b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <SystemInit+0x20>)
 8000b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_TIM16_Init+0x48>)
 8000ba6:	4a11      	ldr	r2, [pc, #68]	; (8000bec <MX_TIM16_Init+0x4c>)
 8000ba8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 40000-1;
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_TIM16_Init+0x48>)
 8000bac:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000bb0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <MX_TIM16_Init+0x48>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_TIM16_Init+0x48>)
 8000bba:	f242 720f 	movw	r2, #9999	; 0x270f
 8000bbe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_TIM16_Init+0x48>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_TIM16_Init+0x48>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_TIM16_Init+0x48>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_TIM16_Init+0x48>)
 8000bd4:	f002 fd5a 	bl	800368c <HAL_TIM_Base_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000bde:	f7ff fec3 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000ec 	.word	0x200000ec
 8000bec:	40014400 	.word	0x40014400

08000bf0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <HAL_TIM_Base_MspInit+0x44>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d113      	bne.n	8000c2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <HAL_TIM_Base_MspInit+0x48>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c06:	4a0c      	ldr	r2, [pc, #48]	; (8000c38 <HAL_TIM_Base_MspInit+0x48>)
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_TIM_Base_MspInit+0x48>)
 8000c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2019      	movs	r0, #25
 8000c20:	f000 fa3d 	bl	800109e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c24:	2019      	movs	r0, #25
 8000c26:	f000 fa56 	bl	80010d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40014400 	.word	0x40014400
 8000c38:	40021000 	.word	0x40021000

08000c3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c42:	4a15      	ldr	r2, [pc, #84]	; (8000c98 <MX_USART2_UART_Init+0x5c>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c80:	f002 ff48 	bl	8003b14 <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c8a:	f7ff fe6d 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000138 	.word	0x20000138
 8000c98:	40004400 	.word	0x40004400

08000c9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b0ac      	sub	sp, #176	; 0xb0
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2288      	movs	r2, #136	; 0x88
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f003 fde6 	bl	800488e <memset>
  if(uartHandle->Instance==USART2)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <HAL_UART_MspInit+0xb0>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d13b      	bne.n	8000d44 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f002 f81b 	bl	8002d14 <HAL_RCCEx_PeriphCLKConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ce4:	f7ff fe40 	bl	8000968 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce8:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <HAL_UART_MspInit+0xb4>)
 8000cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cec:	4a18      	ldr	r2, [pc, #96]	; (8000d50 <HAL_UART_MspInit+0xb4>)
 8000cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8000cf4:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <HAL_UART_MspInit+0xb4>)
 8000cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <HAL_UART_MspInit+0xb4>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d04:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <HAL_UART_MspInit+0xb4>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0c:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <HAL_UART_MspInit+0xb4>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d18:	230c      	movs	r3, #12
 8000d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d30:	2307      	movs	r3, #7
 8000d32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d40:	f000 f9e4 	bl	800110c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d44:	bf00      	nop
 8000d46:	37b0      	adds	r7, #176	; 0xb0
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40004400 	.word	0x40004400
 8000d50:	40021000 	.word	0x40021000

08000d54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d58:	f7ff ff10 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d5e:	490d      	ldr	r1, [pc, #52]	; (8000d94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <LoopForever+0xe>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d74:	4c0a      	ldr	r4, [pc, #40]	; (8000da0 <LoopForever+0x16>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d82:	f003 fdd9 	bl	8004938 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d86:	f7ff fd0f 	bl	80007a8 <main>

08000d8a <LoopForever>:

LoopForever:
    b LoopForever
 8000d8a:	e7fe      	b.n	8000d8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d98:	080055bc 	.word	0x080055bc
  ldr r2, =_sbss
 8000d9c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000da0:	20000310 	.word	0x20000310

08000da4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_2_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_Init+0x3c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <HAL_Init+0x3c>)
 8000db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbe:	2003      	movs	r0, #3
 8000dc0:	f000 f962 	bl	8001088 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f000 f80f 	bl	8000de8 <HAL_InitTick>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d002      	beq.n	8000dd6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	71fb      	strb	r3, [r7, #7]
 8000dd4:	e001      	b.n	8000dda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dd6:	f7ff fdcd 	bl	8000974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dda:	79fb      	ldrb	r3, [r7, #7]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40022000 	.word	0x40022000

08000de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <HAL_InitTick+0x6c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d023      	beq.n	8000e44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <HAL_InitTick+0x70>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <HAL_InitTick+0x6c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f96d 	bl	80010f2 <HAL_SYSTICK_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10f      	bne.n	8000e3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d809      	bhi.n	8000e38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f000 f937 	bl	800109e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e30:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <HAL_InitTick+0x74>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e007      	b.n	8000e48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
 8000e3c:	e004      	b.n	8000e48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	73fb      	strb	r3, [r7, #15]
 8000e42:	e001      	b.n	8000e48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	20000004 	.word	0x20000004

08000e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x20>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x24>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <HAL_IncTick+0x24>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008
 8000e84:	200001c0 	.word	0x200001c0

08000e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <HAL_GetTick+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	200001c0 	.word	0x200001c0

08000ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea8:	f7ff ffee 	bl	8000e88 <HAL_GetTick>
 8000eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb8:	d005      	beq.n	8000ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <HAL_Delay+0x44>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ec6:	bf00      	nop
 8000ec8:	f7ff ffde 	bl	8000e88 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d8f7      	bhi.n	8000ec8 <HAL_Delay+0x28>
  {
  }
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000008 	.word	0x20000008

08000ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db0b      	blt.n	8000f76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 021f 	and.w	r2, r3, #31
 8000f64:	4907      	ldr	r1, [pc, #28]	; (8000f84 <__NVIC_EnableIRQ+0x38>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db0a      	blt.n	8000fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	490c      	ldr	r1, [pc, #48]	; (8000fd4 <__NVIC_SetPriority+0x4c>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb0:	e00a      	b.n	8000fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <__NVIC_SetPriority+0x50>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	761a      	strb	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	bf28      	it	cs
 8000ffa:	2304      	movcs	r3, #4
 8000ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3304      	adds	r3, #4
 8001002:	2b06      	cmp	r3, #6
 8001004:	d902      	bls.n	800100c <NVIC_EncodePriority+0x30>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3b03      	subs	r3, #3
 800100a:	e000      	b.n	800100e <NVIC_EncodePriority+0x32>
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	f04f 32ff 	mov.w	r2, #4294967295
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001024:	f04f 31ff 	mov.w	r1, #4294967295
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43d9      	mvns	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	4313      	orrs	r3, r2
         );
}
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	; 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001054:	d301      	bcc.n	800105a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001056:	2301      	movs	r3, #1
 8001058:	e00f      	b.n	800107a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <SysTick_Config+0x40>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001062:	210f      	movs	r1, #15
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f7ff ff8e 	bl	8000f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <SysTick_Config+0x40>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <SysTick_Config+0x40>)
 8001074:	2207      	movs	r2, #7
 8001076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	e000e010 	.word	0xe000e010

08001088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff29 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010b0:	f7ff ff3e 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 80010b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	6978      	ldr	r0, [r7, #20]
 80010bc:	f7ff ff8e 	bl	8000fdc <NVIC_EncodePriority>
 80010c0:	4602      	mov	r2, r0
 80010c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff5d 	bl	8000f88 <__NVIC_SetPriority>
}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff31 	bl	8000f4c <__NVIC_EnableIRQ>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffa2 	bl	8001044 <SysTick_Config>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111a:	e17f      	b.n	800141c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2101      	movs	r1, #1
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	4013      	ands	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 8171 	beq.w	8001416 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d005      	beq.n	800114c <HAL_GPIO_Init+0x40>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d130      	bne.n	80011ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001182:	2201      	movs	r2, #1
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	f003 0201 	and.w	r2, r3, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d118      	bne.n	80011ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011c0:	2201      	movs	r2, #1
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	08db      	lsrs	r3, r3, #3
 80011d6:	f003 0201 	and.w	r2, r3, #1
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d017      	beq.n	8001228 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d123      	bne.n	800127c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	6939      	ldr	r1, [r7, #16]
 8001278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80ac 	beq.w	8001416 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	4b5f      	ldr	r3, [pc, #380]	; (800143c <HAL_GPIO_Init+0x330>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c2:	4a5e      	ldr	r2, [pc, #376]	; (800143c <HAL_GPIO_Init+0x330>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6613      	str	r3, [r2, #96]	; 0x60
 80012ca:	4b5c      	ldr	r3, [pc, #368]	; (800143c <HAL_GPIO_Init+0x330>)
 80012cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012d6:	4a5a      	ldr	r2, [pc, #360]	; (8001440 <HAL_GPIO_Init+0x334>)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3302      	adds	r3, #2
 80012de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	220f      	movs	r2, #15
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001300:	d025      	beq.n	800134e <HAL_GPIO_Init+0x242>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4f      	ldr	r2, [pc, #316]	; (8001444 <HAL_GPIO_Init+0x338>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d01f      	beq.n	800134a <HAL_GPIO_Init+0x23e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4e      	ldr	r2, [pc, #312]	; (8001448 <HAL_GPIO_Init+0x33c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d019      	beq.n	8001346 <HAL_GPIO_Init+0x23a>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4d      	ldr	r2, [pc, #308]	; (800144c <HAL_GPIO_Init+0x340>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d013      	beq.n	8001342 <HAL_GPIO_Init+0x236>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4c      	ldr	r2, [pc, #304]	; (8001450 <HAL_GPIO_Init+0x344>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d00d      	beq.n	800133e <HAL_GPIO_Init+0x232>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4b      	ldr	r2, [pc, #300]	; (8001454 <HAL_GPIO_Init+0x348>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d007      	beq.n	800133a <HAL_GPIO_Init+0x22e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4a      	ldr	r2, [pc, #296]	; (8001458 <HAL_GPIO_Init+0x34c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d101      	bne.n	8001336 <HAL_GPIO_Init+0x22a>
 8001332:	2306      	movs	r3, #6
 8001334:	e00c      	b.n	8001350 <HAL_GPIO_Init+0x244>
 8001336:	2307      	movs	r3, #7
 8001338:	e00a      	b.n	8001350 <HAL_GPIO_Init+0x244>
 800133a:	2305      	movs	r3, #5
 800133c:	e008      	b.n	8001350 <HAL_GPIO_Init+0x244>
 800133e:	2304      	movs	r3, #4
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x244>
 8001342:	2303      	movs	r3, #3
 8001344:	e004      	b.n	8001350 <HAL_GPIO_Init+0x244>
 8001346:	2302      	movs	r3, #2
 8001348:	e002      	b.n	8001350 <HAL_GPIO_Init+0x244>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x244>
 800134e:	2300      	movs	r3, #0
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	f002 0203 	and.w	r2, r2, #3
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	4093      	lsls	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001360:	4937      	ldr	r1, [pc, #220]	; (8001440 <HAL_GPIO_Init+0x334>)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800136e:	4b3b      	ldr	r3, [pc, #236]	; (800145c <HAL_GPIO_Init+0x350>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001392:	4a32      	ldr	r2, [pc, #200]	; (800145c <HAL_GPIO_Init+0x350>)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001398:	4b30      	ldr	r3, [pc, #192]	; (800145c <HAL_GPIO_Init+0x350>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013bc:	4a27      	ldr	r2, [pc, #156]	; (800145c <HAL_GPIO_Init+0x350>)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013c2:	4b26      	ldr	r3, [pc, #152]	; (800145c <HAL_GPIO_Init+0x350>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013e6:	4a1d      	ldr	r2, [pc, #116]	; (800145c <HAL_GPIO_Init+0x350>)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_GPIO_Init+0x350>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001410:	4a12      	ldr	r2, [pc, #72]	; (800145c <HAL_GPIO_Init+0x350>)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa22 f303 	lsr.w	r3, r2, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	f47f ae78 	bne.w	800111c <HAL_GPIO_Init+0x10>
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	371c      	adds	r7, #28
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000
 8001440:	40010000 	.word	0x40010000
 8001444:	48000400 	.word	0x48000400
 8001448:	48000800 	.word	0x48000800
 800144c:	48000c00 	.word	0x48000c00
 8001450:	48001000 	.word	0x48001000
 8001454:	48001400 	.word	0x48001400
 8001458:	48001800 	.word	0x48001800
 800145c:	40010400 	.word	0x40010400

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800147c:	e002      	b.n	8001484 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d006      	beq.n	80014b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014a6:	4a05      	ldr	r2, [pc, #20]	; (80014bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f806 	bl	80014c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40010400 	.word	0x40010400

080014c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e08d      	b.n	8001604 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d106      	bne.n	8001502 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff f8e3 	bl	80006c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2224      	movs	r2, #36	; 0x24
 8001506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0201 	bic.w	r2, r2, #1
 8001518:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001526:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001536:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d107      	bne.n	8001550 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	e006      	b.n	800155e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800155c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d108      	bne.n	8001578 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	e007      	b.n	8001588 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001586:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800159a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69d9      	ldr	r1, [r3, #28]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1a      	ldr	r2, [r3, #32]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0201 	orr.w	r2, r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2220      	movs	r2, #32
 80015f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af02      	add	r7, sp, #8
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	4608      	mov	r0, r1
 8001616:	4611      	mov	r1, r2
 8001618:	461a      	mov	r2, r3
 800161a:	4603      	mov	r3, r0
 800161c:	817b      	strh	r3, [r7, #10]
 800161e:	460b      	mov	r3, r1
 8001620:	813b      	strh	r3, [r7, #8]
 8001622:	4613      	mov	r3, r2
 8001624:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b20      	cmp	r3, #32
 8001630:	f040 80fd 	bne.w	800182e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d002      	beq.n	8001640 <HAL_I2C_Mem_Read+0x34>
 800163a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800163c:	2b00      	cmp	r3, #0
 800163e:	d105      	bne.n	800164c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001646:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0f1      	b.n	8001830 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_I2C_Mem_Read+0x4e>
 8001656:	2302      	movs	r3, #2
 8001658:	e0ea      	b.n	8001830 <HAL_I2C_Mem_Read+0x224>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001662:	f7ff fc11 	bl	8000e88 <HAL_GetTick>
 8001666:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2319      	movs	r3, #25
 800166e:	2201      	movs	r2, #1
 8001670:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f000 fa65 	bl	8001b44 <I2C_WaitOnFlagUntilTimeout>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0d5      	b.n	8001830 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2222      	movs	r2, #34	; 0x22
 8001688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2240      	movs	r2, #64	; 0x40
 8001690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2200      	movs	r2, #0
 8001698:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6a3a      	ldr	r2, [r7, #32]
 800169e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016ac:	88f8      	ldrh	r0, [r7, #6]
 80016ae:	893a      	ldrh	r2, [r7, #8]
 80016b0:	8979      	ldrh	r1, [r7, #10]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4603      	mov	r3, r0
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f000 f9c9 	bl	8001a54 <I2C_RequestMemoryRead>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0ad      	b.n	8001830 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d8:	b29b      	uxth	r3, r3
 80016da:	2bff      	cmp	r3, #255	; 0xff
 80016dc:	d90e      	bls.n	80016fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	22ff      	movs	r2, #255	; 0xff
 80016e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	8979      	ldrh	r1, [r7, #10]
 80016ec:	4b52      	ldr	r3, [pc, #328]	; (8001838 <HAL_I2C_Mem_Read+0x22c>)
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 fbdf 	bl	8001eb8 <I2C_TransferConfig>
 80016fa:	e00f      	b.n	800171c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001700:	b29a      	uxth	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170a:	b2da      	uxtb	r2, r3
 800170c:	8979      	ldrh	r1, [r7, #10]
 800170e:	4b4a      	ldr	r3, [pc, #296]	; (8001838 <HAL_I2C_Mem_Read+0x22c>)
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 fbce 	bl	8001eb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001722:	2200      	movs	r2, #0
 8001724:	2104      	movs	r1, #4
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f000 fa0c 	bl	8001b44 <I2C_WaitOnFlagUntilTimeout>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e07c      	b.n	8001830 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001752:	3b01      	subs	r3, #1
 8001754:	b29a      	uxth	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175e:	b29b      	uxth	r3, r3
 8001760:	3b01      	subs	r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176c:	b29b      	uxth	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d034      	beq.n	80017dc <HAL_I2C_Mem_Read+0x1d0>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001776:	2b00      	cmp	r3, #0
 8001778:	d130      	bne.n	80017dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001780:	2200      	movs	r2, #0
 8001782:	2180      	movs	r1, #128	; 0x80
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f000 f9dd 	bl	8001b44 <I2C_WaitOnFlagUntilTimeout>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e04d      	b.n	8001830 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001798:	b29b      	uxth	r3, r3
 800179a:	2bff      	cmp	r3, #255	; 0xff
 800179c:	d90e      	bls.n	80017bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	22ff      	movs	r2, #255	; 0xff
 80017a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	8979      	ldrh	r1, [r7, #10]
 80017ac:	2300      	movs	r3, #0
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 fb7f 	bl	8001eb8 <I2C_TransferConfig>
 80017ba:	e00f      	b.n	80017dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	8979      	ldrh	r1, [r7, #10]
 80017ce:	2300      	movs	r3, #0
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f000 fb6e 	bl	8001eb8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d19a      	bne.n	800171c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 fa40 	bl	8001c70 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e01a      	b.n	8001830 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2220      	movs	r2, #32
 8001800:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_I2C_Mem_Read+0x230>)
 800180e:	400b      	ands	r3, r1
 8001810:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2220      	movs	r2, #32
 8001816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	e000      	b.n	8001830 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800182e:	2302      	movs	r3, #2
  }
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	80002400 	.word	0x80002400
 800183c:	fe00e800 	.word	0xfe00e800

08001840 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af02      	add	r7, sp, #8
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	460b      	mov	r3, r1
 800184e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b20      	cmp	r3, #32
 800185e:	f040 80f3 	bne.w	8001a48 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800186c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001870:	d101      	bne.n	8001876 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001872:	2302      	movs	r3, #2
 8001874:	e0e9      	b.n	8001a4a <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <HAL_I2C_IsDeviceReady+0x44>
 8001880:	2302      	movs	r3, #2
 8001882:	e0e2      	b.n	8001a4a <HAL_I2C_IsDeviceReady+0x20a>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2224      	movs	r2, #36	; 0x24
 8001890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d107      	bne.n	80018b2 <HAL_I2C_IsDeviceReady+0x72>
 80018a2:	897b      	ldrh	r3, [r7, #10]
 80018a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018b0:	e006      	b.n	80018c0 <HAL_I2C_IsDeviceReady+0x80>
 80018b2:	897b      	ldrh	r3, [r7, #10]
 80018b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018bc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80018c6:	f7ff fadf 	bl	8000e88 <HAL_GetTick>
 80018ca:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	f003 0320 	and.w	r3, r3, #32
 80018d6:	2b20      	cmp	r3, #32
 80018d8:	bf0c      	ite	eq
 80018da:	2301      	moveq	r3, #1
 80018dc:	2300      	movne	r3, #0
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	2b10      	cmp	r3, #16
 80018ee:	bf0c      	ite	eq
 80018f0:	2301      	moveq	r3, #1
 80018f2:	2300      	movne	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80018f8:	e034      	b.n	8001964 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d01a      	beq.n	8001938 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001902:	f7ff fac1 	bl	8000e88 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d302      	bcc.n	8001918 <HAL_I2C_IsDeviceReady+0xd8>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10f      	bne.n	8001938 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2220      	movs	r2, #32
 800191c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001924:	f043 0220 	orr.w	r2, r3, #32
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e088      	b.n	8001a4a <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	f003 0320 	and.w	r3, r3, #32
 8001942:	2b20      	cmp	r3, #32
 8001944:	bf0c      	ite	eq
 8001946:	2301      	moveq	r3, #1
 8001948:	2300      	movne	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	2b10      	cmp	r3, #16
 800195a:	bf0c      	ite	eq
 800195c:	2301      	moveq	r3, #1
 800195e:	2300      	movne	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001964:	7ffb      	ldrb	r3, [r7, #31]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <HAL_I2C_IsDeviceReady+0x130>
 800196a:	7fbb      	ldrb	r3, [r7, #30]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0c4      	beq.n	80018fa <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f003 0310 	and.w	r3, r3, #16
 800197a:	2b10      	cmp	r3, #16
 800197c:	d01a      	beq.n	80019b4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2200      	movs	r2, #0
 8001986:	2120      	movs	r1, #32
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f000 f8db 	bl	8001b44 <I2C_WaitOnFlagUntilTimeout>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e058      	b.n	8001a4a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2220      	movs	r2, #32
 800199e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2220      	movs	r2, #32
 80019a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	e04a      	b.n	8001a4a <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	2200      	movs	r2, #0
 80019bc:	2120      	movs	r1, #32
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 f8c0 	bl	8001b44 <I2C_WaitOnFlagUntilTimeout>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e03d      	b.n	8001a4a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2210      	movs	r2, #16
 80019d4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2220      	movs	r2, #32
 80019dc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d118      	bne.n	8001a18 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019f4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	2200      	movs	r2, #0
 80019fe:	2120      	movs	r1, #32
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 f89f 	bl	8001b44 <I2C_WaitOnFlagUntilTimeout>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e01c      	b.n	8001a4a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2220      	movs	r2, #32
 8001a16:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	f63f af39 	bhi.w	800189a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a34:	f043 0220 	orr.w	r2, r3, #32
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001a48:	2302      	movs	r3, #2
  }
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3720      	adds	r7, #32
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	4608      	mov	r0, r1
 8001a5e:	4611      	mov	r1, r2
 8001a60:	461a      	mov	r2, r3
 8001a62:	4603      	mov	r3, r0
 8001a64:	817b      	strh	r3, [r7, #10]
 8001a66:	460b      	mov	r3, r1
 8001a68:	813b      	strh	r3, [r7, #8]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	8979      	ldrh	r1, [r7, #10]
 8001a74:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <I2C_RequestMemoryRead+0xa4>)
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 fa1c 	bl	8001eb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	69b9      	ldr	r1, [r7, #24]
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 f8ac 	bl	8001be2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e02c      	b.n	8001aee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d105      	bne.n	8001aa6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a9a:	893b      	ldrh	r3, [r7, #8]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
 8001aa4:	e015      	b.n	8001ad2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001aa6:	893b      	ldrh	r3, [r7, #8]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ab4:	69fa      	ldr	r2, [r7, #28]
 8001ab6:	69b9      	ldr	r1, [r7, #24]
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 f892 	bl	8001be2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e012      	b.n	8001aee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ac8:	893b      	ldrh	r3, [r7, #8]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2140      	movs	r1, #64	; 0x40
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 f831 	bl	8001b44 <I2C_WaitOnFlagUntilTimeout>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	80002000 	.word	0x80002000

08001afc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d103      	bne.n	8001b1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2200      	movs	r2, #0
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d007      	beq.n	8001b38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699a      	ldr	r2, [r3, #24]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	619a      	str	r2, [r3, #24]
  }
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	4613      	mov	r3, r2
 8001b52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b54:	e031      	b.n	8001bba <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5c:	d02d      	beq.n	8001bba <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5e:	f7ff f993 	bl	8000e88 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d302      	bcc.n	8001b74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d122      	bne.n	8001bba <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	699a      	ldr	r2, [r3, #24]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	bf0c      	ite	eq
 8001b84:	2301      	moveq	r3, #1
 8001b86:	2300      	movne	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d113      	bne.n	8001bba <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f043 0220 	orr.w	r2, r3, #32
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00f      	b.n	8001bda <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	699a      	ldr	r2, [r3, #24]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	bf0c      	ite	eq
 8001bca:	2301      	moveq	r3, #1
 8001bcc:	2300      	movne	r3, #0
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d0be      	beq.n	8001b56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bee:	e033      	b.n	8001c58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	68b9      	ldr	r1, [r7, #8]
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 f87f 	bl	8001cf8 <I2C_IsErrorOccurred>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e031      	b.n	8001c68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0a:	d025      	beq.n	8001c58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c0c:	f7ff f93c 	bl	8000e88 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d302      	bcc.n	8001c22 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d11a      	bne.n	8001c58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d013      	beq.n	8001c58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	f043 0220 	orr.w	r2, r3, #32
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e007      	b.n	8001c68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d1c4      	bne.n	8001bf0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c7c:	e02f      	b.n	8001cde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	68b9      	ldr	r1, [r7, #8]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 f838 	bl	8001cf8 <I2C_IsErrorOccurred>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e02d      	b.n	8001cee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c92:	f7ff f8f9 	bl	8000e88 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d302      	bcc.n	8001ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d11a      	bne.n	8001cde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 0320 	and.w	r3, r3, #32
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	d013      	beq.n	8001cde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	f043 0220 	orr.w	r2, r3, #32
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e007      	b.n	8001cee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0320 	and.w	r3, r3, #32
 8001ce8:	2b20      	cmp	r3, #32
 8001cea:	d1c8      	bne.n	8001c7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d068      	beq.n	8001df6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2210      	movs	r2, #16
 8001d2a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d2c:	e049      	b.n	8001dc2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d34:	d045      	beq.n	8001dc2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d36:	f7ff f8a7 	bl	8000e88 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d302      	bcc.n	8001d4c <I2C_IsErrorOccurred+0x54>
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d13a      	bne.n	8001dc2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d5e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d6e:	d121      	bne.n	8001db4 <I2C_IsErrorOccurred+0xbc>
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d76:	d01d      	beq.n	8001db4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001d78:	7cfb      	ldrb	r3, [r7, #19]
 8001d7a:	2b20      	cmp	r3, #32
 8001d7c:	d01a      	beq.n	8001db4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d8c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d8e:	f7ff f87b 	bl	8000e88 <HAL_GetTick>
 8001d92:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d94:	e00e      	b.n	8001db4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d96:	f7ff f877 	bl	8000e88 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b19      	cmp	r3, #25
 8001da2:	d907      	bls.n	8001db4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	f043 0320 	orr.w	r3, r3, #32
 8001daa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001db2:	e006      	b.n	8001dc2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f003 0320 	and.w	r3, r3, #32
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	d1e9      	bne.n	8001d96 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	2b20      	cmp	r3, #32
 8001dce:	d003      	beq.n	8001dd8 <I2C_IsErrorOccurred+0xe0>
 8001dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0aa      	beq.n	8001d2e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d103      	bne.n	8001de8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2220      	movs	r2, #32
 8001de6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	f043 0304 	orr.w	r3, r3, #4
 8001dee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00b      	beq.n	8001e20 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	f043 0308 	orr.w	r3, r3, #8
 8001e30:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00b      	beq.n	8001e64 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	f043 0302 	orr.w	r3, r3, #2
 8001e52:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01c      	beq.n	8001ea6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f7ff fe45 	bl	8001afc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6859      	ldr	r1, [r3, #4]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <I2C_IsErrorOccurred+0x1bc>)
 8001e7e:	400b      	ands	r3, r1
 8001e80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2220      	movs	r2, #32
 8001e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3728      	adds	r7, #40	; 0x28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	fe00e800 	.word	0xfe00e800

08001eb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	817b      	strh	r3, [r7, #10]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eca:	897b      	ldrh	r3, [r7, #10]
 8001ecc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ed0:	7a7b      	ldrb	r3, [r7, #9]
 8001ed2:	041b      	lsls	r3, r3, #16
 8001ed4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ed8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ee6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	0d5b      	lsrs	r3, r3, #21
 8001ef2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <I2C_TransferConfig+0x60>)
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	43db      	mvns	r3, r3
 8001efc:	ea02 0103 	and.w	r1, r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f0a:	bf00      	nop
 8001f0c:	371c      	adds	r7, #28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	03ff63ff 	.word	0x03ff63ff

08001f1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	d138      	bne.n	8001fa4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e032      	b.n	8001fa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2224      	movs	r2, #36	; 0x24
 8001f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6819      	ldr	r1, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e000      	b.n	8001fa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fa4:	2302      	movs	r3, #2
  }
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b085      	sub	sp, #20
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d139      	bne.n	800203c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e033      	b.n	800203e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2224      	movs	r2, #36	; 0x24
 8001fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0201 	bic.w	r2, r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002004:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4313      	orrs	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0201 	orr.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	e000      	b.n	800203e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800203c:	2302      	movs	r3, #2
  }
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <HAL_PWREx_GetVoltageRange+0x18>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40007000 	.word	0x40007000

08002068 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002076:	d130      	bne.n	80020da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002078:	4b23      	ldr	r3, [pc, #140]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002084:	d038      	beq.n	80020f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002086:	4b20      	ldr	r3, [pc, #128]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800208e:	4a1e      	ldr	r2, [pc, #120]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002090:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002094:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002096:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2232      	movs	r2, #50	; 0x32
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	4a1b      	ldr	r2, [pc, #108]	; (8002110 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	0c9b      	lsrs	r3, r3, #18
 80020a8:	3301      	adds	r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ac:	e002      	b.n	80020b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c0:	d102      	bne.n	80020c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f2      	bne.n	80020ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d4:	d110      	bne.n	80020f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e00f      	b.n	80020fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e6:	d007      	beq.n	80020f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020e8:	4b07      	ldr	r3, [pc, #28]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020f0:	4a05      	ldr	r2, [pc, #20]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40007000 	.word	0x40007000
 800210c:	20000000 	.word	0x20000000
 8002110:	431bde83 	.word	0x431bde83

08002114 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e3ca      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002126:	4b97      	ldr	r3, [pc, #604]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002130:	4b94      	ldr	r3, [pc, #592]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 80e4 	beq.w	8002310 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <HAL_RCC_OscConfig+0x4a>
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	2b0c      	cmp	r3, #12
 8002152:	f040 808b 	bne.w	800226c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2b01      	cmp	r3, #1
 800215a:	f040 8087 	bne.w	800226c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800215e:	4b89      	ldr	r3, [pc, #548]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d005      	beq.n	8002176 <HAL_RCC_OscConfig+0x62>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e3a2      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1a      	ldr	r2, [r3, #32]
 800217a:	4b82      	ldr	r3, [pc, #520]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d004      	beq.n	8002190 <HAL_RCC_OscConfig+0x7c>
 8002186:	4b7f      	ldr	r3, [pc, #508]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800218e:	e005      	b.n	800219c <HAL_RCC_OscConfig+0x88>
 8002190:	4b7c      	ldr	r3, [pc, #496]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800219c:	4293      	cmp	r3, r2
 800219e:	d223      	bcs.n	80021e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fd55 	bl	8002c54 <RCC_SetFlashLatencyFromMSIRange>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e383      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021b4:	4b73      	ldr	r3, [pc, #460]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a72      	ldr	r2, [pc, #456]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80021ba:	f043 0308 	orr.w	r3, r3, #8
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	4b70      	ldr	r3, [pc, #448]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	496d      	ldr	r1, [pc, #436]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021d2:	4b6c      	ldr	r3, [pc, #432]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	4968      	ldr	r1, [pc, #416]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
 80021e6:	e025      	b.n	8002234 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e8:	4b66      	ldr	r3, [pc, #408]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a65      	ldr	r2, [pc, #404]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80021ee:	f043 0308 	orr.w	r3, r3, #8
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b63      	ldr	r3, [pc, #396]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4960      	ldr	r1, [pc, #384]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002206:	4b5f      	ldr	r3, [pc, #380]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	495b      	ldr	r1, [pc, #364]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d109      	bne.n	8002234 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	4618      	mov	r0, r3
 8002226:	f000 fd15 	bl	8002c54 <RCC_SetFlashLatencyFromMSIRange>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e343      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002234:	f000 fc4a 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 8002238:	4602      	mov	r2, r0
 800223a:	4b52      	ldr	r3, [pc, #328]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	091b      	lsrs	r3, r3, #4
 8002240:	f003 030f 	and.w	r3, r3, #15
 8002244:	4950      	ldr	r1, [pc, #320]	; (8002388 <HAL_RCC_OscConfig+0x274>)
 8002246:	5ccb      	ldrb	r3, [r1, r3]
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
 8002250:	4a4e      	ldr	r2, [pc, #312]	; (800238c <HAL_RCC_OscConfig+0x278>)
 8002252:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002254:	4b4e      	ldr	r3, [pc, #312]	; (8002390 <HAL_RCC_OscConfig+0x27c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe fdc5 	bl	8000de8 <HAL_InitTick>
 800225e:	4603      	mov	r3, r0
 8002260:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d052      	beq.n	800230e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	e327      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d032      	beq.n	80022da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a42      	ldr	r2, [pc, #264]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002280:	f7fe fe02 	bl	8000e88 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002288:	f7fe fdfe 	bl	8000e88 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e310      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800229a:	4b3a      	ldr	r3, [pc, #232]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022a6:	4b37      	ldr	r3, [pc, #220]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a36      	ldr	r2, [pc, #216]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022ac:	f043 0308 	orr.w	r3, r3, #8
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b34      	ldr	r3, [pc, #208]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	4931      	ldr	r1, [pc, #196]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022c4:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	492c      	ldr	r1, [pc, #176]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
 80022d8:	e01a      	b.n	8002310 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022da:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a29      	ldr	r2, [pc, #164]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022e0:	f023 0301 	bic.w	r3, r3, #1
 80022e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022e6:	f7fe fdcf 	bl	8000e88 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022ee:	f7fe fdcb 	bl	8000e88 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e2dd      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002300:	4b20      	ldr	r3, [pc, #128]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f0      	bne.n	80022ee <HAL_RCC_OscConfig+0x1da>
 800230c:	e000      	b.n	8002310 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800230e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d074      	beq.n	8002406 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b08      	cmp	r3, #8
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x21a>
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	2b0c      	cmp	r3, #12
 8002326:	d10e      	bne.n	8002346 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d10b      	bne.n	8002346 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d064      	beq.n	8002404 <HAL_RCC_OscConfig+0x2f0>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d160      	bne.n	8002404 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e2ba      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234e:	d106      	bne.n	800235e <HAL_RCC_OscConfig+0x24a>
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	e026      	b.n	80023ac <HAL_RCC_OscConfig+0x298>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002366:	d115      	bne.n	8002394 <HAL_RCC_OscConfig+0x280>
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a05      	ldr	r2, [pc, #20]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 800236e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a02      	ldr	r2, [pc, #8]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 800237a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	e014      	b.n	80023ac <HAL_RCC_OscConfig+0x298>
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
 8002388:	08005530 	.word	0x08005530
 800238c:	20000000 	.word	0x20000000
 8002390:	20000004 	.word	0x20000004
 8002394:	4ba0      	ldr	r3, [pc, #640]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a9f      	ldr	r2, [pc, #636]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800239a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b9d      	ldr	r3, [pc, #628]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a9c      	ldr	r2, [pc, #624]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80023a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe fd68 	bl	8000e88 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023bc:	f7fe fd64 	bl	8000e88 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e276      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ce:	4b92      	ldr	r3, [pc, #584]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x2a8>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe fd54 	bl	8000e88 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e4:	f7fe fd50 	bl	8000e88 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e262      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023f6:	4b88      	ldr	r3, [pc, #544]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x2d0>
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d060      	beq.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b04      	cmp	r3, #4
 8002416:	d005      	beq.n	8002424 <HAL_RCC_OscConfig+0x310>
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b0c      	cmp	r3, #12
 800241c:	d119      	bne.n	8002452 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d116      	bne.n	8002452 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002424:	4b7c      	ldr	r3, [pc, #496]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_OscConfig+0x328>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e23f      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243c:	4b76      	ldr	r3, [pc, #472]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	061b      	lsls	r3, r3, #24
 800244a:	4973      	ldr	r1, [pc, #460]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002450:	e040      	b.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d023      	beq.n	80024a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245a:	4b6f      	ldr	r3, [pc, #444]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a6e      	ldr	r2, [pc, #440]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002466:	f7fe fd0f 	bl	8000e88 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246e:	f7fe fd0b 	bl	8000e88 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e21d      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002480:	4b65      	ldr	r3, [pc, #404]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248c:	4b62      	ldr	r3, [pc, #392]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	061b      	lsls	r3, r3, #24
 800249a:	495f      	ldr	r1, [pc, #380]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
 80024a0:	e018      	b.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a2:	4b5d      	ldr	r3, [pc, #372]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a5c      	ldr	r2, [pc, #368]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80024a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fceb 	bl	8000e88 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fce7 	bl	8000e88 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e1f9      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024c8:	4b53      	ldr	r3, [pc, #332]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f0      	bne.n	80024b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d03c      	beq.n	800255a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d01c      	beq.n	8002522 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e8:	4b4b      	ldr	r3, [pc, #300]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80024ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ee:	4a4a      	ldr	r2, [pc, #296]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7fe fcc6 	bl	8000e88 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002500:	f7fe fcc2 	bl	8000e88 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1d4      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002512:	4b41      	ldr	r3, [pc, #260]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 8002514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0ef      	beq.n	8002500 <HAL_RCC_OscConfig+0x3ec>
 8002520:	e01b      	b.n	800255a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002522:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 8002524:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002528:	4a3b      	ldr	r2, [pc, #236]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002532:	f7fe fca9 	bl	8000e88 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253a:	f7fe fca5 	bl	8000e88 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e1b7      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800254c:	4b32      	ldr	r3, [pc, #200]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800254e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1ef      	bne.n	800253a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 80a6 	beq.w	80026b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002568:	2300      	movs	r3, #0
 800256a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800256c:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10d      	bne.n	8002594 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	4a26      	ldr	r2, [pc, #152]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800257e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002582:	6593      	str	r3, [r2, #88]	; 0x58
 8002584:	4b24      	ldr	r3, [pc, #144]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002590:	2301      	movs	r3, #1
 8002592:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002594:	4b21      	ldr	r3, [pc, #132]	; (800261c <HAL_RCC_OscConfig+0x508>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d118      	bne.n	80025d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025a0:	4b1e      	ldr	r3, [pc, #120]	; (800261c <HAL_RCC_OscConfig+0x508>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a1d      	ldr	r2, [pc, #116]	; (800261c <HAL_RCC_OscConfig+0x508>)
 80025a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ac:	f7fe fc6c 	bl	8000e88 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b4:	f7fe fc68 	bl	8000e88 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e17a      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <HAL_RCC_OscConfig+0x508>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d108      	bne.n	80025ec <HAL_RCC_OscConfig+0x4d8>
 80025da:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e0:	4a0d      	ldr	r2, [pc, #52]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025ea:	e029      	b.n	8002640 <HAL_RCC_OscConfig+0x52c>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	d115      	bne.n	8002620 <HAL_RCC_OscConfig+0x50c>
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fa:	4a07      	ldr	r2, [pc, #28]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 80025fc:	f043 0304 	orr.w	r3, r3, #4
 8002600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260a:	4a03      	ldr	r2, [pc, #12]	; (8002618 <HAL_RCC_OscConfig+0x504>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002614:	e014      	b.n	8002640 <HAL_RCC_OscConfig+0x52c>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	40007000 	.word	0x40007000
 8002620:	4b9c      	ldr	r3, [pc, #624]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002626:	4a9b      	ldr	r2, [pc, #620]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002630:	4b98      	ldr	r3, [pc, #608]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	4a97      	ldr	r2, [pc, #604]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 8002638:	f023 0304 	bic.w	r3, r3, #4
 800263c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d016      	beq.n	8002676 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7fe fc1e 	bl	8000e88 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800264e:	e00a      	b.n	8002666 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002650:	f7fe fc1a 	bl	8000e88 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	; 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e12a      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002666:	4b8b      	ldr	r3, [pc, #556]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ed      	beq.n	8002650 <HAL_RCC_OscConfig+0x53c>
 8002674:	e015      	b.n	80026a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002676:	f7fe fc07 	bl	8000e88 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800267c:	e00a      	b.n	8002694 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267e:	f7fe fc03 	bl	8000e88 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f241 3288 	movw	r2, #5000	; 0x1388
 800268c:	4293      	cmp	r3, r2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e113      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002694:	4b7f      	ldr	r3, [pc, #508]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 8002696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1ed      	bne.n	800267e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026a2:	7ffb      	ldrb	r3, [r7, #31]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d105      	bne.n	80026b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a8:	4b7a      	ldr	r3, [pc, #488]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	4a79      	ldr	r2, [pc, #484]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 80026ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80fe 	beq.w	80028ba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	f040 80d0 	bne.w	8002868 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026c8:	4b72      	ldr	r3, [pc, #456]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 0203 	and.w	r2, r3, #3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	429a      	cmp	r2, r3
 80026da:	d130      	bne.n	800273e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	3b01      	subs	r3, #1
 80026e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d127      	bne.n	800273e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d11f      	bne.n	800273e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002708:	2a07      	cmp	r2, #7
 800270a:	bf14      	ite	ne
 800270c:	2201      	movne	r2, #1
 800270e:	2200      	moveq	r2, #0
 8002710:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002712:	4293      	cmp	r3, r2
 8002714:	d113      	bne.n	800273e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002720:	085b      	lsrs	r3, r3, #1
 8002722:	3b01      	subs	r3, #1
 8002724:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002726:	429a      	cmp	r2, r3
 8002728:	d109      	bne.n	800273e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	085b      	lsrs	r3, r3, #1
 8002736:	3b01      	subs	r3, #1
 8002738:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d06e      	beq.n	800281c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	2b0c      	cmp	r3, #12
 8002742:	d069      	beq.n	8002818 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002744:	4b53      	ldr	r3, [pc, #332]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d105      	bne.n	800275c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002750:	4b50      	ldr	r3, [pc, #320]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0ad      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002760:	4b4c      	ldr	r3, [pc, #304]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a4b      	ldr	r2, [pc, #300]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 8002766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800276a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800276c:	f7fe fb8c 	bl	8000e88 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002774:	f7fe fb88 	bl	8000e88 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e09a      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002786:	4b43      	ldr	r3, [pc, #268]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002792:	4b40      	ldr	r3, [pc, #256]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	4b40      	ldr	r3, [pc, #256]	; (8002898 <HAL_RCC_OscConfig+0x784>)
 8002798:	4013      	ands	r3, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027a2:	3a01      	subs	r2, #1
 80027a4:	0112      	lsls	r2, r2, #4
 80027a6:	4311      	orrs	r1, r2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027ac:	0212      	lsls	r2, r2, #8
 80027ae:	4311      	orrs	r1, r2
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027b4:	0852      	lsrs	r2, r2, #1
 80027b6:	3a01      	subs	r2, #1
 80027b8:	0552      	lsls	r2, r2, #21
 80027ba:	4311      	orrs	r1, r2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027c0:	0852      	lsrs	r2, r2, #1
 80027c2:	3a01      	subs	r2, #1
 80027c4:	0652      	lsls	r2, r2, #25
 80027c6:	4311      	orrs	r1, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027cc:	0912      	lsrs	r2, r2, #4
 80027ce:	0452      	lsls	r2, r2, #17
 80027d0:	430a      	orrs	r2, r1
 80027d2:	4930      	ldr	r1, [pc, #192]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027d8:	4b2e      	ldr	r3, [pc, #184]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a2d      	ldr	r2, [pc, #180]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 80027de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027e4:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4a2a      	ldr	r2, [pc, #168]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 80027ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027f0:	f7fe fb4a 	bl	8000e88 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f8:	f7fe fb46 	bl	8000e88 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e058      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280a:	4b22      	ldr	r3, [pc, #136]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002816:	e050      	b.n	80028ba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e04f      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800281c:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d148      	bne.n	80028ba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002828:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a19      	ldr	r2, [pc, #100]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 800282e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002832:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002834:	4b17      	ldr	r3, [pc, #92]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4a16      	ldr	r2, [pc, #88]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 800283a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800283e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002840:	f7fe fb22 	bl	8000e88 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002848:	f7fe fb1e 	bl	8000e88 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e030      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800285a:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x734>
 8002866:	e028      	b.n	80028ba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	2b0c      	cmp	r3, #12
 800286c:	d023      	beq.n	80028b6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a08      	ldr	r2, [pc, #32]	; (8002894 <HAL_RCC_OscConfig+0x780>)
 8002874:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287a:	f7fe fb05 	bl	8000e88 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002880:	e00c      	b.n	800289c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002882:	f7fe fb01 	bl	8000e88 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d905      	bls.n	800289c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e013      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
 8002894:	40021000 	.word	0x40021000
 8002898:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800289c:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_RCC_OscConfig+0x7b0>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ec      	bne.n	8002882 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_RCC_OscConfig+0x7b0>)
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	4905      	ldr	r1, [pc, #20]	; (80028c4 <HAL_RCC_OscConfig+0x7b0>)
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_RCC_OscConfig+0x7b4>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	60cb      	str	r3, [r1, #12]
 80028b4:	e001      	b.n	80028ba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3720      	adds	r7, #32
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40021000 	.word	0x40021000
 80028c8:	feeefffc 	.word	0xfeeefffc

080028cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0e7      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e0:	4b75      	ldr	r3, [pc, #468]	; (8002ab8 <HAL_RCC_ClockConfig+0x1ec>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d910      	bls.n	8002910 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b72      	ldr	r3, [pc, #456]	; (8002ab8 <HAL_RCC_ClockConfig+0x1ec>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 0207 	bic.w	r2, r3, #7
 80028f6:	4970      	ldr	r1, [pc, #448]	; (8002ab8 <HAL_RCC_ClockConfig+0x1ec>)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b6e      	ldr	r3, [pc, #440]	; (8002ab8 <HAL_RCC_ClockConfig+0x1ec>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0cf      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d010      	beq.n	800293e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	4b66      	ldr	r3, [pc, #408]	; (8002abc <HAL_RCC_ClockConfig+0x1f0>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002928:	429a      	cmp	r2, r3
 800292a:	d908      	bls.n	800293e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800292c:	4b63      	ldr	r3, [pc, #396]	; (8002abc <HAL_RCC_ClockConfig+0x1f0>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	4960      	ldr	r1, [pc, #384]	; (8002abc <HAL_RCC_ClockConfig+0x1f0>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d04c      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d107      	bne.n	8002962 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002952:	4b5a      	ldr	r3, [pc, #360]	; (8002abc <HAL_RCC_ClockConfig+0x1f0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d121      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e0a6      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800296a:	4b54      	ldr	r3, [pc, #336]	; (8002abc <HAL_RCC_ClockConfig+0x1f0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d115      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e09a      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002982:	4b4e      	ldr	r3, [pc, #312]	; (8002abc <HAL_RCC_ClockConfig+0x1f0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e08e      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002992:	4b4a      	ldr	r3, [pc, #296]	; (8002abc <HAL_RCC_ClockConfig+0x1f0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e086      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029a2:	4b46      	ldr	r3, [pc, #280]	; (8002abc <HAL_RCC_ClockConfig+0x1f0>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f023 0203 	bic.w	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4943      	ldr	r1, [pc, #268]	; (8002abc <HAL_RCC_ClockConfig+0x1f0>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b4:	f7fe fa68 	bl	8000e88 <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029bc:	f7fe fa64 	bl	8000e88 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e06e      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	4b3a      	ldr	r3, [pc, #232]	; (8002abc <HAL_RCC_ClockConfig+0x1f0>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 020c 	and.w	r2, r3, #12
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d1eb      	bne.n	80029bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d010      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	4b31      	ldr	r3, [pc, #196]	; (8002abc <HAL_RCC_ClockConfig+0x1f0>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d208      	bcs.n	8002a12 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a00:	4b2e      	ldr	r3, [pc, #184]	; (8002abc <HAL_RCC_ClockConfig+0x1f0>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	492b      	ldr	r1, [pc, #172]	; (8002abc <HAL_RCC_ClockConfig+0x1f0>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a12:	4b29      	ldr	r3, [pc, #164]	; (8002ab8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d210      	bcs.n	8002a42 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a20:	4b25      	ldr	r3, [pc, #148]	; (8002ab8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 0207 	bic.w	r2, r3, #7
 8002a28:	4923      	ldr	r1, [pc, #140]	; (8002ab8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a30:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e036      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d008      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <HAL_RCC_ClockConfig+0x1f0>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	4918      	ldr	r1, [pc, #96]	; (8002abc <HAL_RCC_ClockConfig+0x1f0>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d009      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <HAL_RCC_ClockConfig+0x1f0>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4910      	ldr	r1, [pc, #64]	; (8002abc <HAL_RCC_ClockConfig+0x1f0>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a80:	f000 f824 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <HAL_RCC_ClockConfig+0x1f0>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	091b      	lsrs	r3, r3, #4
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	490b      	ldr	r1, [pc, #44]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f4>)
 8002a92:	5ccb      	ldrb	r3, [r1, r3]
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9c:	4a09      	ldr	r2, [pc, #36]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002aa0:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <HAL_RCC_ClockConfig+0x1fc>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe f99f 	bl	8000de8 <HAL_InitTick>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	72fb      	strb	r3, [r7, #11]

  return status;
 8002aae:	7afb      	ldrb	r3, [r7, #11]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40022000 	.word	0x40022000
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	08005530 	.word	0x08005530
 8002ac4:	20000000 	.word	0x20000000
 8002ac8:	20000004 	.word	0x20000004

08002acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ada:	4b3e      	ldr	r3, [pc, #248]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ae4:	4b3b      	ldr	r3, [pc, #236]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x34>
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	2b0c      	cmp	r3, #12
 8002af8:	d121      	bne.n	8002b3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d11e      	bne.n	8002b3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b00:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b0c:	4b31      	ldr	r3, [pc, #196]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b12:	0a1b      	lsrs	r3, r3, #8
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	e005      	b.n	8002b28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b1c:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b28:	4a2b      	ldr	r2, [pc, #172]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10d      	bne.n	8002b54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d102      	bne.n	8002b4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b44:	4b25      	ldr	r3, [pc, #148]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x110>)
 8002b46:	61bb      	str	r3, [r7, #24]
 8002b48:	e004      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b50:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	2b0c      	cmp	r3, #12
 8002b58:	d134      	bne.n	8002bc4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b5a:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d003      	beq.n	8002b72 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d003      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0xac>
 8002b70:	e005      	b.n	8002b7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b72:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x110>)
 8002b74:	617b      	str	r3, [r7, #20]
      break;
 8002b76:	e005      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b78:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b7a:	617b      	str	r3, [r7, #20]
      break;
 8002b7c:	e002      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	617b      	str	r3, [r7, #20]
      break;
 8002b82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b84:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	3301      	adds	r3, #1
 8002b90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b92:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	fb03 f202 	mul.w	r2, r3, r2
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	0e5b      	lsrs	r3, r3, #25
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bc4:	69bb      	ldr	r3, [r7, #24]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3724      	adds	r7, #36	; 0x24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	08005548 	.word	0x08005548
 8002bdc:	00f42400 	.word	0x00f42400
 8002be0:	007a1200 	.word	0x007a1200

08002be4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000000 	.word	0x20000000

08002bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c00:	f7ff fff0 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	0a1b      	lsrs	r3, r3, #8
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	4904      	ldr	r1, [pc, #16]	; (8002c24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c12:	5ccb      	ldrb	r3, [r1, r3]
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40021000 	.word	0x40021000
 8002c24:	08005540 	.word	0x08005540

08002c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c2c:	f7ff ffda 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	0adb      	lsrs	r3, r3, #11
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	4904      	ldr	r1, [pc, #16]	; (8002c50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c3e:	5ccb      	ldrb	r3, [r1, r3]
 8002c40:	f003 031f 	and.w	r3, r3, #31
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	08005540 	.word	0x08005540

08002c54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c60:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c6c:	f7ff f9ee 	bl	800204c <HAL_PWREx_GetVoltageRange>
 8002c70:	6178      	str	r0, [r7, #20]
 8002c72:	e014      	b.n	8002c9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c74:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c78:	4a24      	ldr	r2, [pc, #144]	; (8002d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c80:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c8c:	f7ff f9de 	bl	800204c <HAL_PWREx_GetVoltageRange>
 8002c90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c92:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	4a1d      	ldr	r2, [pc, #116]	; (8002d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca4:	d10b      	bne.n	8002cbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b80      	cmp	r3, #128	; 0x80
 8002caa:	d919      	bls.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2ba0      	cmp	r3, #160	; 0xa0
 8002cb0:	d902      	bls.n	8002cb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	e013      	b.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cb8:	2301      	movs	r3, #1
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	e010      	b.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b80      	cmp	r3, #128	; 0x80
 8002cc2:	d902      	bls.n	8002cca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	e00a      	b.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b80      	cmp	r3, #128	; 0x80
 8002cce:	d102      	bne.n	8002cd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	e004      	b.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b70      	cmp	r3, #112	; 0x70
 8002cda:	d101      	bne.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cdc:	2301      	movs	r3, #1
 8002cde:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f023 0207 	bic.w	r2, r3, #7
 8002ce8:	4909      	ldr	r1, [pc, #36]	; (8002d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cf0:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d001      	beq.n	8002d02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40022000 	.word	0x40022000

08002d14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d20:	2300      	movs	r3, #0
 8002d22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d041      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d38:	d02a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d3e:	d824      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d44:	d008      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d4a:	d81e      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d54:	d010      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d56:	e018      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d58:	4b86      	ldr	r3, [pc, #536]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	4a85      	ldr	r2, [pc, #532]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d64:	e015      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fabb 	bl	80032e8 <RCCEx_PLLSAI1_Config>
 8002d72:	4603      	mov	r3, r0
 8002d74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d76:	e00c      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3320      	adds	r3, #32
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fba6 	bl	80034d0 <RCCEx_PLLSAI2_Config>
 8002d84:	4603      	mov	r3, r0
 8002d86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d88:	e003      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	74fb      	strb	r3, [r7, #19]
      break;
 8002d8e:	e000      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d92:	7cfb      	ldrb	r3, [r7, #19]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10b      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d98:	4b76      	ldr	r3, [pc, #472]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002da6:	4973      	ldr	r1, [pc, #460]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dae:	e001      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db0:	7cfb      	ldrb	r3, [r7, #19]
 8002db2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d041      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002dc8:	d02a      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002dca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002dce:	d824      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002dd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dd4:	d008      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002dd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dda:	d81e      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002de4:	d010      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002de6:	e018      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002de8:	4b62      	ldr	r3, [pc, #392]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4a61      	ldr	r2, [pc, #388]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002df4:	e015      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fa73 	bl	80032e8 <RCCEx_PLLSAI1_Config>
 8002e02:	4603      	mov	r3, r0
 8002e04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e06:	e00c      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3320      	adds	r3, #32
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fb5e 	bl	80034d0 <RCCEx_PLLSAI2_Config>
 8002e14:	4603      	mov	r3, r0
 8002e16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e18:	e003      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	74fb      	strb	r3, [r7, #19]
      break;
 8002e1e:	e000      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e22:	7cfb      	ldrb	r3, [r7, #19]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10b      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e28:	4b52      	ldr	r3, [pc, #328]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e36:	494f      	ldr	r1, [pc, #316]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e3e:	e001      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e40:	7cfb      	ldrb	r3, [r7, #19]
 8002e42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 80a0 	beq.w	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e52:	2300      	movs	r3, #0
 8002e54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e56:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e66:	2300      	movs	r3, #0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00d      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e6c:	4b41      	ldr	r3, [pc, #260]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	4a40      	ldr	r2, [pc, #256]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e76:	6593      	str	r3, [r2, #88]	; 0x58
 8002e78:	4b3e      	ldr	r3, [pc, #248]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e84:	2301      	movs	r3, #1
 8002e86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e88:	4b3b      	ldr	r3, [pc, #236]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a3a      	ldr	r2, [pc, #232]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e94:	f7fd fff8 	bl	8000e88 <HAL_GetTick>
 8002e98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e9a:	e009      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9c:	f7fd fff4 	bl	8000e88 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d902      	bls.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	74fb      	strb	r3, [r7, #19]
        break;
 8002eae:	e005      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002eb0:	4b31      	ldr	r3, [pc, #196]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0ef      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ebc:	7cfb      	ldrb	r3, [r7, #19]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d15c      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ec2:	4b2c      	ldr	r3, [pc, #176]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ecc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d01f      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d019      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ee0:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002eec:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef2:	4a20      	ldr	r2, [pc, #128]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002efc:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f0c:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d016      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1e:	f7fd ffb3 	bl	8000e88 <HAL_GetTick>
 8002f22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f24:	e00b      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7fd ffaf 	bl	8000e88 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d902      	bls.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	74fb      	strb	r3, [r7, #19]
            break;
 8002f3c:	e006      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0ec      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f4c:	7cfb      	ldrb	r3, [r7, #19]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f62:	4904      	ldr	r1, [pc, #16]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f6a:	e009      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f6c:	7cfb      	ldrb	r3, [r7, #19]
 8002f6e:	74bb      	strb	r3, [r7, #18]
 8002f70:	e006      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f7c:	7cfb      	ldrb	r3, [r7, #19]
 8002f7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f80:	7c7b      	ldrb	r3, [r7, #17]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d105      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f86:	4b9e      	ldr	r3, [pc, #632]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8a:	4a9d      	ldr	r2, [pc, #628]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f9e:	4b98      	ldr	r3, [pc, #608]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa4:	f023 0203 	bic.w	r2, r3, #3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	4994      	ldr	r1, [pc, #592]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fc0:	4b8f      	ldr	r3, [pc, #572]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc6:	f023 020c 	bic.w	r2, r3, #12
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fce:	498c      	ldr	r1, [pc, #560]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fe2:	4b87      	ldr	r3, [pc, #540]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	4983      	ldr	r1, [pc, #524]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003004:	4b7e      	ldr	r3, [pc, #504]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	497b      	ldr	r1, [pc, #492]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003026:	4b76      	ldr	r3, [pc, #472]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003034:	4972      	ldr	r1, [pc, #456]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003048:	4b6d      	ldr	r3, [pc, #436]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003056:	496a      	ldr	r1, [pc, #424]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800306a:	4b65      	ldr	r3, [pc, #404]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003070:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003078:	4961      	ldr	r1, [pc, #388]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800308c:	4b5c      	ldr	r3, [pc, #368]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800309a:	4959      	ldr	r1, [pc, #356]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030ae:	4b54      	ldr	r3, [pc, #336]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030bc:	4950      	ldr	r1, [pc, #320]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030d0:	4b4b      	ldr	r3, [pc, #300]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	4948      	ldr	r1, [pc, #288]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030f2:	4b43      	ldr	r3, [pc, #268]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	493f      	ldr	r1, [pc, #252]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d028      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003114:	4b3a      	ldr	r3, [pc, #232]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003122:	4937      	ldr	r1, [pc, #220]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800312e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003132:	d106      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003134:	4b32      	ldr	r3, [pc, #200]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4a31      	ldr	r2, [pc, #196]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800313e:	60d3      	str	r3, [r2, #12]
 8003140:	e011      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800314a:	d10c      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3304      	adds	r3, #4
 8003150:	2101      	movs	r1, #1
 8003152:	4618      	mov	r0, r3
 8003154:	f000 f8c8 	bl	80032e8 <RCCEx_PLLSAI1_Config>
 8003158:	4603      	mov	r3, r0
 800315a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800315c:	7cfb      	ldrb	r3, [r7, #19]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003162:	7cfb      	ldrb	r3, [r7, #19]
 8003164:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d028      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003172:	4b23      	ldr	r3, [pc, #140]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003178:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003180:	491f      	ldr	r1, [pc, #124]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003190:	d106      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003192:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800319c:	60d3      	str	r3, [r2, #12]
 800319e:	e011      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2101      	movs	r1, #1
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 f899 	bl	80032e8 <RCCEx_PLLSAI1_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ba:	7cfb      	ldrb	r3, [r7, #19]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d02b      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031de:	4908      	ldr	r1, [pc, #32]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ee:	d109      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4a02      	ldr	r2, [pc, #8]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031fa:	60d3      	str	r3, [r2, #12]
 80031fc:	e014      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003208:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800320c:	d10c      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	2101      	movs	r1, #1
 8003214:	4618      	mov	r0, r3
 8003216:	f000 f867 	bl	80032e8 <RCCEx_PLLSAI1_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800321e:	7cfb      	ldrb	r3, [r7, #19]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003224:	7cfb      	ldrb	r3, [r7, #19]
 8003226:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d02f      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003242:	4928      	ldr	r1, [pc, #160]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800324e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003252:	d10d      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3304      	adds	r3, #4
 8003258:	2102      	movs	r1, #2
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f844 	bl	80032e8 <RCCEx_PLLSAI1_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003264:	7cfb      	ldrb	r3, [r7, #19]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d014      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800326a:	7cfb      	ldrb	r3, [r7, #19]
 800326c:	74bb      	strb	r3, [r7, #18]
 800326e:	e011      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003278:	d10c      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3320      	adds	r3, #32
 800327e:	2102      	movs	r1, #2
 8003280:	4618      	mov	r0, r3
 8003282:	f000 f925 	bl	80034d0 <RCCEx_PLLSAI2_Config>
 8003286:	4603      	mov	r3, r0
 8003288:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800328a:	7cfb      	ldrb	r3, [r7, #19]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032a0:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ae:	490d      	ldr	r1, [pc, #52]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032d2:	4904      	ldr	r1, [pc, #16]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032da:	7cbb      	ldrb	r3, [r7, #18]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000

080032e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032f6:	4b75      	ldr	r3, [pc, #468]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d018      	beq.n	8003334 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003302:	4b72      	ldr	r3, [pc, #456]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f003 0203 	and.w	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d10d      	bne.n	800332e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
       ||
 8003316:	2b00      	cmp	r3, #0
 8003318:	d009      	beq.n	800332e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800331a:	4b6c      	ldr	r3, [pc, #432]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
       ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d047      	beq.n	80033be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
 8003332:	e044      	b.n	80033be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d018      	beq.n	800336e <RCCEx_PLLSAI1_Config+0x86>
 800333c:	2b03      	cmp	r3, #3
 800333e:	d825      	bhi.n	800338c <RCCEx_PLLSAI1_Config+0xa4>
 8003340:	2b01      	cmp	r3, #1
 8003342:	d002      	beq.n	800334a <RCCEx_PLLSAI1_Config+0x62>
 8003344:	2b02      	cmp	r3, #2
 8003346:	d009      	beq.n	800335c <RCCEx_PLLSAI1_Config+0x74>
 8003348:	e020      	b.n	800338c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800334a:	4b60      	ldr	r3, [pc, #384]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d11d      	bne.n	8003392 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800335a:	e01a      	b.n	8003392 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800335c:	4b5b      	ldr	r3, [pc, #364]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003364:	2b00      	cmp	r3, #0
 8003366:	d116      	bne.n	8003396 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800336c:	e013      	b.n	8003396 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800336e:	4b57      	ldr	r3, [pc, #348]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10f      	bne.n	800339a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800337a:	4b54      	ldr	r3, [pc, #336]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d109      	bne.n	800339a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800338a:	e006      	b.n	800339a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
      break;
 8003390:	e004      	b.n	800339c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003392:	bf00      	nop
 8003394:	e002      	b.n	800339c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003396:	bf00      	nop
 8003398:	e000      	b.n	800339c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800339a:	bf00      	nop
    }

    if(status == HAL_OK)
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10d      	bne.n	80033be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033a2:	4b4a      	ldr	r3, [pc, #296]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6819      	ldr	r1, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	430b      	orrs	r3, r1
 80033b8:	4944      	ldr	r1, [pc, #272]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d17d      	bne.n	80034c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033c4:	4b41      	ldr	r3, [pc, #260]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a40      	ldr	r2, [pc, #256]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d0:	f7fd fd5a 	bl	8000e88 <HAL_GetTick>
 80033d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033d6:	e009      	b.n	80033ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033d8:	f7fd fd56 	bl	8000e88 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d902      	bls.n	80033ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	73fb      	strb	r3, [r7, #15]
        break;
 80033ea:	e005      	b.n	80033f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033ec:	4b37      	ldr	r3, [pc, #220]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1ef      	bne.n	80033d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d160      	bne.n	80034c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d111      	bne.n	8003428 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003404:	4b31      	ldr	r3, [pc, #196]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800340c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6892      	ldr	r2, [r2, #8]
 8003414:	0211      	lsls	r1, r2, #8
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68d2      	ldr	r2, [r2, #12]
 800341a:	0912      	lsrs	r2, r2, #4
 800341c:	0452      	lsls	r2, r2, #17
 800341e:	430a      	orrs	r2, r1
 8003420:	492a      	ldr	r1, [pc, #168]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003422:	4313      	orrs	r3, r2
 8003424:	610b      	str	r3, [r1, #16]
 8003426:	e027      	b.n	8003478 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d112      	bne.n	8003454 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800342e:	4b27      	ldr	r3, [pc, #156]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003436:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6892      	ldr	r2, [r2, #8]
 800343e:	0211      	lsls	r1, r2, #8
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6912      	ldr	r2, [r2, #16]
 8003444:	0852      	lsrs	r2, r2, #1
 8003446:	3a01      	subs	r2, #1
 8003448:	0552      	lsls	r2, r2, #21
 800344a:	430a      	orrs	r2, r1
 800344c:	491f      	ldr	r1, [pc, #124]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800344e:	4313      	orrs	r3, r2
 8003450:	610b      	str	r3, [r1, #16]
 8003452:	e011      	b.n	8003478 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003454:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800345c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6892      	ldr	r2, [r2, #8]
 8003464:	0211      	lsls	r1, r2, #8
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6952      	ldr	r2, [r2, #20]
 800346a:	0852      	lsrs	r2, r2, #1
 800346c:	3a01      	subs	r2, #1
 800346e:	0652      	lsls	r2, r2, #25
 8003470:	430a      	orrs	r2, r1
 8003472:	4916      	ldr	r1, [pc, #88]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003474:	4313      	orrs	r3, r2
 8003476:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003478:	4b14      	ldr	r3, [pc, #80]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a13      	ldr	r2, [pc, #76]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800347e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003482:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7fd fd00 	bl	8000e88 <HAL_GetTick>
 8003488:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800348a:	e009      	b.n	80034a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800348c:	f7fd fcfc 	bl	8000e88 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d902      	bls.n	80034a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	73fb      	strb	r3, [r7, #15]
          break;
 800349e:	e005      	b.n	80034ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034a0:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0ef      	beq.n	800348c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	4904      	ldr	r1, [pc, #16]	; (80034cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40021000 	.word	0x40021000

080034d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034de:	4b6a      	ldr	r3, [pc, #424]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d018      	beq.n	800351c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034ea:	4b67      	ldr	r3, [pc, #412]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f003 0203 	and.w	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d10d      	bne.n	8003516 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
       ||
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003502:	4b61      	ldr	r3, [pc, #388]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
       ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d047      	beq.n	80035a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
 800351a:	e044      	b.n	80035a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d018      	beq.n	8003556 <RCCEx_PLLSAI2_Config+0x86>
 8003524:	2b03      	cmp	r3, #3
 8003526:	d825      	bhi.n	8003574 <RCCEx_PLLSAI2_Config+0xa4>
 8003528:	2b01      	cmp	r3, #1
 800352a:	d002      	beq.n	8003532 <RCCEx_PLLSAI2_Config+0x62>
 800352c:	2b02      	cmp	r3, #2
 800352e:	d009      	beq.n	8003544 <RCCEx_PLLSAI2_Config+0x74>
 8003530:	e020      	b.n	8003574 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003532:	4b55      	ldr	r3, [pc, #340]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d11d      	bne.n	800357a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003542:	e01a      	b.n	800357a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003544:	4b50      	ldr	r3, [pc, #320]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354c:	2b00      	cmp	r3, #0
 800354e:	d116      	bne.n	800357e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003554:	e013      	b.n	800357e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003556:	4b4c      	ldr	r3, [pc, #304]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10f      	bne.n	8003582 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003562:	4b49      	ldr	r3, [pc, #292]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003572:	e006      	b.n	8003582 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
      break;
 8003578:	e004      	b.n	8003584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800357a:	bf00      	nop
 800357c:	e002      	b.n	8003584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800357e:	bf00      	nop
 8003580:	e000      	b.n	8003584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003582:	bf00      	nop
    }

    if(status == HAL_OK)
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10d      	bne.n	80035a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800358a:	4b3f      	ldr	r3, [pc, #252]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6819      	ldr	r1, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	430b      	orrs	r3, r1
 80035a0:	4939      	ldr	r1, [pc, #228]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d167      	bne.n	800367c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035ac:	4b36      	ldr	r3, [pc, #216]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a35      	ldr	r2, [pc, #212]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b8:	f7fd fc66 	bl	8000e88 <HAL_GetTick>
 80035bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035be:	e009      	b.n	80035d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035c0:	f7fd fc62 	bl	8000e88 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d902      	bls.n	80035d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	73fb      	strb	r3, [r7, #15]
        break;
 80035d2:	e005      	b.n	80035e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035d4:	4b2c      	ldr	r3, [pc, #176]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1ef      	bne.n	80035c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d14a      	bne.n	800367c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d111      	bne.n	8003610 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035ec:	4b26      	ldr	r3, [pc, #152]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6892      	ldr	r2, [r2, #8]
 80035fc:	0211      	lsls	r1, r2, #8
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68d2      	ldr	r2, [r2, #12]
 8003602:	0912      	lsrs	r2, r2, #4
 8003604:	0452      	lsls	r2, r2, #17
 8003606:	430a      	orrs	r2, r1
 8003608:	491f      	ldr	r1, [pc, #124]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800360a:	4313      	orrs	r3, r2
 800360c:	614b      	str	r3, [r1, #20]
 800360e:	e011      	b.n	8003634 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003610:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003618:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6892      	ldr	r2, [r2, #8]
 8003620:	0211      	lsls	r1, r2, #8
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6912      	ldr	r2, [r2, #16]
 8003626:	0852      	lsrs	r2, r2, #1
 8003628:	3a01      	subs	r2, #1
 800362a:	0652      	lsls	r2, r2, #25
 800362c:	430a      	orrs	r2, r1
 800362e:	4916      	ldr	r1, [pc, #88]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003630:	4313      	orrs	r3, r2
 8003632:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003634:	4b14      	ldr	r3, [pc, #80]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a13      	ldr	r2, [pc, #76]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800363a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003640:	f7fd fc22 	bl	8000e88 <HAL_GetTick>
 8003644:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003646:	e009      	b.n	800365c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003648:	f7fd fc1e 	bl	8000e88 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d902      	bls.n	800365c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	73fb      	strb	r3, [r7, #15]
          break;
 800365a:	e005      	b.n	8003668 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ef      	beq.n	8003648 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003670:	695a      	ldr	r2, [r3, #20]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	4904      	ldr	r1, [pc, #16]	; (8003688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003678:	4313      	orrs	r3, r2
 800367a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000

0800368c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e049      	b.n	8003732 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd fa9c 	bl	8000bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	4619      	mov	r1, r3
 80036ca:	4610      	mov	r0, r2
 80036cc:	f000 f96a 	bl	80039a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d020      	beq.n	800379e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d01b      	beq.n	800379e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f06f 0202 	mvn.w	r2, #2
 800376e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f8ee 	bl	8003966 <HAL_TIM_IC_CaptureCallback>
 800378a:	e005      	b.n	8003798 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f8e0 	bl	8003952 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f8f1 	bl	800397a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d020      	beq.n	80037ea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d01b      	beq.n	80037ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f06f 0204 	mvn.w	r2, #4
 80037ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f8c8 	bl	8003966 <HAL_TIM_IC_CaptureCallback>
 80037d6:	e005      	b.n	80037e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f8ba 	bl	8003952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f8cb 	bl	800397a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d020      	beq.n	8003836 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01b      	beq.n	8003836 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f06f 0208 	mvn.w	r2, #8
 8003806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2204      	movs	r2, #4
 800380c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	f003 0303 	and.w	r3, r3, #3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f8a2 	bl	8003966 <HAL_TIM_IC_CaptureCallback>
 8003822:	e005      	b.n	8003830 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f894 	bl	8003952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f8a5 	bl	800397a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b00      	cmp	r3, #0
 800383e:	d020      	beq.n	8003882 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 0310 	and.w	r3, r3, #16
 8003846:	2b00      	cmp	r3, #0
 8003848:	d01b      	beq.n	8003882 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f06f 0210 	mvn.w	r2, #16
 8003852:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2208      	movs	r2, #8
 8003858:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f87c 	bl	8003966 <HAL_TIM_IC_CaptureCallback>
 800386e:	e005      	b.n	800387c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f86e 	bl	8003952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f87f 	bl	800397a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00c      	beq.n	80038a6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f06f 0201 	mvn.w	r2, #1
 800389e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f84c 	bl	800393e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00c      	beq.n	80038ca <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d007      	beq.n	80038ca <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f911 	bl	8003aec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00c      	beq.n	80038ee <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f909 	bl	8003b00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00c      	beq.n	8003912 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d007      	beq.n	8003912 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800390a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f83e 	bl	800398e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00c      	beq.n	8003936 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f06f 0220 	mvn.w	r2, #32
 800392e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f8d1 	bl	8003ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003936:	bf00      	nop
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a40      	ldr	r2, [pc, #256]	; (8003ab8 <TIM_Base_SetConfig+0x114>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d013      	beq.n	80039e4 <TIM_Base_SetConfig+0x40>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c2:	d00f      	beq.n	80039e4 <TIM_Base_SetConfig+0x40>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a3d      	ldr	r2, [pc, #244]	; (8003abc <TIM_Base_SetConfig+0x118>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00b      	beq.n	80039e4 <TIM_Base_SetConfig+0x40>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a3c      	ldr	r2, [pc, #240]	; (8003ac0 <TIM_Base_SetConfig+0x11c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d007      	beq.n	80039e4 <TIM_Base_SetConfig+0x40>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a3b      	ldr	r2, [pc, #236]	; (8003ac4 <TIM_Base_SetConfig+0x120>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d003      	beq.n	80039e4 <TIM_Base_SetConfig+0x40>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a3a      	ldr	r2, [pc, #232]	; (8003ac8 <TIM_Base_SetConfig+0x124>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d108      	bne.n	80039f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a2f      	ldr	r2, [pc, #188]	; (8003ab8 <TIM_Base_SetConfig+0x114>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01f      	beq.n	8003a3e <TIM_Base_SetConfig+0x9a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a04:	d01b      	beq.n	8003a3e <TIM_Base_SetConfig+0x9a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a2c      	ldr	r2, [pc, #176]	; (8003abc <TIM_Base_SetConfig+0x118>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d017      	beq.n	8003a3e <TIM_Base_SetConfig+0x9a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a2b      	ldr	r2, [pc, #172]	; (8003ac0 <TIM_Base_SetConfig+0x11c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d013      	beq.n	8003a3e <TIM_Base_SetConfig+0x9a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a2a      	ldr	r2, [pc, #168]	; (8003ac4 <TIM_Base_SetConfig+0x120>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00f      	beq.n	8003a3e <TIM_Base_SetConfig+0x9a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a29      	ldr	r2, [pc, #164]	; (8003ac8 <TIM_Base_SetConfig+0x124>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00b      	beq.n	8003a3e <TIM_Base_SetConfig+0x9a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a28      	ldr	r2, [pc, #160]	; (8003acc <TIM_Base_SetConfig+0x128>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d007      	beq.n	8003a3e <TIM_Base_SetConfig+0x9a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a27      	ldr	r2, [pc, #156]	; (8003ad0 <TIM_Base_SetConfig+0x12c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d003      	beq.n	8003a3e <TIM_Base_SetConfig+0x9a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a26      	ldr	r2, [pc, #152]	; (8003ad4 <TIM_Base_SetConfig+0x130>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d108      	bne.n	8003a50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a10      	ldr	r2, [pc, #64]	; (8003ab8 <TIM_Base_SetConfig+0x114>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00f      	beq.n	8003a9c <TIM_Base_SetConfig+0xf8>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a12      	ldr	r2, [pc, #72]	; (8003ac8 <TIM_Base_SetConfig+0x124>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00b      	beq.n	8003a9c <TIM_Base_SetConfig+0xf8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a11      	ldr	r2, [pc, #68]	; (8003acc <TIM_Base_SetConfig+0x128>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d007      	beq.n	8003a9c <TIM_Base_SetConfig+0xf8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a10      	ldr	r2, [pc, #64]	; (8003ad0 <TIM_Base_SetConfig+0x12c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d003      	beq.n	8003a9c <TIM_Base_SetConfig+0xf8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a0f      	ldr	r2, [pc, #60]	; (8003ad4 <TIM_Base_SetConfig+0x130>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d103      	bne.n	8003aa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	615a      	str	r2, [r3, #20]
}
 8003aaa:	bf00      	nop
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40012c00 	.word	0x40012c00
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800
 8003ac4:	40000c00 	.word	0x40000c00
 8003ac8:	40013400 	.word	0x40013400
 8003acc:	40014000 	.word	0x40014000
 8003ad0:	40014400 	.word	0x40014400
 8003ad4:	40014800 	.word	0x40014800

08003ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e040      	b.n	8003ba8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fd f8b0 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2224      	movs	r2, #36	; 0x24
 8003b40:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0201 	bic.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fb6a 	bl	8004234 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f8af 	bl	8003cc4 <UART_SetConfig>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e01b      	b.n	8003ba8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fbe9 	bl	8004378 <UART_CheckIdleState>
 8003ba6:	4603      	mov	r3, r0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08a      	sub	sp, #40	; 0x28
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc4:	2b20      	cmp	r3, #32
 8003bc6:	d178      	bne.n	8003cba <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_UART_Transmit+0x24>
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e071      	b.n	8003cbc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2221      	movs	r2, #33	; 0x21
 8003be4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003be6:	f7fd f94f 	bl	8000e88 <HAL_GetTick>
 8003bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	88fa      	ldrh	r2, [r7, #6]
 8003bf0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	88fa      	ldrh	r2, [r7, #6]
 8003bf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c04:	d108      	bne.n	8003c18 <HAL_UART_Transmit+0x68>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d104      	bne.n	8003c18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	e003      	b.n	8003c20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c20:	e030      	b.n	8003c84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2180      	movs	r1, #128	; 0x80
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 fc4b 	bl	80044c8 <UART_WaitOnFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d004      	beq.n	8003c42 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e03c      	b.n	8003cbc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10b      	bne.n	8003c60 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	881a      	ldrh	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c54:	b292      	uxth	r2, r2
 8003c56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	3302      	adds	r3, #2
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	e008      	b.n	8003c72 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	781a      	ldrb	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	b292      	uxth	r2, r2
 8003c6a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1c8      	bne.n	8003c22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2200      	movs	r2, #0
 8003c98:	2140      	movs	r1, #64	; 0x40
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fc14 	bl	80044c8 <UART_WaitOnFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d004      	beq.n	8003cb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e005      	b.n	8003cbc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	e000      	b.n	8003cbc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003cba:	2302      	movs	r3, #2
  }
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3720      	adds	r7, #32
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc8:	b08a      	sub	sp, #40	; 0x28
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4ba4      	ldr	r3, [pc, #656]	; (8003f84 <UART_SetConfig+0x2c0>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a99      	ldr	r2, [pc, #612]	; (8003f88 <UART_SetConfig+0x2c4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d004      	beq.n	8003d30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d40:	430a      	orrs	r2, r1
 8003d42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a90      	ldr	r2, [pc, #576]	; (8003f8c <UART_SetConfig+0x2c8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d126      	bne.n	8003d9c <UART_SetConfig+0xd8>
 8003d4e:	4b90      	ldr	r3, [pc, #576]	; (8003f90 <UART_SetConfig+0x2cc>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d81b      	bhi.n	8003d94 <UART_SetConfig+0xd0>
 8003d5c:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <UART_SetConfig+0xa0>)
 8003d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d62:	bf00      	nop
 8003d64:	08003d75 	.word	0x08003d75
 8003d68:	08003d85 	.word	0x08003d85
 8003d6c:	08003d7d 	.word	0x08003d7d
 8003d70:	08003d8d 	.word	0x08003d8d
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7a:	e116      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d82:	e112      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003d84:	2304      	movs	r3, #4
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8a:	e10e      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d92:	e10a      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003d94:	2310      	movs	r3, #16
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9a:	e106      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a7c      	ldr	r2, [pc, #496]	; (8003f94 <UART_SetConfig+0x2d0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d138      	bne.n	8003e18 <UART_SetConfig+0x154>
 8003da6:	4b7a      	ldr	r3, [pc, #488]	; (8003f90 <UART_SetConfig+0x2cc>)
 8003da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b0c      	cmp	r3, #12
 8003db2:	d82d      	bhi.n	8003e10 <UART_SetConfig+0x14c>
 8003db4:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <UART_SetConfig+0xf8>)
 8003db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dba:	bf00      	nop
 8003dbc:	08003df1 	.word	0x08003df1
 8003dc0:	08003e11 	.word	0x08003e11
 8003dc4:	08003e11 	.word	0x08003e11
 8003dc8:	08003e11 	.word	0x08003e11
 8003dcc:	08003e01 	.word	0x08003e01
 8003dd0:	08003e11 	.word	0x08003e11
 8003dd4:	08003e11 	.word	0x08003e11
 8003dd8:	08003e11 	.word	0x08003e11
 8003ddc:	08003df9 	.word	0x08003df9
 8003de0:	08003e11 	.word	0x08003e11
 8003de4:	08003e11 	.word	0x08003e11
 8003de8:	08003e11 	.word	0x08003e11
 8003dec:	08003e09 	.word	0x08003e09
 8003df0:	2300      	movs	r3, #0
 8003df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df6:	e0d8      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dfe:	e0d4      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003e00:	2304      	movs	r3, #4
 8003e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e06:	e0d0      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003e08:	2308      	movs	r3, #8
 8003e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e0e:	e0cc      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003e10:	2310      	movs	r3, #16
 8003e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e16:	e0c8      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a5e      	ldr	r2, [pc, #376]	; (8003f98 <UART_SetConfig+0x2d4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d125      	bne.n	8003e6e <UART_SetConfig+0x1aa>
 8003e22:	4b5b      	ldr	r3, [pc, #364]	; (8003f90 <UART_SetConfig+0x2cc>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e2c:	2b30      	cmp	r3, #48	; 0x30
 8003e2e:	d016      	beq.n	8003e5e <UART_SetConfig+0x19a>
 8003e30:	2b30      	cmp	r3, #48	; 0x30
 8003e32:	d818      	bhi.n	8003e66 <UART_SetConfig+0x1a2>
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d00a      	beq.n	8003e4e <UART_SetConfig+0x18a>
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d814      	bhi.n	8003e66 <UART_SetConfig+0x1a2>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <UART_SetConfig+0x182>
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d008      	beq.n	8003e56 <UART_SetConfig+0x192>
 8003e44:	e00f      	b.n	8003e66 <UART_SetConfig+0x1a2>
 8003e46:	2300      	movs	r3, #0
 8003e48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e4c:	e0ad      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e54:	e0a9      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003e56:	2304      	movs	r3, #4
 8003e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e5c:	e0a5      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003e5e:	2308      	movs	r3, #8
 8003e60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e64:	e0a1      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003e66:	2310      	movs	r3, #16
 8003e68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e6c:	e09d      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a4a      	ldr	r2, [pc, #296]	; (8003f9c <UART_SetConfig+0x2d8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d125      	bne.n	8003ec4 <UART_SetConfig+0x200>
 8003e78:	4b45      	ldr	r3, [pc, #276]	; (8003f90 <UART_SetConfig+0x2cc>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e82:	2bc0      	cmp	r3, #192	; 0xc0
 8003e84:	d016      	beq.n	8003eb4 <UART_SetConfig+0x1f0>
 8003e86:	2bc0      	cmp	r3, #192	; 0xc0
 8003e88:	d818      	bhi.n	8003ebc <UART_SetConfig+0x1f8>
 8003e8a:	2b80      	cmp	r3, #128	; 0x80
 8003e8c:	d00a      	beq.n	8003ea4 <UART_SetConfig+0x1e0>
 8003e8e:	2b80      	cmp	r3, #128	; 0x80
 8003e90:	d814      	bhi.n	8003ebc <UART_SetConfig+0x1f8>
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <UART_SetConfig+0x1d8>
 8003e96:	2b40      	cmp	r3, #64	; 0x40
 8003e98:	d008      	beq.n	8003eac <UART_SetConfig+0x1e8>
 8003e9a:	e00f      	b.n	8003ebc <UART_SetConfig+0x1f8>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea2:	e082      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eaa:	e07e      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003eac:	2304      	movs	r3, #4
 8003eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eb2:	e07a      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eba:	e076      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec2:	e072      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a35      	ldr	r2, [pc, #212]	; (8003fa0 <UART_SetConfig+0x2dc>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d12a      	bne.n	8003f24 <UART_SetConfig+0x260>
 8003ece:	4b30      	ldr	r3, [pc, #192]	; (8003f90 <UART_SetConfig+0x2cc>)
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003edc:	d01a      	beq.n	8003f14 <UART_SetConfig+0x250>
 8003ede:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ee2:	d81b      	bhi.n	8003f1c <UART_SetConfig+0x258>
 8003ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee8:	d00c      	beq.n	8003f04 <UART_SetConfig+0x240>
 8003eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eee:	d815      	bhi.n	8003f1c <UART_SetConfig+0x258>
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <UART_SetConfig+0x238>
 8003ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef8:	d008      	beq.n	8003f0c <UART_SetConfig+0x248>
 8003efa:	e00f      	b.n	8003f1c <UART_SetConfig+0x258>
 8003efc:	2300      	movs	r3, #0
 8003efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f02:	e052      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003f04:	2302      	movs	r3, #2
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f0a:	e04e      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f12:	e04a      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003f14:	2308      	movs	r3, #8
 8003f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f1a:	e046      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f22:	e042      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a17      	ldr	r2, [pc, #92]	; (8003f88 <UART_SetConfig+0x2c4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d13a      	bne.n	8003fa4 <UART_SetConfig+0x2e0>
 8003f2e:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <UART_SetConfig+0x2cc>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f3c:	d01a      	beq.n	8003f74 <UART_SetConfig+0x2b0>
 8003f3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f42:	d81b      	bhi.n	8003f7c <UART_SetConfig+0x2b8>
 8003f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f48:	d00c      	beq.n	8003f64 <UART_SetConfig+0x2a0>
 8003f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f4e:	d815      	bhi.n	8003f7c <UART_SetConfig+0x2b8>
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <UART_SetConfig+0x298>
 8003f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f58:	d008      	beq.n	8003f6c <UART_SetConfig+0x2a8>
 8003f5a:	e00f      	b.n	8003f7c <UART_SetConfig+0x2b8>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f62:	e022      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003f64:	2302      	movs	r3, #2
 8003f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f6a:	e01e      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f72:	e01a      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003f74:	2308      	movs	r3, #8
 8003f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f7a:	e016      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003f7c:	2310      	movs	r3, #16
 8003f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f82:	e012      	b.n	8003faa <UART_SetConfig+0x2e6>
 8003f84:	efff69f3 	.word	0xefff69f3
 8003f88:	40008000 	.word	0x40008000
 8003f8c:	40013800 	.word	0x40013800
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40004400 	.word	0x40004400
 8003f98:	40004800 	.word	0x40004800
 8003f9c:	40004c00 	.word	0x40004c00
 8003fa0:	40005000 	.word	0x40005000
 8003fa4:	2310      	movs	r3, #16
 8003fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a9f      	ldr	r2, [pc, #636]	; (800422c <UART_SetConfig+0x568>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d17a      	bne.n	80040aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d824      	bhi.n	8004006 <UART_SetConfig+0x342>
 8003fbc:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <UART_SetConfig+0x300>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08003fe9 	.word	0x08003fe9
 8003fc8:	08004007 	.word	0x08004007
 8003fcc:	08003ff1 	.word	0x08003ff1
 8003fd0:	08004007 	.word	0x08004007
 8003fd4:	08003ff7 	.word	0x08003ff7
 8003fd8:	08004007 	.word	0x08004007
 8003fdc:	08004007 	.word	0x08004007
 8003fe0:	08004007 	.word	0x08004007
 8003fe4:	08003fff 	.word	0x08003fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe8:	f7fe fe08 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 8003fec:	61f8      	str	r0, [r7, #28]
        break;
 8003fee:	e010      	b.n	8004012 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff0:	4b8f      	ldr	r3, [pc, #572]	; (8004230 <UART_SetConfig+0x56c>)
 8003ff2:	61fb      	str	r3, [r7, #28]
        break;
 8003ff4:	e00d      	b.n	8004012 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff6:	f7fe fd69 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 8003ffa:	61f8      	str	r0, [r7, #28]
        break;
 8003ffc:	e009      	b.n	8004012 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004002:	61fb      	str	r3, [r7, #28]
        break;
 8004004:	e005      	b.n	8004012 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004010:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80fb 	beq.w	8004210 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	4413      	add	r3, r2
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	429a      	cmp	r2, r3
 8004028:	d305      	bcc.n	8004036 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004030:	69fa      	ldr	r2, [r7, #28]
 8004032:	429a      	cmp	r2, r3
 8004034:	d903      	bls.n	800403e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800403c:	e0e8      	b.n	8004210 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	2200      	movs	r2, #0
 8004042:	461c      	mov	r4, r3
 8004044:	4615      	mov	r5, r2
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	022b      	lsls	r3, r5, #8
 8004050:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004054:	0222      	lsls	r2, r4, #8
 8004056:	68f9      	ldr	r1, [r7, #12]
 8004058:	6849      	ldr	r1, [r1, #4]
 800405a:	0849      	lsrs	r1, r1, #1
 800405c:	2000      	movs	r0, #0
 800405e:	4688      	mov	r8, r1
 8004060:	4681      	mov	r9, r0
 8004062:	eb12 0a08 	adds.w	sl, r2, r8
 8004066:	eb43 0b09 	adc.w	fp, r3, r9
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	603b      	str	r3, [r7, #0]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004078:	4650      	mov	r0, sl
 800407a:	4659      	mov	r1, fp
 800407c:	f7fc f8f8 	bl	8000270 <__aeabi_uldivmod>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4613      	mov	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800408e:	d308      	bcc.n	80040a2 <UART_SetConfig+0x3de>
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004096:	d204      	bcs.n	80040a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	60da      	str	r2, [r3, #12]
 80040a0:	e0b6      	b.n	8004210 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040a8:	e0b2      	b.n	8004210 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b2:	d15e      	bne.n	8004172 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80040b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d828      	bhi.n	800410e <UART_SetConfig+0x44a>
 80040bc:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <UART_SetConfig+0x400>)
 80040be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c2:	bf00      	nop
 80040c4:	080040e9 	.word	0x080040e9
 80040c8:	080040f1 	.word	0x080040f1
 80040cc:	080040f9 	.word	0x080040f9
 80040d0:	0800410f 	.word	0x0800410f
 80040d4:	080040ff 	.word	0x080040ff
 80040d8:	0800410f 	.word	0x0800410f
 80040dc:	0800410f 	.word	0x0800410f
 80040e0:	0800410f 	.word	0x0800410f
 80040e4:	08004107 	.word	0x08004107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e8:	f7fe fd88 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 80040ec:	61f8      	str	r0, [r7, #28]
        break;
 80040ee:	e014      	b.n	800411a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040f0:	f7fe fd9a 	bl	8002c28 <HAL_RCC_GetPCLK2Freq>
 80040f4:	61f8      	str	r0, [r7, #28]
        break;
 80040f6:	e010      	b.n	800411a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f8:	4b4d      	ldr	r3, [pc, #308]	; (8004230 <UART_SetConfig+0x56c>)
 80040fa:	61fb      	str	r3, [r7, #28]
        break;
 80040fc:	e00d      	b.n	800411a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040fe:	f7fe fce5 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 8004102:	61f8      	str	r0, [r7, #28]
        break;
 8004104:	e009      	b.n	800411a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800410a:	61fb      	str	r3, [r7, #28]
        break;
 800410c:	e005      	b.n	800411a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004118:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d077      	beq.n	8004210 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	005a      	lsls	r2, r3, #1
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	085b      	lsrs	r3, r3, #1
 800412a:	441a      	add	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	fbb2 f3f3 	udiv	r3, r2, r3
 8004134:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	2b0f      	cmp	r3, #15
 800413a:	d916      	bls.n	800416a <UART_SetConfig+0x4a6>
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004142:	d212      	bcs.n	800416a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	b29b      	uxth	r3, r3
 8004148:	f023 030f 	bic.w	r3, r3, #15
 800414c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	085b      	lsrs	r3, r3, #1
 8004152:	b29b      	uxth	r3, r3
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	b29a      	uxth	r2, r3
 800415a:	8afb      	ldrh	r3, [r7, #22]
 800415c:	4313      	orrs	r3, r2
 800415e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	8afa      	ldrh	r2, [r7, #22]
 8004166:	60da      	str	r2, [r3, #12]
 8004168:	e052      	b.n	8004210 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004170:	e04e      	b.n	8004210 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004172:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004176:	2b08      	cmp	r3, #8
 8004178:	d827      	bhi.n	80041ca <UART_SetConfig+0x506>
 800417a:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <UART_SetConfig+0x4bc>)
 800417c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004180:	080041a5 	.word	0x080041a5
 8004184:	080041ad 	.word	0x080041ad
 8004188:	080041b5 	.word	0x080041b5
 800418c:	080041cb 	.word	0x080041cb
 8004190:	080041bb 	.word	0x080041bb
 8004194:	080041cb 	.word	0x080041cb
 8004198:	080041cb 	.word	0x080041cb
 800419c:	080041cb 	.word	0x080041cb
 80041a0:	080041c3 	.word	0x080041c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041a4:	f7fe fd2a 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 80041a8:	61f8      	str	r0, [r7, #28]
        break;
 80041aa:	e014      	b.n	80041d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041ac:	f7fe fd3c 	bl	8002c28 <HAL_RCC_GetPCLK2Freq>
 80041b0:	61f8      	str	r0, [r7, #28]
        break;
 80041b2:	e010      	b.n	80041d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041b4:	4b1e      	ldr	r3, [pc, #120]	; (8004230 <UART_SetConfig+0x56c>)
 80041b6:	61fb      	str	r3, [r7, #28]
        break;
 80041b8:	e00d      	b.n	80041d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ba:	f7fe fc87 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 80041be:	61f8      	str	r0, [r7, #28]
        break;
 80041c0:	e009      	b.n	80041d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c6:	61fb      	str	r3, [r7, #28]
        break;
 80041c8:	e005      	b.n	80041d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80041d4:	bf00      	nop
    }

    if (pclk != 0U)
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d019      	beq.n	8004210 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	085a      	lsrs	r2, r3, #1
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	441a      	add	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b0f      	cmp	r3, #15
 80041f4:	d909      	bls.n	800420a <UART_SetConfig+0x546>
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fc:	d205      	bcs.n	800420a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60da      	str	r2, [r3, #12]
 8004208:	e002      	b.n	8004210 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800421c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004220:	4618      	mov	r0, r3
 8004222:	3728      	adds	r7, #40	; 0x28
 8004224:	46bd      	mov	sp, r7
 8004226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800422a:	bf00      	nop
 800422c:	40008000 	.word	0x40008000
 8004230:	00f42400 	.word	0x00f42400

08004234 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d01a      	beq.n	800434a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004332:	d10a      	bne.n	800434a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	605a      	str	r2, [r3, #4]
  }
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b098      	sub	sp, #96	; 0x60
 800437c:	af02      	add	r7, sp, #8
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004388:	f7fc fd7e 	bl	8000e88 <HAL_GetTick>
 800438c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b08      	cmp	r3, #8
 800439a:	d12e      	bne.n	80043fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800439c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a4:	2200      	movs	r2, #0
 80043a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f88c 	bl	80044c8 <UART_WaitOnFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d021      	beq.n	80043fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043be:	e853 3f00 	ldrex	r3, [r3]
 80043c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ca:	653b      	str	r3, [r7, #80]	; 0x50
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d4:	647b      	str	r3, [r7, #68]	; 0x44
 80043d6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e6      	bne.n	80043b6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e062      	b.n	80044c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b04      	cmp	r3, #4
 8004406:	d149      	bne.n	800449c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004408:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004410:	2200      	movs	r2, #0
 8004412:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f856 	bl	80044c8 <UART_WaitOnFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d03c      	beq.n	800449c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	e853 3f00 	ldrex	r3, [r3]
 800442e:	623b      	str	r3, [r7, #32]
   return(result);
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004440:	633b      	str	r3, [r7, #48]	; 0x30
 8004442:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e6      	bne.n	8004422 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3308      	adds	r3, #8
 800445a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	e853 3f00 	ldrex	r3, [r3]
 8004462:	60fb      	str	r3, [r7, #12]
   return(result);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0301 	bic.w	r3, r3, #1
 800446a:	64bb      	str	r3, [r7, #72]	; 0x48
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3308      	adds	r3, #8
 8004472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004474:	61fa      	str	r2, [r7, #28]
 8004476:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	69b9      	ldr	r1, [r7, #24]
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	e841 2300 	strex	r3, r2, [r1]
 8004480:	617b      	str	r3, [r7, #20]
   return(result);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e5      	bne.n	8004454 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2220      	movs	r2, #32
 800448c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e011      	b.n	80044c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2220      	movs	r2, #32
 80044a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3758      	adds	r7, #88	; 0x58
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	4613      	mov	r3, r2
 80044d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d8:	e049      	b.n	800456e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e0:	d045      	beq.n	800456e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e2:	f7fc fcd1 	bl	8000e88 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d302      	bcc.n	80044f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e048      	b.n	800458e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	2b00      	cmp	r3, #0
 8004508:	d031      	beq.n	800456e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b08      	cmp	r3, #8
 8004516:	d110      	bne.n	800453a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2208      	movs	r2, #8
 800451e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f838 	bl	8004596 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2208      	movs	r2, #8
 800452a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e029      	b.n	800458e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004548:	d111      	bne.n	800456e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004552:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f81e 	bl	8004596 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2220      	movs	r2, #32
 800455e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e00f      	b.n	800458e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4013      	ands	r3, r2
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	429a      	cmp	r2, r3
 800457c:	bf0c      	ite	eq
 800457e:	2301      	moveq	r3, #1
 8004580:	2300      	movne	r3, #0
 8004582:	b2db      	uxtb	r3, r3
 8004584:	461a      	mov	r2, r3
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	429a      	cmp	r2, r3
 800458a:	d0a6      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004596:	b480      	push	{r7}
 8004598:	b095      	sub	sp, #84	; 0x54
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045bc:	643b      	str	r3, [r7, #64]	; 0x40
 80045be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045c4:	e841 2300 	strex	r3, r2, [r1]
 80045c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e6      	bne.n	800459e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3308      	adds	r3, #8
 80045d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	e853 3f00 	ldrex	r3, [r3]
 80045de:	61fb      	str	r3, [r7, #28]
   return(result);
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f023 0301 	bic.w	r3, r3, #1
 80045e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3308      	adds	r3, #8
 80045ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045f8:	e841 2300 	strex	r3, r2, [r1]
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e5      	bne.n	80045d0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004608:	2b01      	cmp	r3, #1
 800460a:	d118      	bne.n	800463e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	60bb      	str	r3, [r7, #8]
   return(result);
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f023 0310 	bic.w	r3, r3, #16
 8004620:	647b      	str	r3, [r7, #68]	; 0x44
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462e:	6979      	ldr	r1, [r7, #20]
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	e841 2300 	strex	r3, r2, [r1]
 8004636:	613b      	str	r3, [r7, #16]
   return(result);
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1e6      	bne.n	800460c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004652:	bf00      	nop
 8004654:	3754      	adds	r7, #84	; 0x54
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
	...

08004660 <std>:
 8004660:	2300      	movs	r3, #0
 8004662:	b510      	push	{r4, lr}
 8004664:	4604      	mov	r4, r0
 8004666:	e9c0 3300 	strd	r3, r3, [r0]
 800466a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800466e:	6083      	str	r3, [r0, #8]
 8004670:	8181      	strh	r1, [r0, #12]
 8004672:	6643      	str	r3, [r0, #100]	; 0x64
 8004674:	81c2      	strh	r2, [r0, #14]
 8004676:	6183      	str	r3, [r0, #24]
 8004678:	4619      	mov	r1, r3
 800467a:	2208      	movs	r2, #8
 800467c:	305c      	adds	r0, #92	; 0x5c
 800467e:	f000 f906 	bl	800488e <memset>
 8004682:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <std+0x58>)
 8004684:	6263      	str	r3, [r4, #36]	; 0x24
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <std+0x5c>)
 8004688:	62a3      	str	r3, [r4, #40]	; 0x28
 800468a:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <std+0x60>)
 800468c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800468e:	4b0d      	ldr	r3, [pc, #52]	; (80046c4 <std+0x64>)
 8004690:	6323      	str	r3, [r4, #48]	; 0x30
 8004692:	4b0d      	ldr	r3, [pc, #52]	; (80046c8 <std+0x68>)
 8004694:	6224      	str	r4, [r4, #32]
 8004696:	429c      	cmp	r4, r3
 8004698:	d006      	beq.n	80046a8 <std+0x48>
 800469a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800469e:	4294      	cmp	r4, r2
 80046a0:	d002      	beq.n	80046a8 <std+0x48>
 80046a2:	33d0      	adds	r3, #208	; 0xd0
 80046a4:	429c      	cmp	r4, r3
 80046a6:	d105      	bne.n	80046b4 <std+0x54>
 80046a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80046ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b0:	f000 b966 	b.w	8004980 <__retarget_lock_init_recursive>
 80046b4:	bd10      	pop	{r4, pc}
 80046b6:	bf00      	nop
 80046b8:	08004809 	.word	0x08004809
 80046bc:	0800482b 	.word	0x0800482b
 80046c0:	08004863 	.word	0x08004863
 80046c4:	08004887 	.word	0x08004887
 80046c8:	200001c4 	.word	0x200001c4

080046cc <stdio_exit_handler>:
 80046cc:	4a02      	ldr	r2, [pc, #8]	; (80046d8 <stdio_exit_handler+0xc>)
 80046ce:	4903      	ldr	r1, [pc, #12]	; (80046dc <stdio_exit_handler+0x10>)
 80046d0:	4803      	ldr	r0, [pc, #12]	; (80046e0 <stdio_exit_handler+0x14>)
 80046d2:	f000 b869 	b.w	80047a8 <_fwalk_sglue>
 80046d6:	bf00      	nop
 80046d8:	2000000c 	.word	0x2000000c
 80046dc:	0800522d 	.word	0x0800522d
 80046e0:	20000018 	.word	0x20000018

080046e4 <cleanup_stdio>:
 80046e4:	6841      	ldr	r1, [r0, #4]
 80046e6:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <cleanup_stdio+0x34>)
 80046e8:	4299      	cmp	r1, r3
 80046ea:	b510      	push	{r4, lr}
 80046ec:	4604      	mov	r4, r0
 80046ee:	d001      	beq.n	80046f4 <cleanup_stdio+0x10>
 80046f0:	f000 fd9c 	bl	800522c <_fflush_r>
 80046f4:	68a1      	ldr	r1, [r4, #8]
 80046f6:	4b09      	ldr	r3, [pc, #36]	; (800471c <cleanup_stdio+0x38>)
 80046f8:	4299      	cmp	r1, r3
 80046fa:	d002      	beq.n	8004702 <cleanup_stdio+0x1e>
 80046fc:	4620      	mov	r0, r4
 80046fe:	f000 fd95 	bl	800522c <_fflush_r>
 8004702:	68e1      	ldr	r1, [r4, #12]
 8004704:	4b06      	ldr	r3, [pc, #24]	; (8004720 <cleanup_stdio+0x3c>)
 8004706:	4299      	cmp	r1, r3
 8004708:	d004      	beq.n	8004714 <cleanup_stdio+0x30>
 800470a:	4620      	mov	r0, r4
 800470c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004710:	f000 bd8c 	b.w	800522c <_fflush_r>
 8004714:	bd10      	pop	{r4, pc}
 8004716:	bf00      	nop
 8004718:	200001c4 	.word	0x200001c4
 800471c:	2000022c 	.word	0x2000022c
 8004720:	20000294 	.word	0x20000294

08004724 <global_stdio_init.part.0>:
 8004724:	b510      	push	{r4, lr}
 8004726:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <global_stdio_init.part.0+0x30>)
 8004728:	4c0b      	ldr	r4, [pc, #44]	; (8004758 <global_stdio_init.part.0+0x34>)
 800472a:	4a0c      	ldr	r2, [pc, #48]	; (800475c <global_stdio_init.part.0+0x38>)
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	4620      	mov	r0, r4
 8004730:	2200      	movs	r2, #0
 8004732:	2104      	movs	r1, #4
 8004734:	f7ff ff94 	bl	8004660 <std>
 8004738:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800473c:	2201      	movs	r2, #1
 800473e:	2109      	movs	r1, #9
 8004740:	f7ff ff8e 	bl	8004660 <std>
 8004744:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004748:	2202      	movs	r2, #2
 800474a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800474e:	2112      	movs	r1, #18
 8004750:	f7ff bf86 	b.w	8004660 <std>
 8004754:	200002fc 	.word	0x200002fc
 8004758:	200001c4 	.word	0x200001c4
 800475c:	080046cd 	.word	0x080046cd

08004760 <__sfp_lock_acquire>:
 8004760:	4801      	ldr	r0, [pc, #4]	; (8004768 <__sfp_lock_acquire+0x8>)
 8004762:	f000 b90e 	b.w	8004982 <__retarget_lock_acquire_recursive>
 8004766:	bf00      	nop
 8004768:	20000305 	.word	0x20000305

0800476c <__sfp_lock_release>:
 800476c:	4801      	ldr	r0, [pc, #4]	; (8004774 <__sfp_lock_release+0x8>)
 800476e:	f000 b909 	b.w	8004984 <__retarget_lock_release_recursive>
 8004772:	bf00      	nop
 8004774:	20000305 	.word	0x20000305

08004778 <__sinit>:
 8004778:	b510      	push	{r4, lr}
 800477a:	4604      	mov	r4, r0
 800477c:	f7ff fff0 	bl	8004760 <__sfp_lock_acquire>
 8004780:	6a23      	ldr	r3, [r4, #32]
 8004782:	b11b      	cbz	r3, 800478c <__sinit+0x14>
 8004784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004788:	f7ff bff0 	b.w	800476c <__sfp_lock_release>
 800478c:	4b04      	ldr	r3, [pc, #16]	; (80047a0 <__sinit+0x28>)
 800478e:	6223      	str	r3, [r4, #32]
 8004790:	4b04      	ldr	r3, [pc, #16]	; (80047a4 <__sinit+0x2c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1f5      	bne.n	8004784 <__sinit+0xc>
 8004798:	f7ff ffc4 	bl	8004724 <global_stdio_init.part.0>
 800479c:	e7f2      	b.n	8004784 <__sinit+0xc>
 800479e:	bf00      	nop
 80047a0:	080046e5 	.word	0x080046e5
 80047a4:	200002fc 	.word	0x200002fc

080047a8 <_fwalk_sglue>:
 80047a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047ac:	4607      	mov	r7, r0
 80047ae:	4688      	mov	r8, r1
 80047b0:	4614      	mov	r4, r2
 80047b2:	2600      	movs	r6, #0
 80047b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047b8:	f1b9 0901 	subs.w	r9, r9, #1
 80047bc:	d505      	bpl.n	80047ca <_fwalk_sglue+0x22>
 80047be:	6824      	ldr	r4, [r4, #0]
 80047c0:	2c00      	cmp	r4, #0
 80047c2:	d1f7      	bne.n	80047b4 <_fwalk_sglue+0xc>
 80047c4:	4630      	mov	r0, r6
 80047c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ca:	89ab      	ldrh	r3, [r5, #12]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d907      	bls.n	80047e0 <_fwalk_sglue+0x38>
 80047d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047d4:	3301      	adds	r3, #1
 80047d6:	d003      	beq.n	80047e0 <_fwalk_sglue+0x38>
 80047d8:	4629      	mov	r1, r5
 80047da:	4638      	mov	r0, r7
 80047dc:	47c0      	blx	r8
 80047de:	4306      	orrs	r6, r0
 80047e0:	3568      	adds	r5, #104	; 0x68
 80047e2:	e7e9      	b.n	80047b8 <_fwalk_sglue+0x10>

080047e4 <iprintf>:
 80047e4:	b40f      	push	{r0, r1, r2, r3}
 80047e6:	b507      	push	{r0, r1, r2, lr}
 80047e8:	4906      	ldr	r1, [pc, #24]	; (8004804 <iprintf+0x20>)
 80047ea:	ab04      	add	r3, sp, #16
 80047ec:	6808      	ldr	r0, [r1, #0]
 80047ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80047f2:	6881      	ldr	r1, [r0, #8]
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	f000 f9e9 	bl	8004bcc <_vfiprintf_r>
 80047fa:	b003      	add	sp, #12
 80047fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004800:	b004      	add	sp, #16
 8004802:	4770      	bx	lr
 8004804:	20000064 	.word	0x20000064

08004808 <__sread>:
 8004808:	b510      	push	{r4, lr}
 800480a:	460c      	mov	r4, r1
 800480c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004810:	f000 f868 	bl	80048e4 <_read_r>
 8004814:	2800      	cmp	r0, #0
 8004816:	bfab      	itete	ge
 8004818:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800481a:	89a3      	ldrhlt	r3, [r4, #12]
 800481c:	181b      	addge	r3, r3, r0
 800481e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004822:	bfac      	ite	ge
 8004824:	6563      	strge	r3, [r4, #84]	; 0x54
 8004826:	81a3      	strhlt	r3, [r4, #12]
 8004828:	bd10      	pop	{r4, pc}

0800482a <__swrite>:
 800482a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800482e:	461f      	mov	r7, r3
 8004830:	898b      	ldrh	r3, [r1, #12]
 8004832:	05db      	lsls	r3, r3, #23
 8004834:	4605      	mov	r5, r0
 8004836:	460c      	mov	r4, r1
 8004838:	4616      	mov	r6, r2
 800483a:	d505      	bpl.n	8004848 <__swrite+0x1e>
 800483c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004840:	2302      	movs	r3, #2
 8004842:	2200      	movs	r2, #0
 8004844:	f000 f83c 	bl	80048c0 <_lseek_r>
 8004848:	89a3      	ldrh	r3, [r4, #12]
 800484a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800484e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004852:	81a3      	strh	r3, [r4, #12]
 8004854:	4632      	mov	r2, r6
 8004856:	463b      	mov	r3, r7
 8004858:	4628      	mov	r0, r5
 800485a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800485e:	f000 b853 	b.w	8004908 <_write_r>

08004862 <__sseek>:
 8004862:	b510      	push	{r4, lr}
 8004864:	460c      	mov	r4, r1
 8004866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800486a:	f000 f829 	bl	80048c0 <_lseek_r>
 800486e:	1c43      	adds	r3, r0, #1
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	bf15      	itete	ne
 8004874:	6560      	strne	r0, [r4, #84]	; 0x54
 8004876:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800487a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800487e:	81a3      	strheq	r3, [r4, #12]
 8004880:	bf18      	it	ne
 8004882:	81a3      	strhne	r3, [r4, #12]
 8004884:	bd10      	pop	{r4, pc}

08004886 <__sclose>:
 8004886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800488a:	f000 b809 	b.w	80048a0 <_close_r>

0800488e <memset>:
 800488e:	4402      	add	r2, r0
 8004890:	4603      	mov	r3, r0
 8004892:	4293      	cmp	r3, r2
 8004894:	d100      	bne.n	8004898 <memset+0xa>
 8004896:	4770      	bx	lr
 8004898:	f803 1b01 	strb.w	r1, [r3], #1
 800489c:	e7f9      	b.n	8004892 <memset+0x4>
	...

080048a0 <_close_r>:
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	4d06      	ldr	r5, [pc, #24]	; (80048bc <_close_r+0x1c>)
 80048a4:	2300      	movs	r3, #0
 80048a6:	4604      	mov	r4, r0
 80048a8:	4608      	mov	r0, r1
 80048aa:	602b      	str	r3, [r5, #0]
 80048ac:	f7fc f8fb 	bl	8000aa6 <_close>
 80048b0:	1c43      	adds	r3, r0, #1
 80048b2:	d102      	bne.n	80048ba <_close_r+0x1a>
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	b103      	cbz	r3, 80048ba <_close_r+0x1a>
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	bd38      	pop	{r3, r4, r5, pc}
 80048bc:	20000300 	.word	0x20000300

080048c0 <_lseek_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	4d07      	ldr	r5, [pc, #28]	; (80048e0 <_lseek_r+0x20>)
 80048c4:	4604      	mov	r4, r0
 80048c6:	4608      	mov	r0, r1
 80048c8:	4611      	mov	r1, r2
 80048ca:	2200      	movs	r2, #0
 80048cc:	602a      	str	r2, [r5, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	f7fc f910 	bl	8000af4 <_lseek>
 80048d4:	1c43      	adds	r3, r0, #1
 80048d6:	d102      	bne.n	80048de <_lseek_r+0x1e>
 80048d8:	682b      	ldr	r3, [r5, #0]
 80048da:	b103      	cbz	r3, 80048de <_lseek_r+0x1e>
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	bd38      	pop	{r3, r4, r5, pc}
 80048e0:	20000300 	.word	0x20000300

080048e4 <_read_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	4d07      	ldr	r5, [pc, #28]	; (8004904 <_read_r+0x20>)
 80048e8:	4604      	mov	r4, r0
 80048ea:	4608      	mov	r0, r1
 80048ec:	4611      	mov	r1, r2
 80048ee:	2200      	movs	r2, #0
 80048f0:	602a      	str	r2, [r5, #0]
 80048f2:	461a      	mov	r2, r3
 80048f4:	f7fc f89e 	bl	8000a34 <_read>
 80048f8:	1c43      	adds	r3, r0, #1
 80048fa:	d102      	bne.n	8004902 <_read_r+0x1e>
 80048fc:	682b      	ldr	r3, [r5, #0]
 80048fe:	b103      	cbz	r3, 8004902 <_read_r+0x1e>
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	bd38      	pop	{r3, r4, r5, pc}
 8004904:	20000300 	.word	0x20000300

08004908 <_write_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4d07      	ldr	r5, [pc, #28]	; (8004928 <_write_r+0x20>)
 800490c:	4604      	mov	r4, r0
 800490e:	4608      	mov	r0, r1
 8004910:	4611      	mov	r1, r2
 8004912:	2200      	movs	r2, #0
 8004914:	602a      	str	r2, [r5, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	f7fc f8a9 	bl	8000a6e <_write>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d102      	bne.n	8004926 <_write_r+0x1e>
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	b103      	cbz	r3, 8004926 <_write_r+0x1e>
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	bd38      	pop	{r3, r4, r5, pc}
 8004928:	20000300 	.word	0x20000300

0800492c <__errno>:
 800492c:	4b01      	ldr	r3, [pc, #4]	; (8004934 <__errno+0x8>)
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000064 	.word	0x20000064

08004938 <__libc_init_array>:
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	4d0d      	ldr	r5, [pc, #52]	; (8004970 <__libc_init_array+0x38>)
 800493c:	4c0d      	ldr	r4, [pc, #52]	; (8004974 <__libc_init_array+0x3c>)
 800493e:	1b64      	subs	r4, r4, r5
 8004940:	10a4      	asrs	r4, r4, #2
 8004942:	2600      	movs	r6, #0
 8004944:	42a6      	cmp	r6, r4
 8004946:	d109      	bne.n	800495c <__libc_init_array+0x24>
 8004948:	4d0b      	ldr	r5, [pc, #44]	; (8004978 <__libc_init_array+0x40>)
 800494a:	4c0c      	ldr	r4, [pc, #48]	; (800497c <__libc_init_array+0x44>)
 800494c:	f000 fdc0 	bl	80054d0 <_init>
 8004950:	1b64      	subs	r4, r4, r5
 8004952:	10a4      	asrs	r4, r4, #2
 8004954:	2600      	movs	r6, #0
 8004956:	42a6      	cmp	r6, r4
 8004958:	d105      	bne.n	8004966 <__libc_init_array+0x2e>
 800495a:	bd70      	pop	{r4, r5, r6, pc}
 800495c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004960:	4798      	blx	r3
 8004962:	3601      	adds	r6, #1
 8004964:	e7ee      	b.n	8004944 <__libc_init_array+0xc>
 8004966:	f855 3b04 	ldr.w	r3, [r5], #4
 800496a:	4798      	blx	r3
 800496c:	3601      	adds	r6, #1
 800496e:	e7f2      	b.n	8004956 <__libc_init_array+0x1e>
 8004970:	080055b4 	.word	0x080055b4
 8004974:	080055b4 	.word	0x080055b4
 8004978:	080055b4 	.word	0x080055b4
 800497c:	080055b8 	.word	0x080055b8

08004980 <__retarget_lock_init_recursive>:
 8004980:	4770      	bx	lr

08004982 <__retarget_lock_acquire_recursive>:
 8004982:	4770      	bx	lr

08004984 <__retarget_lock_release_recursive>:
 8004984:	4770      	bx	lr
	...

08004988 <_free_r>:
 8004988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800498a:	2900      	cmp	r1, #0
 800498c:	d044      	beq.n	8004a18 <_free_r+0x90>
 800498e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004992:	9001      	str	r0, [sp, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	f1a1 0404 	sub.w	r4, r1, #4
 800499a:	bfb8      	it	lt
 800499c:	18e4      	addlt	r4, r4, r3
 800499e:	f000 f8df 	bl	8004b60 <__malloc_lock>
 80049a2:	4a1e      	ldr	r2, [pc, #120]	; (8004a1c <_free_r+0x94>)
 80049a4:	9801      	ldr	r0, [sp, #4]
 80049a6:	6813      	ldr	r3, [r2, #0]
 80049a8:	b933      	cbnz	r3, 80049b8 <_free_r+0x30>
 80049aa:	6063      	str	r3, [r4, #4]
 80049ac:	6014      	str	r4, [r2, #0]
 80049ae:	b003      	add	sp, #12
 80049b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049b4:	f000 b8da 	b.w	8004b6c <__malloc_unlock>
 80049b8:	42a3      	cmp	r3, r4
 80049ba:	d908      	bls.n	80049ce <_free_r+0x46>
 80049bc:	6825      	ldr	r5, [r4, #0]
 80049be:	1961      	adds	r1, r4, r5
 80049c0:	428b      	cmp	r3, r1
 80049c2:	bf01      	itttt	eq
 80049c4:	6819      	ldreq	r1, [r3, #0]
 80049c6:	685b      	ldreq	r3, [r3, #4]
 80049c8:	1949      	addeq	r1, r1, r5
 80049ca:	6021      	streq	r1, [r4, #0]
 80049cc:	e7ed      	b.n	80049aa <_free_r+0x22>
 80049ce:	461a      	mov	r2, r3
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	b10b      	cbz	r3, 80049d8 <_free_r+0x50>
 80049d4:	42a3      	cmp	r3, r4
 80049d6:	d9fa      	bls.n	80049ce <_free_r+0x46>
 80049d8:	6811      	ldr	r1, [r2, #0]
 80049da:	1855      	adds	r5, r2, r1
 80049dc:	42a5      	cmp	r5, r4
 80049de:	d10b      	bne.n	80049f8 <_free_r+0x70>
 80049e0:	6824      	ldr	r4, [r4, #0]
 80049e2:	4421      	add	r1, r4
 80049e4:	1854      	adds	r4, r2, r1
 80049e6:	42a3      	cmp	r3, r4
 80049e8:	6011      	str	r1, [r2, #0]
 80049ea:	d1e0      	bne.n	80049ae <_free_r+0x26>
 80049ec:	681c      	ldr	r4, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	6053      	str	r3, [r2, #4]
 80049f2:	440c      	add	r4, r1
 80049f4:	6014      	str	r4, [r2, #0]
 80049f6:	e7da      	b.n	80049ae <_free_r+0x26>
 80049f8:	d902      	bls.n	8004a00 <_free_r+0x78>
 80049fa:	230c      	movs	r3, #12
 80049fc:	6003      	str	r3, [r0, #0]
 80049fe:	e7d6      	b.n	80049ae <_free_r+0x26>
 8004a00:	6825      	ldr	r5, [r4, #0]
 8004a02:	1961      	adds	r1, r4, r5
 8004a04:	428b      	cmp	r3, r1
 8004a06:	bf04      	itt	eq
 8004a08:	6819      	ldreq	r1, [r3, #0]
 8004a0a:	685b      	ldreq	r3, [r3, #4]
 8004a0c:	6063      	str	r3, [r4, #4]
 8004a0e:	bf04      	itt	eq
 8004a10:	1949      	addeq	r1, r1, r5
 8004a12:	6021      	streq	r1, [r4, #0]
 8004a14:	6054      	str	r4, [r2, #4]
 8004a16:	e7ca      	b.n	80049ae <_free_r+0x26>
 8004a18:	b003      	add	sp, #12
 8004a1a:	bd30      	pop	{r4, r5, pc}
 8004a1c:	20000308 	.word	0x20000308

08004a20 <sbrk_aligned>:
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	4e0e      	ldr	r6, [pc, #56]	; (8004a5c <sbrk_aligned+0x3c>)
 8004a24:	460c      	mov	r4, r1
 8004a26:	6831      	ldr	r1, [r6, #0]
 8004a28:	4605      	mov	r5, r0
 8004a2a:	b911      	cbnz	r1, 8004a32 <sbrk_aligned+0x12>
 8004a2c:	f000 fcbc 	bl	80053a8 <_sbrk_r>
 8004a30:	6030      	str	r0, [r6, #0]
 8004a32:	4621      	mov	r1, r4
 8004a34:	4628      	mov	r0, r5
 8004a36:	f000 fcb7 	bl	80053a8 <_sbrk_r>
 8004a3a:	1c43      	adds	r3, r0, #1
 8004a3c:	d00a      	beq.n	8004a54 <sbrk_aligned+0x34>
 8004a3e:	1cc4      	adds	r4, r0, #3
 8004a40:	f024 0403 	bic.w	r4, r4, #3
 8004a44:	42a0      	cmp	r0, r4
 8004a46:	d007      	beq.n	8004a58 <sbrk_aligned+0x38>
 8004a48:	1a21      	subs	r1, r4, r0
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	f000 fcac 	bl	80053a8 <_sbrk_r>
 8004a50:	3001      	adds	r0, #1
 8004a52:	d101      	bne.n	8004a58 <sbrk_aligned+0x38>
 8004a54:	f04f 34ff 	mov.w	r4, #4294967295
 8004a58:	4620      	mov	r0, r4
 8004a5a:	bd70      	pop	{r4, r5, r6, pc}
 8004a5c:	2000030c 	.word	0x2000030c

08004a60 <_malloc_r>:
 8004a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a64:	1ccd      	adds	r5, r1, #3
 8004a66:	f025 0503 	bic.w	r5, r5, #3
 8004a6a:	3508      	adds	r5, #8
 8004a6c:	2d0c      	cmp	r5, #12
 8004a6e:	bf38      	it	cc
 8004a70:	250c      	movcc	r5, #12
 8004a72:	2d00      	cmp	r5, #0
 8004a74:	4607      	mov	r7, r0
 8004a76:	db01      	blt.n	8004a7c <_malloc_r+0x1c>
 8004a78:	42a9      	cmp	r1, r5
 8004a7a:	d905      	bls.n	8004a88 <_malloc_r+0x28>
 8004a7c:	230c      	movs	r3, #12
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	2600      	movs	r6, #0
 8004a82:	4630      	mov	r0, r6
 8004a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b5c <_malloc_r+0xfc>
 8004a8c:	f000 f868 	bl	8004b60 <__malloc_lock>
 8004a90:	f8d8 3000 	ldr.w	r3, [r8]
 8004a94:	461c      	mov	r4, r3
 8004a96:	bb5c      	cbnz	r4, 8004af0 <_malloc_r+0x90>
 8004a98:	4629      	mov	r1, r5
 8004a9a:	4638      	mov	r0, r7
 8004a9c:	f7ff ffc0 	bl	8004a20 <sbrk_aligned>
 8004aa0:	1c43      	adds	r3, r0, #1
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	d155      	bne.n	8004b52 <_malloc_r+0xf2>
 8004aa6:	f8d8 4000 	ldr.w	r4, [r8]
 8004aaa:	4626      	mov	r6, r4
 8004aac:	2e00      	cmp	r6, #0
 8004aae:	d145      	bne.n	8004b3c <_malloc_r+0xdc>
 8004ab0:	2c00      	cmp	r4, #0
 8004ab2:	d048      	beq.n	8004b46 <_malloc_r+0xe6>
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	4631      	mov	r1, r6
 8004ab8:	4638      	mov	r0, r7
 8004aba:	eb04 0903 	add.w	r9, r4, r3
 8004abe:	f000 fc73 	bl	80053a8 <_sbrk_r>
 8004ac2:	4581      	cmp	r9, r0
 8004ac4:	d13f      	bne.n	8004b46 <_malloc_r+0xe6>
 8004ac6:	6821      	ldr	r1, [r4, #0]
 8004ac8:	1a6d      	subs	r5, r5, r1
 8004aca:	4629      	mov	r1, r5
 8004acc:	4638      	mov	r0, r7
 8004ace:	f7ff ffa7 	bl	8004a20 <sbrk_aligned>
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	d037      	beq.n	8004b46 <_malloc_r+0xe6>
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	442b      	add	r3, r5
 8004ada:	6023      	str	r3, [r4, #0]
 8004adc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d038      	beq.n	8004b56 <_malloc_r+0xf6>
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	42a2      	cmp	r2, r4
 8004ae8:	d12b      	bne.n	8004b42 <_malloc_r+0xe2>
 8004aea:	2200      	movs	r2, #0
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	e00f      	b.n	8004b10 <_malloc_r+0xb0>
 8004af0:	6822      	ldr	r2, [r4, #0]
 8004af2:	1b52      	subs	r2, r2, r5
 8004af4:	d41f      	bmi.n	8004b36 <_malloc_r+0xd6>
 8004af6:	2a0b      	cmp	r2, #11
 8004af8:	d917      	bls.n	8004b2a <_malloc_r+0xca>
 8004afa:	1961      	adds	r1, r4, r5
 8004afc:	42a3      	cmp	r3, r4
 8004afe:	6025      	str	r5, [r4, #0]
 8004b00:	bf18      	it	ne
 8004b02:	6059      	strne	r1, [r3, #4]
 8004b04:	6863      	ldr	r3, [r4, #4]
 8004b06:	bf08      	it	eq
 8004b08:	f8c8 1000 	streq.w	r1, [r8]
 8004b0c:	5162      	str	r2, [r4, r5]
 8004b0e:	604b      	str	r3, [r1, #4]
 8004b10:	4638      	mov	r0, r7
 8004b12:	f104 060b 	add.w	r6, r4, #11
 8004b16:	f000 f829 	bl	8004b6c <__malloc_unlock>
 8004b1a:	f026 0607 	bic.w	r6, r6, #7
 8004b1e:	1d23      	adds	r3, r4, #4
 8004b20:	1af2      	subs	r2, r6, r3
 8004b22:	d0ae      	beq.n	8004a82 <_malloc_r+0x22>
 8004b24:	1b9b      	subs	r3, r3, r6
 8004b26:	50a3      	str	r3, [r4, r2]
 8004b28:	e7ab      	b.n	8004a82 <_malloc_r+0x22>
 8004b2a:	42a3      	cmp	r3, r4
 8004b2c:	6862      	ldr	r2, [r4, #4]
 8004b2e:	d1dd      	bne.n	8004aec <_malloc_r+0x8c>
 8004b30:	f8c8 2000 	str.w	r2, [r8]
 8004b34:	e7ec      	b.n	8004b10 <_malloc_r+0xb0>
 8004b36:	4623      	mov	r3, r4
 8004b38:	6864      	ldr	r4, [r4, #4]
 8004b3a:	e7ac      	b.n	8004a96 <_malloc_r+0x36>
 8004b3c:	4634      	mov	r4, r6
 8004b3e:	6876      	ldr	r6, [r6, #4]
 8004b40:	e7b4      	b.n	8004aac <_malloc_r+0x4c>
 8004b42:	4613      	mov	r3, r2
 8004b44:	e7cc      	b.n	8004ae0 <_malloc_r+0x80>
 8004b46:	230c      	movs	r3, #12
 8004b48:	603b      	str	r3, [r7, #0]
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	f000 f80e 	bl	8004b6c <__malloc_unlock>
 8004b50:	e797      	b.n	8004a82 <_malloc_r+0x22>
 8004b52:	6025      	str	r5, [r4, #0]
 8004b54:	e7dc      	b.n	8004b10 <_malloc_r+0xb0>
 8004b56:	605b      	str	r3, [r3, #4]
 8004b58:	deff      	udf	#255	; 0xff
 8004b5a:	bf00      	nop
 8004b5c:	20000308 	.word	0x20000308

08004b60 <__malloc_lock>:
 8004b60:	4801      	ldr	r0, [pc, #4]	; (8004b68 <__malloc_lock+0x8>)
 8004b62:	f7ff bf0e 	b.w	8004982 <__retarget_lock_acquire_recursive>
 8004b66:	bf00      	nop
 8004b68:	20000304 	.word	0x20000304

08004b6c <__malloc_unlock>:
 8004b6c:	4801      	ldr	r0, [pc, #4]	; (8004b74 <__malloc_unlock+0x8>)
 8004b6e:	f7ff bf09 	b.w	8004984 <__retarget_lock_release_recursive>
 8004b72:	bf00      	nop
 8004b74:	20000304 	.word	0x20000304

08004b78 <__sfputc_r>:
 8004b78:	6893      	ldr	r3, [r2, #8]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	b410      	push	{r4}
 8004b80:	6093      	str	r3, [r2, #8]
 8004b82:	da08      	bge.n	8004b96 <__sfputc_r+0x1e>
 8004b84:	6994      	ldr	r4, [r2, #24]
 8004b86:	42a3      	cmp	r3, r4
 8004b88:	db01      	blt.n	8004b8e <__sfputc_r+0x16>
 8004b8a:	290a      	cmp	r1, #10
 8004b8c:	d103      	bne.n	8004b96 <__sfputc_r+0x1e>
 8004b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b92:	f000 bb73 	b.w	800527c <__swbuf_r>
 8004b96:	6813      	ldr	r3, [r2, #0]
 8004b98:	1c58      	adds	r0, r3, #1
 8004b9a:	6010      	str	r0, [r2, #0]
 8004b9c:	7019      	strb	r1, [r3, #0]
 8004b9e:	4608      	mov	r0, r1
 8004ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <__sfputs_r>:
 8004ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba8:	4606      	mov	r6, r0
 8004baa:	460f      	mov	r7, r1
 8004bac:	4614      	mov	r4, r2
 8004bae:	18d5      	adds	r5, r2, r3
 8004bb0:	42ac      	cmp	r4, r5
 8004bb2:	d101      	bne.n	8004bb8 <__sfputs_r+0x12>
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	e007      	b.n	8004bc8 <__sfputs_r+0x22>
 8004bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bbc:	463a      	mov	r2, r7
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	f7ff ffda 	bl	8004b78 <__sfputc_r>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d1f3      	bne.n	8004bb0 <__sfputs_r+0xa>
 8004bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bcc <_vfiprintf_r>:
 8004bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd0:	460d      	mov	r5, r1
 8004bd2:	b09d      	sub	sp, #116	; 0x74
 8004bd4:	4614      	mov	r4, r2
 8004bd6:	4698      	mov	r8, r3
 8004bd8:	4606      	mov	r6, r0
 8004bda:	b118      	cbz	r0, 8004be4 <_vfiprintf_r+0x18>
 8004bdc:	6a03      	ldr	r3, [r0, #32]
 8004bde:	b90b      	cbnz	r3, 8004be4 <_vfiprintf_r+0x18>
 8004be0:	f7ff fdca 	bl	8004778 <__sinit>
 8004be4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004be6:	07d9      	lsls	r1, r3, #31
 8004be8:	d405      	bmi.n	8004bf6 <_vfiprintf_r+0x2a>
 8004bea:	89ab      	ldrh	r3, [r5, #12]
 8004bec:	059a      	lsls	r2, r3, #22
 8004bee:	d402      	bmi.n	8004bf6 <_vfiprintf_r+0x2a>
 8004bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bf2:	f7ff fec6 	bl	8004982 <__retarget_lock_acquire_recursive>
 8004bf6:	89ab      	ldrh	r3, [r5, #12]
 8004bf8:	071b      	lsls	r3, r3, #28
 8004bfa:	d501      	bpl.n	8004c00 <_vfiprintf_r+0x34>
 8004bfc:	692b      	ldr	r3, [r5, #16]
 8004bfe:	b99b      	cbnz	r3, 8004c28 <_vfiprintf_r+0x5c>
 8004c00:	4629      	mov	r1, r5
 8004c02:	4630      	mov	r0, r6
 8004c04:	f000 fb78 	bl	80052f8 <__swsetup_r>
 8004c08:	b170      	cbz	r0, 8004c28 <_vfiprintf_r+0x5c>
 8004c0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c0c:	07dc      	lsls	r4, r3, #31
 8004c0e:	d504      	bpl.n	8004c1a <_vfiprintf_r+0x4e>
 8004c10:	f04f 30ff 	mov.w	r0, #4294967295
 8004c14:	b01d      	add	sp, #116	; 0x74
 8004c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c1a:	89ab      	ldrh	r3, [r5, #12]
 8004c1c:	0598      	lsls	r0, r3, #22
 8004c1e:	d4f7      	bmi.n	8004c10 <_vfiprintf_r+0x44>
 8004c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c22:	f7ff feaf 	bl	8004984 <__retarget_lock_release_recursive>
 8004c26:	e7f3      	b.n	8004c10 <_vfiprintf_r+0x44>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c2c:	2320      	movs	r3, #32
 8004c2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c32:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c36:	2330      	movs	r3, #48	; 0x30
 8004c38:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004dec <_vfiprintf_r+0x220>
 8004c3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c40:	f04f 0901 	mov.w	r9, #1
 8004c44:	4623      	mov	r3, r4
 8004c46:	469a      	mov	sl, r3
 8004c48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c4c:	b10a      	cbz	r2, 8004c52 <_vfiprintf_r+0x86>
 8004c4e:	2a25      	cmp	r2, #37	; 0x25
 8004c50:	d1f9      	bne.n	8004c46 <_vfiprintf_r+0x7a>
 8004c52:	ebba 0b04 	subs.w	fp, sl, r4
 8004c56:	d00b      	beq.n	8004c70 <_vfiprintf_r+0xa4>
 8004c58:	465b      	mov	r3, fp
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	4630      	mov	r0, r6
 8004c60:	f7ff ffa1 	bl	8004ba6 <__sfputs_r>
 8004c64:	3001      	adds	r0, #1
 8004c66:	f000 80a9 	beq.w	8004dbc <_vfiprintf_r+0x1f0>
 8004c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c6c:	445a      	add	r2, fp
 8004c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8004c70:	f89a 3000 	ldrb.w	r3, [sl]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 80a1 	beq.w	8004dbc <_vfiprintf_r+0x1f0>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c84:	f10a 0a01 	add.w	sl, sl, #1
 8004c88:	9304      	str	r3, [sp, #16]
 8004c8a:	9307      	str	r3, [sp, #28]
 8004c8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c90:	931a      	str	r3, [sp, #104]	; 0x68
 8004c92:	4654      	mov	r4, sl
 8004c94:	2205      	movs	r2, #5
 8004c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c9a:	4854      	ldr	r0, [pc, #336]	; (8004dec <_vfiprintf_r+0x220>)
 8004c9c:	f7fb fa98 	bl	80001d0 <memchr>
 8004ca0:	9a04      	ldr	r2, [sp, #16]
 8004ca2:	b9d8      	cbnz	r0, 8004cdc <_vfiprintf_r+0x110>
 8004ca4:	06d1      	lsls	r1, r2, #27
 8004ca6:	bf44      	itt	mi
 8004ca8:	2320      	movmi	r3, #32
 8004caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cae:	0713      	lsls	r3, r2, #28
 8004cb0:	bf44      	itt	mi
 8004cb2:	232b      	movmi	r3, #43	; 0x2b
 8004cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8004cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8004cbe:	d015      	beq.n	8004cec <_vfiprintf_r+0x120>
 8004cc0:	9a07      	ldr	r2, [sp, #28]
 8004cc2:	4654      	mov	r4, sl
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	f04f 0c0a 	mov.w	ip, #10
 8004cca:	4621      	mov	r1, r4
 8004ccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cd0:	3b30      	subs	r3, #48	; 0x30
 8004cd2:	2b09      	cmp	r3, #9
 8004cd4:	d94d      	bls.n	8004d72 <_vfiprintf_r+0x1a6>
 8004cd6:	b1b0      	cbz	r0, 8004d06 <_vfiprintf_r+0x13a>
 8004cd8:	9207      	str	r2, [sp, #28]
 8004cda:	e014      	b.n	8004d06 <_vfiprintf_r+0x13a>
 8004cdc:	eba0 0308 	sub.w	r3, r0, r8
 8004ce0:	fa09 f303 	lsl.w	r3, r9, r3
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	9304      	str	r3, [sp, #16]
 8004ce8:	46a2      	mov	sl, r4
 8004cea:	e7d2      	b.n	8004c92 <_vfiprintf_r+0xc6>
 8004cec:	9b03      	ldr	r3, [sp, #12]
 8004cee:	1d19      	adds	r1, r3, #4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	9103      	str	r1, [sp, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	bfbb      	ittet	lt
 8004cf8:	425b      	neglt	r3, r3
 8004cfa:	f042 0202 	orrlt.w	r2, r2, #2
 8004cfe:	9307      	strge	r3, [sp, #28]
 8004d00:	9307      	strlt	r3, [sp, #28]
 8004d02:	bfb8      	it	lt
 8004d04:	9204      	strlt	r2, [sp, #16]
 8004d06:	7823      	ldrb	r3, [r4, #0]
 8004d08:	2b2e      	cmp	r3, #46	; 0x2e
 8004d0a:	d10c      	bne.n	8004d26 <_vfiprintf_r+0x15a>
 8004d0c:	7863      	ldrb	r3, [r4, #1]
 8004d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d10:	d134      	bne.n	8004d7c <_vfiprintf_r+0x1b0>
 8004d12:	9b03      	ldr	r3, [sp, #12]
 8004d14:	1d1a      	adds	r2, r3, #4
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	9203      	str	r2, [sp, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	bfb8      	it	lt
 8004d1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d22:	3402      	adds	r4, #2
 8004d24:	9305      	str	r3, [sp, #20]
 8004d26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004dfc <_vfiprintf_r+0x230>
 8004d2a:	7821      	ldrb	r1, [r4, #0]
 8004d2c:	2203      	movs	r2, #3
 8004d2e:	4650      	mov	r0, sl
 8004d30:	f7fb fa4e 	bl	80001d0 <memchr>
 8004d34:	b138      	cbz	r0, 8004d46 <_vfiprintf_r+0x17a>
 8004d36:	9b04      	ldr	r3, [sp, #16]
 8004d38:	eba0 000a 	sub.w	r0, r0, sl
 8004d3c:	2240      	movs	r2, #64	; 0x40
 8004d3e:	4082      	lsls	r2, r0
 8004d40:	4313      	orrs	r3, r2
 8004d42:	3401      	adds	r4, #1
 8004d44:	9304      	str	r3, [sp, #16]
 8004d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d4a:	4829      	ldr	r0, [pc, #164]	; (8004df0 <_vfiprintf_r+0x224>)
 8004d4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d50:	2206      	movs	r2, #6
 8004d52:	f7fb fa3d 	bl	80001d0 <memchr>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d03f      	beq.n	8004dda <_vfiprintf_r+0x20e>
 8004d5a:	4b26      	ldr	r3, [pc, #152]	; (8004df4 <_vfiprintf_r+0x228>)
 8004d5c:	bb1b      	cbnz	r3, 8004da6 <_vfiprintf_r+0x1da>
 8004d5e:	9b03      	ldr	r3, [sp, #12]
 8004d60:	3307      	adds	r3, #7
 8004d62:	f023 0307 	bic.w	r3, r3, #7
 8004d66:	3308      	adds	r3, #8
 8004d68:	9303      	str	r3, [sp, #12]
 8004d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d6c:	443b      	add	r3, r7
 8004d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d70:	e768      	b.n	8004c44 <_vfiprintf_r+0x78>
 8004d72:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d76:	460c      	mov	r4, r1
 8004d78:	2001      	movs	r0, #1
 8004d7a:	e7a6      	b.n	8004cca <_vfiprintf_r+0xfe>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	3401      	adds	r4, #1
 8004d80:	9305      	str	r3, [sp, #20]
 8004d82:	4619      	mov	r1, r3
 8004d84:	f04f 0c0a 	mov.w	ip, #10
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d8e:	3a30      	subs	r2, #48	; 0x30
 8004d90:	2a09      	cmp	r2, #9
 8004d92:	d903      	bls.n	8004d9c <_vfiprintf_r+0x1d0>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0c6      	beq.n	8004d26 <_vfiprintf_r+0x15a>
 8004d98:	9105      	str	r1, [sp, #20]
 8004d9a:	e7c4      	b.n	8004d26 <_vfiprintf_r+0x15a>
 8004d9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004da0:	4604      	mov	r4, r0
 8004da2:	2301      	movs	r3, #1
 8004da4:	e7f0      	b.n	8004d88 <_vfiprintf_r+0x1bc>
 8004da6:	ab03      	add	r3, sp, #12
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	462a      	mov	r2, r5
 8004dac:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <_vfiprintf_r+0x22c>)
 8004dae:	a904      	add	r1, sp, #16
 8004db0:	4630      	mov	r0, r6
 8004db2:	f3af 8000 	nop.w
 8004db6:	4607      	mov	r7, r0
 8004db8:	1c78      	adds	r0, r7, #1
 8004dba:	d1d6      	bne.n	8004d6a <_vfiprintf_r+0x19e>
 8004dbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dbe:	07d9      	lsls	r1, r3, #31
 8004dc0:	d405      	bmi.n	8004dce <_vfiprintf_r+0x202>
 8004dc2:	89ab      	ldrh	r3, [r5, #12]
 8004dc4:	059a      	lsls	r2, r3, #22
 8004dc6:	d402      	bmi.n	8004dce <_vfiprintf_r+0x202>
 8004dc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dca:	f7ff fddb 	bl	8004984 <__retarget_lock_release_recursive>
 8004dce:	89ab      	ldrh	r3, [r5, #12]
 8004dd0:	065b      	lsls	r3, r3, #25
 8004dd2:	f53f af1d 	bmi.w	8004c10 <_vfiprintf_r+0x44>
 8004dd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dd8:	e71c      	b.n	8004c14 <_vfiprintf_r+0x48>
 8004dda:	ab03      	add	r3, sp, #12
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	462a      	mov	r2, r5
 8004de0:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <_vfiprintf_r+0x22c>)
 8004de2:	a904      	add	r1, sp, #16
 8004de4:	4630      	mov	r0, r6
 8004de6:	f000 f879 	bl	8004edc <_printf_i>
 8004dea:	e7e4      	b.n	8004db6 <_vfiprintf_r+0x1ea>
 8004dec:	08005578 	.word	0x08005578
 8004df0:	08005582 	.word	0x08005582
 8004df4:	00000000 	.word	0x00000000
 8004df8:	08004ba7 	.word	0x08004ba7
 8004dfc:	0800557e 	.word	0x0800557e

08004e00 <_printf_common>:
 8004e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e04:	4616      	mov	r6, r2
 8004e06:	4699      	mov	r9, r3
 8004e08:	688a      	ldr	r2, [r1, #8]
 8004e0a:	690b      	ldr	r3, [r1, #16]
 8004e0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e10:	4293      	cmp	r3, r2
 8004e12:	bfb8      	it	lt
 8004e14:	4613      	movlt	r3, r2
 8004e16:	6033      	str	r3, [r6, #0]
 8004e18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e1c:	4607      	mov	r7, r0
 8004e1e:	460c      	mov	r4, r1
 8004e20:	b10a      	cbz	r2, 8004e26 <_printf_common+0x26>
 8004e22:	3301      	adds	r3, #1
 8004e24:	6033      	str	r3, [r6, #0]
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	0699      	lsls	r1, r3, #26
 8004e2a:	bf42      	ittt	mi
 8004e2c:	6833      	ldrmi	r3, [r6, #0]
 8004e2e:	3302      	addmi	r3, #2
 8004e30:	6033      	strmi	r3, [r6, #0]
 8004e32:	6825      	ldr	r5, [r4, #0]
 8004e34:	f015 0506 	ands.w	r5, r5, #6
 8004e38:	d106      	bne.n	8004e48 <_printf_common+0x48>
 8004e3a:	f104 0a19 	add.w	sl, r4, #25
 8004e3e:	68e3      	ldr	r3, [r4, #12]
 8004e40:	6832      	ldr	r2, [r6, #0]
 8004e42:	1a9b      	subs	r3, r3, r2
 8004e44:	42ab      	cmp	r3, r5
 8004e46:	dc26      	bgt.n	8004e96 <_printf_common+0x96>
 8004e48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e4c:	1e13      	subs	r3, r2, #0
 8004e4e:	6822      	ldr	r2, [r4, #0]
 8004e50:	bf18      	it	ne
 8004e52:	2301      	movne	r3, #1
 8004e54:	0692      	lsls	r2, r2, #26
 8004e56:	d42b      	bmi.n	8004eb0 <_printf_common+0xb0>
 8004e58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e5c:	4649      	mov	r1, r9
 8004e5e:	4638      	mov	r0, r7
 8004e60:	47c0      	blx	r8
 8004e62:	3001      	adds	r0, #1
 8004e64:	d01e      	beq.n	8004ea4 <_printf_common+0xa4>
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	6922      	ldr	r2, [r4, #16]
 8004e6a:	f003 0306 	and.w	r3, r3, #6
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	bf02      	ittt	eq
 8004e72:	68e5      	ldreq	r5, [r4, #12]
 8004e74:	6833      	ldreq	r3, [r6, #0]
 8004e76:	1aed      	subeq	r5, r5, r3
 8004e78:	68a3      	ldr	r3, [r4, #8]
 8004e7a:	bf0c      	ite	eq
 8004e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e80:	2500      	movne	r5, #0
 8004e82:	4293      	cmp	r3, r2
 8004e84:	bfc4      	itt	gt
 8004e86:	1a9b      	subgt	r3, r3, r2
 8004e88:	18ed      	addgt	r5, r5, r3
 8004e8a:	2600      	movs	r6, #0
 8004e8c:	341a      	adds	r4, #26
 8004e8e:	42b5      	cmp	r5, r6
 8004e90:	d11a      	bne.n	8004ec8 <_printf_common+0xc8>
 8004e92:	2000      	movs	r0, #0
 8004e94:	e008      	b.n	8004ea8 <_printf_common+0xa8>
 8004e96:	2301      	movs	r3, #1
 8004e98:	4652      	mov	r2, sl
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	4638      	mov	r0, r7
 8004e9e:	47c0      	blx	r8
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d103      	bne.n	8004eac <_printf_common+0xac>
 8004ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eac:	3501      	adds	r5, #1
 8004eae:	e7c6      	b.n	8004e3e <_printf_common+0x3e>
 8004eb0:	18e1      	adds	r1, r4, r3
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	2030      	movs	r0, #48	; 0x30
 8004eb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004eba:	4422      	add	r2, r4
 8004ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ec0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ec4:	3302      	adds	r3, #2
 8004ec6:	e7c7      	b.n	8004e58 <_printf_common+0x58>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	4622      	mov	r2, r4
 8004ecc:	4649      	mov	r1, r9
 8004ece:	4638      	mov	r0, r7
 8004ed0:	47c0      	blx	r8
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	d0e6      	beq.n	8004ea4 <_printf_common+0xa4>
 8004ed6:	3601      	adds	r6, #1
 8004ed8:	e7d9      	b.n	8004e8e <_printf_common+0x8e>
	...

08004edc <_printf_i>:
 8004edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee0:	7e0f      	ldrb	r7, [r1, #24]
 8004ee2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ee4:	2f78      	cmp	r7, #120	; 0x78
 8004ee6:	4691      	mov	r9, r2
 8004ee8:	4680      	mov	r8, r0
 8004eea:	460c      	mov	r4, r1
 8004eec:	469a      	mov	sl, r3
 8004eee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ef2:	d807      	bhi.n	8004f04 <_printf_i+0x28>
 8004ef4:	2f62      	cmp	r7, #98	; 0x62
 8004ef6:	d80a      	bhi.n	8004f0e <_printf_i+0x32>
 8004ef8:	2f00      	cmp	r7, #0
 8004efa:	f000 80d4 	beq.w	80050a6 <_printf_i+0x1ca>
 8004efe:	2f58      	cmp	r7, #88	; 0x58
 8004f00:	f000 80c0 	beq.w	8005084 <_printf_i+0x1a8>
 8004f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f0c:	e03a      	b.n	8004f84 <_printf_i+0xa8>
 8004f0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f12:	2b15      	cmp	r3, #21
 8004f14:	d8f6      	bhi.n	8004f04 <_printf_i+0x28>
 8004f16:	a101      	add	r1, pc, #4	; (adr r1, 8004f1c <_printf_i+0x40>)
 8004f18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f1c:	08004f75 	.word	0x08004f75
 8004f20:	08004f89 	.word	0x08004f89
 8004f24:	08004f05 	.word	0x08004f05
 8004f28:	08004f05 	.word	0x08004f05
 8004f2c:	08004f05 	.word	0x08004f05
 8004f30:	08004f05 	.word	0x08004f05
 8004f34:	08004f89 	.word	0x08004f89
 8004f38:	08004f05 	.word	0x08004f05
 8004f3c:	08004f05 	.word	0x08004f05
 8004f40:	08004f05 	.word	0x08004f05
 8004f44:	08004f05 	.word	0x08004f05
 8004f48:	0800508d 	.word	0x0800508d
 8004f4c:	08004fb5 	.word	0x08004fb5
 8004f50:	08005047 	.word	0x08005047
 8004f54:	08004f05 	.word	0x08004f05
 8004f58:	08004f05 	.word	0x08004f05
 8004f5c:	080050af 	.word	0x080050af
 8004f60:	08004f05 	.word	0x08004f05
 8004f64:	08004fb5 	.word	0x08004fb5
 8004f68:	08004f05 	.word	0x08004f05
 8004f6c:	08004f05 	.word	0x08004f05
 8004f70:	0800504f 	.word	0x0800504f
 8004f74:	682b      	ldr	r3, [r5, #0]
 8004f76:	1d1a      	adds	r2, r3, #4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	602a      	str	r2, [r5, #0]
 8004f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f84:	2301      	movs	r3, #1
 8004f86:	e09f      	b.n	80050c8 <_printf_i+0x1ec>
 8004f88:	6820      	ldr	r0, [r4, #0]
 8004f8a:	682b      	ldr	r3, [r5, #0]
 8004f8c:	0607      	lsls	r7, r0, #24
 8004f8e:	f103 0104 	add.w	r1, r3, #4
 8004f92:	6029      	str	r1, [r5, #0]
 8004f94:	d501      	bpl.n	8004f9a <_printf_i+0xbe>
 8004f96:	681e      	ldr	r6, [r3, #0]
 8004f98:	e003      	b.n	8004fa2 <_printf_i+0xc6>
 8004f9a:	0646      	lsls	r6, r0, #25
 8004f9c:	d5fb      	bpl.n	8004f96 <_printf_i+0xba>
 8004f9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004fa2:	2e00      	cmp	r6, #0
 8004fa4:	da03      	bge.n	8004fae <_printf_i+0xd2>
 8004fa6:	232d      	movs	r3, #45	; 0x2d
 8004fa8:	4276      	negs	r6, r6
 8004faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fae:	485a      	ldr	r0, [pc, #360]	; (8005118 <_printf_i+0x23c>)
 8004fb0:	230a      	movs	r3, #10
 8004fb2:	e012      	b.n	8004fda <_printf_i+0xfe>
 8004fb4:	682b      	ldr	r3, [r5, #0]
 8004fb6:	6820      	ldr	r0, [r4, #0]
 8004fb8:	1d19      	adds	r1, r3, #4
 8004fba:	6029      	str	r1, [r5, #0]
 8004fbc:	0605      	lsls	r5, r0, #24
 8004fbe:	d501      	bpl.n	8004fc4 <_printf_i+0xe8>
 8004fc0:	681e      	ldr	r6, [r3, #0]
 8004fc2:	e002      	b.n	8004fca <_printf_i+0xee>
 8004fc4:	0641      	lsls	r1, r0, #25
 8004fc6:	d5fb      	bpl.n	8004fc0 <_printf_i+0xe4>
 8004fc8:	881e      	ldrh	r6, [r3, #0]
 8004fca:	4853      	ldr	r0, [pc, #332]	; (8005118 <_printf_i+0x23c>)
 8004fcc:	2f6f      	cmp	r7, #111	; 0x6f
 8004fce:	bf0c      	ite	eq
 8004fd0:	2308      	moveq	r3, #8
 8004fd2:	230a      	movne	r3, #10
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fda:	6865      	ldr	r5, [r4, #4]
 8004fdc:	60a5      	str	r5, [r4, #8]
 8004fde:	2d00      	cmp	r5, #0
 8004fe0:	bfa2      	ittt	ge
 8004fe2:	6821      	ldrge	r1, [r4, #0]
 8004fe4:	f021 0104 	bicge.w	r1, r1, #4
 8004fe8:	6021      	strge	r1, [r4, #0]
 8004fea:	b90e      	cbnz	r6, 8004ff0 <_printf_i+0x114>
 8004fec:	2d00      	cmp	r5, #0
 8004fee:	d04b      	beq.n	8005088 <_printf_i+0x1ac>
 8004ff0:	4615      	mov	r5, r2
 8004ff2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ff6:	fb03 6711 	mls	r7, r3, r1, r6
 8004ffa:	5dc7      	ldrb	r7, [r0, r7]
 8004ffc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005000:	4637      	mov	r7, r6
 8005002:	42bb      	cmp	r3, r7
 8005004:	460e      	mov	r6, r1
 8005006:	d9f4      	bls.n	8004ff2 <_printf_i+0x116>
 8005008:	2b08      	cmp	r3, #8
 800500a:	d10b      	bne.n	8005024 <_printf_i+0x148>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	07de      	lsls	r6, r3, #31
 8005010:	d508      	bpl.n	8005024 <_printf_i+0x148>
 8005012:	6923      	ldr	r3, [r4, #16]
 8005014:	6861      	ldr	r1, [r4, #4]
 8005016:	4299      	cmp	r1, r3
 8005018:	bfde      	ittt	le
 800501a:	2330      	movle	r3, #48	; 0x30
 800501c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005020:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005024:	1b52      	subs	r2, r2, r5
 8005026:	6122      	str	r2, [r4, #16]
 8005028:	f8cd a000 	str.w	sl, [sp]
 800502c:	464b      	mov	r3, r9
 800502e:	aa03      	add	r2, sp, #12
 8005030:	4621      	mov	r1, r4
 8005032:	4640      	mov	r0, r8
 8005034:	f7ff fee4 	bl	8004e00 <_printf_common>
 8005038:	3001      	adds	r0, #1
 800503a:	d14a      	bne.n	80050d2 <_printf_i+0x1f6>
 800503c:	f04f 30ff 	mov.w	r0, #4294967295
 8005040:	b004      	add	sp, #16
 8005042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	f043 0320 	orr.w	r3, r3, #32
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	4833      	ldr	r0, [pc, #204]	; (800511c <_printf_i+0x240>)
 8005050:	2778      	movs	r7, #120	; 0x78
 8005052:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	6829      	ldr	r1, [r5, #0]
 800505a:	061f      	lsls	r7, r3, #24
 800505c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005060:	d402      	bmi.n	8005068 <_printf_i+0x18c>
 8005062:	065f      	lsls	r7, r3, #25
 8005064:	bf48      	it	mi
 8005066:	b2b6      	uxthmi	r6, r6
 8005068:	07df      	lsls	r7, r3, #31
 800506a:	bf48      	it	mi
 800506c:	f043 0320 	orrmi.w	r3, r3, #32
 8005070:	6029      	str	r1, [r5, #0]
 8005072:	bf48      	it	mi
 8005074:	6023      	strmi	r3, [r4, #0]
 8005076:	b91e      	cbnz	r6, 8005080 <_printf_i+0x1a4>
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	f023 0320 	bic.w	r3, r3, #32
 800507e:	6023      	str	r3, [r4, #0]
 8005080:	2310      	movs	r3, #16
 8005082:	e7a7      	b.n	8004fd4 <_printf_i+0xf8>
 8005084:	4824      	ldr	r0, [pc, #144]	; (8005118 <_printf_i+0x23c>)
 8005086:	e7e4      	b.n	8005052 <_printf_i+0x176>
 8005088:	4615      	mov	r5, r2
 800508a:	e7bd      	b.n	8005008 <_printf_i+0x12c>
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	6826      	ldr	r6, [r4, #0]
 8005090:	6961      	ldr	r1, [r4, #20]
 8005092:	1d18      	adds	r0, r3, #4
 8005094:	6028      	str	r0, [r5, #0]
 8005096:	0635      	lsls	r5, r6, #24
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	d501      	bpl.n	80050a0 <_printf_i+0x1c4>
 800509c:	6019      	str	r1, [r3, #0]
 800509e:	e002      	b.n	80050a6 <_printf_i+0x1ca>
 80050a0:	0670      	lsls	r0, r6, #25
 80050a2:	d5fb      	bpl.n	800509c <_printf_i+0x1c0>
 80050a4:	8019      	strh	r1, [r3, #0]
 80050a6:	2300      	movs	r3, #0
 80050a8:	6123      	str	r3, [r4, #16]
 80050aa:	4615      	mov	r5, r2
 80050ac:	e7bc      	b.n	8005028 <_printf_i+0x14c>
 80050ae:	682b      	ldr	r3, [r5, #0]
 80050b0:	1d1a      	adds	r2, r3, #4
 80050b2:	602a      	str	r2, [r5, #0]
 80050b4:	681d      	ldr	r5, [r3, #0]
 80050b6:	6862      	ldr	r2, [r4, #4]
 80050b8:	2100      	movs	r1, #0
 80050ba:	4628      	mov	r0, r5
 80050bc:	f7fb f888 	bl	80001d0 <memchr>
 80050c0:	b108      	cbz	r0, 80050c6 <_printf_i+0x1ea>
 80050c2:	1b40      	subs	r0, r0, r5
 80050c4:	6060      	str	r0, [r4, #4]
 80050c6:	6863      	ldr	r3, [r4, #4]
 80050c8:	6123      	str	r3, [r4, #16]
 80050ca:	2300      	movs	r3, #0
 80050cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050d0:	e7aa      	b.n	8005028 <_printf_i+0x14c>
 80050d2:	6923      	ldr	r3, [r4, #16]
 80050d4:	462a      	mov	r2, r5
 80050d6:	4649      	mov	r1, r9
 80050d8:	4640      	mov	r0, r8
 80050da:	47d0      	blx	sl
 80050dc:	3001      	adds	r0, #1
 80050de:	d0ad      	beq.n	800503c <_printf_i+0x160>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	079b      	lsls	r3, r3, #30
 80050e4:	d413      	bmi.n	800510e <_printf_i+0x232>
 80050e6:	68e0      	ldr	r0, [r4, #12]
 80050e8:	9b03      	ldr	r3, [sp, #12]
 80050ea:	4298      	cmp	r0, r3
 80050ec:	bfb8      	it	lt
 80050ee:	4618      	movlt	r0, r3
 80050f0:	e7a6      	b.n	8005040 <_printf_i+0x164>
 80050f2:	2301      	movs	r3, #1
 80050f4:	4632      	mov	r2, r6
 80050f6:	4649      	mov	r1, r9
 80050f8:	4640      	mov	r0, r8
 80050fa:	47d0      	blx	sl
 80050fc:	3001      	adds	r0, #1
 80050fe:	d09d      	beq.n	800503c <_printf_i+0x160>
 8005100:	3501      	adds	r5, #1
 8005102:	68e3      	ldr	r3, [r4, #12]
 8005104:	9903      	ldr	r1, [sp, #12]
 8005106:	1a5b      	subs	r3, r3, r1
 8005108:	42ab      	cmp	r3, r5
 800510a:	dcf2      	bgt.n	80050f2 <_printf_i+0x216>
 800510c:	e7eb      	b.n	80050e6 <_printf_i+0x20a>
 800510e:	2500      	movs	r5, #0
 8005110:	f104 0619 	add.w	r6, r4, #25
 8005114:	e7f5      	b.n	8005102 <_printf_i+0x226>
 8005116:	bf00      	nop
 8005118:	08005589 	.word	0x08005589
 800511c:	0800559a 	.word	0x0800559a

08005120 <__sflush_r>:
 8005120:	898a      	ldrh	r2, [r1, #12]
 8005122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005126:	4605      	mov	r5, r0
 8005128:	0710      	lsls	r0, r2, #28
 800512a:	460c      	mov	r4, r1
 800512c:	d458      	bmi.n	80051e0 <__sflush_r+0xc0>
 800512e:	684b      	ldr	r3, [r1, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	dc05      	bgt.n	8005140 <__sflush_r+0x20>
 8005134:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	dc02      	bgt.n	8005140 <__sflush_r+0x20>
 800513a:	2000      	movs	r0, #0
 800513c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005142:	2e00      	cmp	r6, #0
 8005144:	d0f9      	beq.n	800513a <__sflush_r+0x1a>
 8005146:	2300      	movs	r3, #0
 8005148:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800514c:	682f      	ldr	r7, [r5, #0]
 800514e:	6a21      	ldr	r1, [r4, #32]
 8005150:	602b      	str	r3, [r5, #0]
 8005152:	d032      	beq.n	80051ba <__sflush_r+0x9a>
 8005154:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005156:	89a3      	ldrh	r3, [r4, #12]
 8005158:	075a      	lsls	r2, r3, #29
 800515a:	d505      	bpl.n	8005168 <__sflush_r+0x48>
 800515c:	6863      	ldr	r3, [r4, #4]
 800515e:	1ac0      	subs	r0, r0, r3
 8005160:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005162:	b10b      	cbz	r3, 8005168 <__sflush_r+0x48>
 8005164:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005166:	1ac0      	subs	r0, r0, r3
 8005168:	2300      	movs	r3, #0
 800516a:	4602      	mov	r2, r0
 800516c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800516e:	6a21      	ldr	r1, [r4, #32]
 8005170:	4628      	mov	r0, r5
 8005172:	47b0      	blx	r6
 8005174:	1c43      	adds	r3, r0, #1
 8005176:	89a3      	ldrh	r3, [r4, #12]
 8005178:	d106      	bne.n	8005188 <__sflush_r+0x68>
 800517a:	6829      	ldr	r1, [r5, #0]
 800517c:	291d      	cmp	r1, #29
 800517e:	d82b      	bhi.n	80051d8 <__sflush_r+0xb8>
 8005180:	4a29      	ldr	r2, [pc, #164]	; (8005228 <__sflush_r+0x108>)
 8005182:	410a      	asrs	r2, r1
 8005184:	07d6      	lsls	r6, r2, #31
 8005186:	d427      	bmi.n	80051d8 <__sflush_r+0xb8>
 8005188:	2200      	movs	r2, #0
 800518a:	6062      	str	r2, [r4, #4]
 800518c:	04d9      	lsls	r1, r3, #19
 800518e:	6922      	ldr	r2, [r4, #16]
 8005190:	6022      	str	r2, [r4, #0]
 8005192:	d504      	bpl.n	800519e <__sflush_r+0x7e>
 8005194:	1c42      	adds	r2, r0, #1
 8005196:	d101      	bne.n	800519c <__sflush_r+0x7c>
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	b903      	cbnz	r3, 800519e <__sflush_r+0x7e>
 800519c:	6560      	str	r0, [r4, #84]	; 0x54
 800519e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051a0:	602f      	str	r7, [r5, #0]
 80051a2:	2900      	cmp	r1, #0
 80051a4:	d0c9      	beq.n	800513a <__sflush_r+0x1a>
 80051a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051aa:	4299      	cmp	r1, r3
 80051ac:	d002      	beq.n	80051b4 <__sflush_r+0x94>
 80051ae:	4628      	mov	r0, r5
 80051b0:	f7ff fbea 	bl	8004988 <_free_r>
 80051b4:	2000      	movs	r0, #0
 80051b6:	6360      	str	r0, [r4, #52]	; 0x34
 80051b8:	e7c0      	b.n	800513c <__sflush_r+0x1c>
 80051ba:	2301      	movs	r3, #1
 80051bc:	4628      	mov	r0, r5
 80051be:	47b0      	blx	r6
 80051c0:	1c41      	adds	r1, r0, #1
 80051c2:	d1c8      	bne.n	8005156 <__sflush_r+0x36>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0c5      	beq.n	8005156 <__sflush_r+0x36>
 80051ca:	2b1d      	cmp	r3, #29
 80051cc:	d001      	beq.n	80051d2 <__sflush_r+0xb2>
 80051ce:	2b16      	cmp	r3, #22
 80051d0:	d101      	bne.n	80051d6 <__sflush_r+0xb6>
 80051d2:	602f      	str	r7, [r5, #0]
 80051d4:	e7b1      	b.n	800513a <__sflush_r+0x1a>
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051dc:	81a3      	strh	r3, [r4, #12]
 80051de:	e7ad      	b.n	800513c <__sflush_r+0x1c>
 80051e0:	690f      	ldr	r7, [r1, #16]
 80051e2:	2f00      	cmp	r7, #0
 80051e4:	d0a9      	beq.n	800513a <__sflush_r+0x1a>
 80051e6:	0793      	lsls	r3, r2, #30
 80051e8:	680e      	ldr	r6, [r1, #0]
 80051ea:	bf08      	it	eq
 80051ec:	694b      	ldreq	r3, [r1, #20]
 80051ee:	600f      	str	r7, [r1, #0]
 80051f0:	bf18      	it	ne
 80051f2:	2300      	movne	r3, #0
 80051f4:	eba6 0807 	sub.w	r8, r6, r7
 80051f8:	608b      	str	r3, [r1, #8]
 80051fa:	f1b8 0f00 	cmp.w	r8, #0
 80051fe:	dd9c      	ble.n	800513a <__sflush_r+0x1a>
 8005200:	6a21      	ldr	r1, [r4, #32]
 8005202:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005204:	4643      	mov	r3, r8
 8005206:	463a      	mov	r2, r7
 8005208:	4628      	mov	r0, r5
 800520a:	47b0      	blx	r6
 800520c:	2800      	cmp	r0, #0
 800520e:	dc06      	bgt.n	800521e <__sflush_r+0xfe>
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005216:	81a3      	strh	r3, [r4, #12]
 8005218:	f04f 30ff 	mov.w	r0, #4294967295
 800521c:	e78e      	b.n	800513c <__sflush_r+0x1c>
 800521e:	4407      	add	r7, r0
 8005220:	eba8 0800 	sub.w	r8, r8, r0
 8005224:	e7e9      	b.n	80051fa <__sflush_r+0xda>
 8005226:	bf00      	nop
 8005228:	dfbffffe 	.word	0xdfbffffe

0800522c <_fflush_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	690b      	ldr	r3, [r1, #16]
 8005230:	4605      	mov	r5, r0
 8005232:	460c      	mov	r4, r1
 8005234:	b913      	cbnz	r3, 800523c <_fflush_r+0x10>
 8005236:	2500      	movs	r5, #0
 8005238:	4628      	mov	r0, r5
 800523a:	bd38      	pop	{r3, r4, r5, pc}
 800523c:	b118      	cbz	r0, 8005246 <_fflush_r+0x1a>
 800523e:	6a03      	ldr	r3, [r0, #32]
 8005240:	b90b      	cbnz	r3, 8005246 <_fflush_r+0x1a>
 8005242:	f7ff fa99 	bl	8004778 <__sinit>
 8005246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f3      	beq.n	8005236 <_fflush_r+0xa>
 800524e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005250:	07d0      	lsls	r0, r2, #31
 8005252:	d404      	bmi.n	800525e <_fflush_r+0x32>
 8005254:	0599      	lsls	r1, r3, #22
 8005256:	d402      	bmi.n	800525e <_fflush_r+0x32>
 8005258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800525a:	f7ff fb92 	bl	8004982 <__retarget_lock_acquire_recursive>
 800525e:	4628      	mov	r0, r5
 8005260:	4621      	mov	r1, r4
 8005262:	f7ff ff5d 	bl	8005120 <__sflush_r>
 8005266:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005268:	07da      	lsls	r2, r3, #31
 800526a:	4605      	mov	r5, r0
 800526c:	d4e4      	bmi.n	8005238 <_fflush_r+0xc>
 800526e:	89a3      	ldrh	r3, [r4, #12]
 8005270:	059b      	lsls	r3, r3, #22
 8005272:	d4e1      	bmi.n	8005238 <_fflush_r+0xc>
 8005274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005276:	f7ff fb85 	bl	8004984 <__retarget_lock_release_recursive>
 800527a:	e7dd      	b.n	8005238 <_fflush_r+0xc>

0800527c <__swbuf_r>:
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527e:	460e      	mov	r6, r1
 8005280:	4614      	mov	r4, r2
 8005282:	4605      	mov	r5, r0
 8005284:	b118      	cbz	r0, 800528e <__swbuf_r+0x12>
 8005286:	6a03      	ldr	r3, [r0, #32]
 8005288:	b90b      	cbnz	r3, 800528e <__swbuf_r+0x12>
 800528a:	f7ff fa75 	bl	8004778 <__sinit>
 800528e:	69a3      	ldr	r3, [r4, #24]
 8005290:	60a3      	str	r3, [r4, #8]
 8005292:	89a3      	ldrh	r3, [r4, #12]
 8005294:	071a      	lsls	r2, r3, #28
 8005296:	d525      	bpl.n	80052e4 <__swbuf_r+0x68>
 8005298:	6923      	ldr	r3, [r4, #16]
 800529a:	b31b      	cbz	r3, 80052e4 <__swbuf_r+0x68>
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	6922      	ldr	r2, [r4, #16]
 80052a0:	1a98      	subs	r0, r3, r2
 80052a2:	6963      	ldr	r3, [r4, #20]
 80052a4:	b2f6      	uxtb	r6, r6
 80052a6:	4283      	cmp	r3, r0
 80052a8:	4637      	mov	r7, r6
 80052aa:	dc04      	bgt.n	80052b6 <__swbuf_r+0x3a>
 80052ac:	4621      	mov	r1, r4
 80052ae:	4628      	mov	r0, r5
 80052b0:	f7ff ffbc 	bl	800522c <_fflush_r>
 80052b4:	b9e0      	cbnz	r0, 80052f0 <__swbuf_r+0x74>
 80052b6:	68a3      	ldr	r3, [r4, #8]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	60a3      	str	r3, [r4, #8]
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	6022      	str	r2, [r4, #0]
 80052c2:	701e      	strb	r6, [r3, #0]
 80052c4:	6962      	ldr	r2, [r4, #20]
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d004      	beq.n	80052d6 <__swbuf_r+0x5a>
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	07db      	lsls	r3, r3, #31
 80052d0:	d506      	bpl.n	80052e0 <__swbuf_r+0x64>
 80052d2:	2e0a      	cmp	r6, #10
 80052d4:	d104      	bne.n	80052e0 <__swbuf_r+0x64>
 80052d6:	4621      	mov	r1, r4
 80052d8:	4628      	mov	r0, r5
 80052da:	f7ff ffa7 	bl	800522c <_fflush_r>
 80052de:	b938      	cbnz	r0, 80052f0 <__swbuf_r+0x74>
 80052e0:	4638      	mov	r0, r7
 80052e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052e4:	4621      	mov	r1, r4
 80052e6:	4628      	mov	r0, r5
 80052e8:	f000 f806 	bl	80052f8 <__swsetup_r>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d0d5      	beq.n	800529c <__swbuf_r+0x20>
 80052f0:	f04f 37ff 	mov.w	r7, #4294967295
 80052f4:	e7f4      	b.n	80052e0 <__swbuf_r+0x64>
	...

080052f8 <__swsetup_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4b2a      	ldr	r3, [pc, #168]	; (80053a4 <__swsetup_r+0xac>)
 80052fc:	4605      	mov	r5, r0
 80052fe:	6818      	ldr	r0, [r3, #0]
 8005300:	460c      	mov	r4, r1
 8005302:	b118      	cbz	r0, 800530c <__swsetup_r+0x14>
 8005304:	6a03      	ldr	r3, [r0, #32]
 8005306:	b90b      	cbnz	r3, 800530c <__swsetup_r+0x14>
 8005308:	f7ff fa36 	bl	8004778 <__sinit>
 800530c:	89a3      	ldrh	r3, [r4, #12]
 800530e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005312:	0718      	lsls	r0, r3, #28
 8005314:	d422      	bmi.n	800535c <__swsetup_r+0x64>
 8005316:	06d9      	lsls	r1, r3, #27
 8005318:	d407      	bmi.n	800532a <__swsetup_r+0x32>
 800531a:	2309      	movs	r3, #9
 800531c:	602b      	str	r3, [r5, #0]
 800531e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005322:	81a3      	strh	r3, [r4, #12]
 8005324:	f04f 30ff 	mov.w	r0, #4294967295
 8005328:	e034      	b.n	8005394 <__swsetup_r+0x9c>
 800532a:	0758      	lsls	r0, r3, #29
 800532c:	d512      	bpl.n	8005354 <__swsetup_r+0x5c>
 800532e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005330:	b141      	cbz	r1, 8005344 <__swsetup_r+0x4c>
 8005332:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005336:	4299      	cmp	r1, r3
 8005338:	d002      	beq.n	8005340 <__swsetup_r+0x48>
 800533a:	4628      	mov	r0, r5
 800533c:	f7ff fb24 	bl	8004988 <_free_r>
 8005340:	2300      	movs	r3, #0
 8005342:	6363      	str	r3, [r4, #52]	; 0x34
 8005344:	89a3      	ldrh	r3, [r4, #12]
 8005346:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800534a:	81a3      	strh	r3, [r4, #12]
 800534c:	2300      	movs	r3, #0
 800534e:	6063      	str	r3, [r4, #4]
 8005350:	6923      	ldr	r3, [r4, #16]
 8005352:	6023      	str	r3, [r4, #0]
 8005354:	89a3      	ldrh	r3, [r4, #12]
 8005356:	f043 0308 	orr.w	r3, r3, #8
 800535a:	81a3      	strh	r3, [r4, #12]
 800535c:	6923      	ldr	r3, [r4, #16]
 800535e:	b94b      	cbnz	r3, 8005374 <__swsetup_r+0x7c>
 8005360:	89a3      	ldrh	r3, [r4, #12]
 8005362:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800536a:	d003      	beq.n	8005374 <__swsetup_r+0x7c>
 800536c:	4621      	mov	r1, r4
 800536e:	4628      	mov	r0, r5
 8005370:	f000 f850 	bl	8005414 <__smakebuf_r>
 8005374:	89a0      	ldrh	r0, [r4, #12]
 8005376:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800537a:	f010 0301 	ands.w	r3, r0, #1
 800537e:	d00a      	beq.n	8005396 <__swsetup_r+0x9e>
 8005380:	2300      	movs	r3, #0
 8005382:	60a3      	str	r3, [r4, #8]
 8005384:	6963      	ldr	r3, [r4, #20]
 8005386:	425b      	negs	r3, r3
 8005388:	61a3      	str	r3, [r4, #24]
 800538a:	6923      	ldr	r3, [r4, #16]
 800538c:	b943      	cbnz	r3, 80053a0 <__swsetup_r+0xa8>
 800538e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005392:	d1c4      	bne.n	800531e <__swsetup_r+0x26>
 8005394:	bd38      	pop	{r3, r4, r5, pc}
 8005396:	0781      	lsls	r1, r0, #30
 8005398:	bf58      	it	pl
 800539a:	6963      	ldrpl	r3, [r4, #20]
 800539c:	60a3      	str	r3, [r4, #8]
 800539e:	e7f4      	b.n	800538a <__swsetup_r+0x92>
 80053a0:	2000      	movs	r0, #0
 80053a2:	e7f7      	b.n	8005394 <__swsetup_r+0x9c>
 80053a4:	20000064 	.word	0x20000064

080053a8 <_sbrk_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	4d06      	ldr	r5, [pc, #24]	; (80053c4 <_sbrk_r+0x1c>)
 80053ac:	2300      	movs	r3, #0
 80053ae:	4604      	mov	r4, r0
 80053b0:	4608      	mov	r0, r1
 80053b2:	602b      	str	r3, [r5, #0]
 80053b4:	f7fb fbac 	bl	8000b10 <_sbrk>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_sbrk_r+0x1a>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_sbrk_r+0x1a>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	20000300 	.word	0x20000300

080053c8 <__swhatbuf_r>:
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	460c      	mov	r4, r1
 80053cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d0:	2900      	cmp	r1, #0
 80053d2:	b096      	sub	sp, #88	; 0x58
 80053d4:	4615      	mov	r5, r2
 80053d6:	461e      	mov	r6, r3
 80053d8:	da0d      	bge.n	80053f6 <__swhatbuf_r+0x2e>
 80053da:	89a3      	ldrh	r3, [r4, #12]
 80053dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80053e0:	f04f 0100 	mov.w	r1, #0
 80053e4:	bf0c      	ite	eq
 80053e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80053ea:	2340      	movne	r3, #64	; 0x40
 80053ec:	2000      	movs	r0, #0
 80053ee:	6031      	str	r1, [r6, #0]
 80053f0:	602b      	str	r3, [r5, #0]
 80053f2:	b016      	add	sp, #88	; 0x58
 80053f4:	bd70      	pop	{r4, r5, r6, pc}
 80053f6:	466a      	mov	r2, sp
 80053f8:	f000 f848 	bl	800548c <_fstat_r>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	dbec      	blt.n	80053da <__swhatbuf_r+0x12>
 8005400:	9901      	ldr	r1, [sp, #4]
 8005402:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005406:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800540a:	4259      	negs	r1, r3
 800540c:	4159      	adcs	r1, r3
 800540e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005412:	e7eb      	b.n	80053ec <__swhatbuf_r+0x24>

08005414 <__smakebuf_r>:
 8005414:	898b      	ldrh	r3, [r1, #12]
 8005416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005418:	079d      	lsls	r5, r3, #30
 800541a:	4606      	mov	r6, r0
 800541c:	460c      	mov	r4, r1
 800541e:	d507      	bpl.n	8005430 <__smakebuf_r+0x1c>
 8005420:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	6123      	str	r3, [r4, #16]
 8005428:	2301      	movs	r3, #1
 800542a:	6163      	str	r3, [r4, #20]
 800542c:	b002      	add	sp, #8
 800542e:	bd70      	pop	{r4, r5, r6, pc}
 8005430:	ab01      	add	r3, sp, #4
 8005432:	466a      	mov	r2, sp
 8005434:	f7ff ffc8 	bl	80053c8 <__swhatbuf_r>
 8005438:	9900      	ldr	r1, [sp, #0]
 800543a:	4605      	mov	r5, r0
 800543c:	4630      	mov	r0, r6
 800543e:	f7ff fb0f 	bl	8004a60 <_malloc_r>
 8005442:	b948      	cbnz	r0, 8005458 <__smakebuf_r+0x44>
 8005444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005448:	059a      	lsls	r2, r3, #22
 800544a:	d4ef      	bmi.n	800542c <__smakebuf_r+0x18>
 800544c:	f023 0303 	bic.w	r3, r3, #3
 8005450:	f043 0302 	orr.w	r3, r3, #2
 8005454:	81a3      	strh	r3, [r4, #12]
 8005456:	e7e3      	b.n	8005420 <__smakebuf_r+0xc>
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	6020      	str	r0, [r4, #0]
 800545c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005460:	81a3      	strh	r3, [r4, #12]
 8005462:	9b00      	ldr	r3, [sp, #0]
 8005464:	6163      	str	r3, [r4, #20]
 8005466:	9b01      	ldr	r3, [sp, #4]
 8005468:	6120      	str	r0, [r4, #16]
 800546a:	b15b      	cbz	r3, 8005484 <__smakebuf_r+0x70>
 800546c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005470:	4630      	mov	r0, r6
 8005472:	f000 f81d 	bl	80054b0 <_isatty_r>
 8005476:	b128      	cbz	r0, 8005484 <__smakebuf_r+0x70>
 8005478:	89a3      	ldrh	r3, [r4, #12]
 800547a:	f023 0303 	bic.w	r3, r3, #3
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	81a3      	strh	r3, [r4, #12]
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	431d      	orrs	r5, r3
 8005488:	81a5      	strh	r5, [r4, #12]
 800548a:	e7cf      	b.n	800542c <__smakebuf_r+0x18>

0800548c <_fstat_r>:
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	4d07      	ldr	r5, [pc, #28]	; (80054ac <_fstat_r+0x20>)
 8005490:	2300      	movs	r3, #0
 8005492:	4604      	mov	r4, r0
 8005494:	4608      	mov	r0, r1
 8005496:	4611      	mov	r1, r2
 8005498:	602b      	str	r3, [r5, #0]
 800549a:	f7fb fb10 	bl	8000abe <_fstat>
 800549e:	1c43      	adds	r3, r0, #1
 80054a0:	d102      	bne.n	80054a8 <_fstat_r+0x1c>
 80054a2:	682b      	ldr	r3, [r5, #0]
 80054a4:	b103      	cbz	r3, 80054a8 <_fstat_r+0x1c>
 80054a6:	6023      	str	r3, [r4, #0]
 80054a8:	bd38      	pop	{r3, r4, r5, pc}
 80054aa:	bf00      	nop
 80054ac:	20000300 	.word	0x20000300

080054b0 <_isatty_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4d06      	ldr	r5, [pc, #24]	; (80054cc <_isatty_r+0x1c>)
 80054b4:	2300      	movs	r3, #0
 80054b6:	4604      	mov	r4, r0
 80054b8:	4608      	mov	r0, r1
 80054ba:	602b      	str	r3, [r5, #0]
 80054bc:	f7fb fb0f 	bl	8000ade <_isatty>
 80054c0:	1c43      	adds	r3, r0, #1
 80054c2:	d102      	bne.n	80054ca <_isatty_r+0x1a>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	b103      	cbz	r3, 80054ca <_isatty_r+0x1a>
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	bd38      	pop	{r3, r4, r5, pc}
 80054cc:	20000300 	.word	0x20000300

080054d0 <_init>:
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d2:	bf00      	nop
 80054d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d6:	bc08      	pop	{r3}
 80054d8:	469e      	mov	lr, r3
 80054da:	4770      	bx	lr

080054dc <_fini>:
 80054dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054de:	bf00      	nop
 80054e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e2:	bc08      	pop	{r3}
 80054e4:	469e      	mov	lr, r3
 80054e6:	4770      	bx	lr
