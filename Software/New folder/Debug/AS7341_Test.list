
AS7341_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08005964  08005964  00015964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b68  08005b68  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005b68  08005b68  00015b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b70  08005b70  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b70  08005b70  00015b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b74  08005b74  00015b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000068  08005be0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08005be0  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f7a1  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026f7  00000000  00000000  0002f87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e58  00000000  00000000  00031f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af9  00000000  00000000  00032dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c07  00000000  00000000  000338c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a8a  00000000  00000000  0005b4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000edf0e  00000000  00000000  0006df5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041f4  00000000  00000000  0015be68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0016005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800594c 	.word	0x0800594c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800594c 	.word	0x0800594c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <DEV_Delay_ms>:

/**
 * delay x ms
**/
void DEV_Delay_ms(UDOUBLE xms)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f001 f83d 	bl	80015f4 <HAL_Delay>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <GPIO_Config>:


void GPIO_Config(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
    //DEV_GPIO_Mode(INT_PIN, 0);
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <DEV_I2C_Init>:
function:	I2C Function initialization and transfer
parameter:
Info:
******************************************************************************/
void DEV_I2C_Init(uint8_t Add)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	DEV_I2C_Device = 1;
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <DEV_I2C_Init+0x24>)
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]
	I2C_ADDR =  Add;
 80005a0:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <DEV_I2C_Init+0x28>)
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	7013      	strb	r3, [r2, #0]
#endif
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000084 	.word	0x20000084
 80005b8:	20000085 	.word	0x20000085

080005bc <I2C_Write_Byte>:

void I2C_Write_Byte(uint8_t Cmd, uint8_t value)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af04      	add	r7, sp, #16
 80005c2:	4603      	mov	r3, r0
 80005c4:	460a      	mov	r2, r1
 80005c6:	71fb      	strb	r3, [r7, #7]
 80005c8:	4613      	mov	r3, r2
 80005ca:	71bb      	strb	r3, [r7, #6]
#if DEV_I2C 
	UBYTE Buf[1] = {0};
 80005cc:	2300      	movs	r3, #0
 80005ce:	733b      	strb	r3, [r7, #12]
	Buf[0] = value;
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1, I2C_ADDR, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <I2C_Write_Byte+0x40>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b299      	uxth	r1, r3
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	b29a      	uxth	r2, r3
 80005de:	2320      	movs	r3, #32
 80005e0:	9302      	str	r3, [sp, #8]
 80005e2:	2301      	movs	r3, #1
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2301      	movs	r3, #1
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <I2C_Write_Byte+0x44>)
 80005f0:	f001 fb68 	bl	8001cc4 <HAL_I2C_Mem_Write>
#endif
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000085 	.word	0x20000085
 8000600:	20000088 	.word	0x20000088

08000604 <I2C_Read_Byte>:

int I2C_Read_Byte(uint8_t Cmd)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af04      	add	r7, sp, #16
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	UBYTE Buf[1]={0};
 800060e:	2300      	movs	r3, #0
 8000610:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <I2C_Read_Byte+0x3c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	b29b      	uxth	r3, r3
 8000618:	3301      	adds	r3, #1
 800061a:	b299      	uxth	r1, r3
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	b29a      	uxth	r2, r3
 8000620:	2320      	movs	r3, #32
 8000622:	9302      	str	r3, [sp, #8]
 8000624:	2301      	movs	r3, #1
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2301      	movs	r3, #1
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <I2C_Read_Byte+0x40>)
 8000632:	f001 fc5b 	bl	8001eec <HAL_I2C_Mem_Read>
	return Buf[0];
 8000636:	7b3b      	ldrb	r3, [r7, #12]
#endif
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000085 	.word	0x20000085
 8000644:	20000088 	.word	0x20000088

08000648 <DEV_ModuleInit>:
function:	Module Initialize, the library and initialize the pins, SPI protocol
parameter:
Info:
******************************************************************************/
UBYTE DEV_ModuleInit(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
		GPIO_Config();
 800064c:	f7ff ff99 	bl	8000582 <GPIO_Config>
    DEV_I2C_Init(0x39<<1);
 8000650:	2072      	movs	r0, #114	; 0x72
 8000652:	f7ff ff9d 	bl	8000590 <DEV_I2C_Init>
    return 0;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	bd80      	pop	{r7, pc}

0800065c <AS7341_Read_Byte>:
parameter:  
            Addr: Register address
Info:
******************************************************************************/
static UBYTE AS7341_Read_Byte(UBYTE Addr)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
    return I2C_Read_Byte(Addr);
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffcb 	bl	8000604 <I2C_Read_Byte>
 800066e:	4603      	mov	r3, r0
 8000670:	b2db      	uxtb	r3, r3
}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <AS7341_Write_Byte>:
            Addr: Register address
           Value: Write to the value of the register
Info:
******************************************************************************/
static void AS7341_Write_Byte(UBYTE Addr, UBYTE Value)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b082      	sub	sp, #8
 800067e:	af00      	add	r7, sp, #0
 8000680:	4603      	mov	r3, r0
 8000682:	460a      	mov	r2, r1
 8000684:	71fb      	strb	r3, [r7, #7]
 8000686:	4613      	mov	r3, r2
 8000688:	71bb      	strb	r3, [r7, #6]
    I2C_Write_Byte(Addr, Value);
 800068a:	79ba      	ldrb	r2, [r7, #6]
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	4611      	mov	r1, r2
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ff93 	bl	80005bc <I2C_Write_Byte>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <AS7341_Init>:
function:	AS7341 Initialization
parameter:
Info:
******************************************************************************/
UBYTE AS7341_Init(eMode_t mode)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
	DEV_I2C_Init(AS7341_ADDRESS<<1);//8-bit address
 80006aa:	2072      	movs	r0, #114	; 0x72
 80006ac:	f7ff ff70 	bl	8000590 <DEV_I2C_Init>
    //printf("ID = 0x%x\r\n",AS7341_Read_Byte(AS7341_ID));//get AS7341 id	
	AS7341_Enable(true);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 f80b 	bl	80006cc <AS7341_Enable>
	measureMode=mode;
 80006b6:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <AS7341_Init+0x28>)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	7013      	strb	r3, [r2, #0]
	return 0;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000086 	.word	0x20000086

080006cc <AS7341_Enable>:
/******************************************************************************
function： enable PON
info：	power on
******************************************************************************/
void AS7341_Enable(int flag)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	UBYTE data;
	data=AS7341_Read_Byte(AS7341_ENABLE);
 80006d4:	2080      	movs	r0, #128	; 0x80
 80006d6:	f7ff ffc1 	bl	800065c <AS7341_Read_Byte>
 80006da:	4603      	mov	r3, r0
 80006dc:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d104      	bne.n	80006ee <AS7341_Enable+0x22>
    data = data | (1<<0);
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	e003      	b.n	80006f6 <AS7341_Enable+0x2a>
    } else {
    data = data & (~1);
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	f023 0301 	bic.w	r3, r3, #1
 80006f4:	73fb      	strb	r3, [r7, #15]
    }
	AS7341_Write_Byte(AS7341_ENABLE,data);
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	4619      	mov	r1, r3
 80006fa:	2080      	movs	r0, #128	; 0x80
 80006fc:	f7ff ffbd 	bl	800067a <AS7341_Write_Byte>
	printf("Initialization is complete !\r\n");
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <AS7341_Enable+0x4c>)
 8000702:	f004 fa27 	bl	8004b54 <puts>
    AS7341_Write_Byte(0x00, 0x30);
 8000706:	2130      	movs	r1, #48	; 0x30
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff ffb6 	bl	800067a <AS7341_Write_Byte>
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	08005964 	.word	0x08005964

0800071c <AS7341_EnableSpectralMeasure>:
/******************************************************************************
function： enable Spectral measure
info：	
******************************************************************************/
void AS7341_EnableSpectralMeasure(int flag)//Enable spectral measurement
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
    UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 8000724:	2080      	movs	r0, #128	; 0x80
 8000726:	f7ff ff99 	bl	800065c <AS7341_Read_Byte>
 800072a:	4603      	mov	r3, r0
 800072c:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d104      	bne.n	800073e <AS7341_EnableSpectralMeasure+0x22>
      data = data | (1<<1);
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	f043 0302 	orr.w	r3, r3, #2
 800073a:	73fb      	strb	r3, [r7, #15]
 800073c:	e003      	b.n	8000746 <AS7341_EnableSpectralMeasure+0x2a>
    } else {
      data = data & (~(1<<1));
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	f023 0302 	bic.w	r3, r3, #2
 8000744:	73fb      	strb	r3, [r7, #15]
    }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	4619      	mov	r1, r3
 800074a:	2080      	movs	r0, #128	; 0x80
 800074c:	f7ff ff95 	bl	800067a <AS7341_Write_Byte>
}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <AS7341_EnableSMUX>:
function： enable SMUX
info：	
******************************************************************************/
void AS7341_EnableSMUX(int flag)//Enable multiplexer
/*The other available channels can be accessed by amultiplexer (SMUX) connecting them to one of the internal ADCs.*/
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 8000760:	2080      	movs	r0, #128	; 0x80
 8000762:	f7ff ff7b 	bl	800065c <AS7341_Read_Byte>
 8000766:	4603      	mov	r3, r0
 8000768:	73fb      	strb	r3, [r7, #15]
  if(flag == true){
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d104      	bne.n	800077a <AS7341_EnableSMUX+0x22>
    data = data | (1<<4);
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	e003      	b.n	8000782 <AS7341_EnableSMUX+0x2a>
  } else {
    data = data & (~(1<<4));
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	f023 0310 	bic.w	r3, r3, #16
 8000780:	73fb      	strb	r3, [r7, #15]
  }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	4619      	mov	r1, r3
 8000786:	2080      	movs	r0, #128	; 0x80
 8000788:	f7ff ff77 	bl	800067a <AS7341_Write_Byte>
}
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <AS7341_Config>:
/******************************************************************************
function:	choose model for spectral measurement
info：	
******************************************************************************/
void AS7341_Config(eMode_t mode)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
  UBYTE data;
  AS7341_SetBank(1);
 800079e:	2001      	movs	r0, #1
 80007a0:	f000 fa5a 	bl	8000c58 <AS7341_SetBank>
  data=AS7341_Read_Byte(AS7341_CONFIG);
 80007a4:	2070      	movs	r0, #112	; 0x70
 80007a6:	f7ff ff59 	bl	800065c <AS7341_Read_Byte>
 80007aa:	4603      	mov	r3, r0
 80007ac:	73fb      	strb	r3, [r7, #15]
  switch(mode){
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	d015      	beq.n	80007e0 <AS7341_Config+0x4c>
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	dc18      	bgt.n	80007ea <AS7341_Config+0x56>
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d002      	beq.n	80007c2 <AS7341_Config+0x2e>
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d005      	beq.n	80007cc <AS7341_Config+0x38>
	break;
    case eSynd : {
      data = (data & (~3)) | eSynd;
    };
	break;
    default : break;
 80007c0:	e013      	b.n	80007ea <AS7341_Config+0x56>
      data = (data & (~3)) | eSpm;
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	f023 0303 	bic.w	r3, r3, #3
 80007c8:	73fb      	strb	r3, [r7, #15]
	break;
 80007ca:	e00f      	b.n	80007ec <AS7341_Config+0x58>
      data = (data & (~3)) | eSyns;
 80007cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d0:	f023 0303 	bic.w	r3, r3, #3
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	73fb      	strb	r3, [r7, #15]
	break;
 80007de:	e005      	b.n	80007ec <AS7341_Config+0x58>
      data = (data & (~3)) | eSynd;
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	f043 0303 	orr.w	r3, r3, #3
 80007e6:	73fb      	strb	r3, [r7, #15]
	break;
 80007e8:	e000      	b.n	80007ec <AS7341_Config+0x58>
    default : break;
 80007ea:	bf00      	nop
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	4619      	mov	r1, r3
 80007f0:	2070      	movs	r0, #112	; 0x70
 80007f2:	f7ff ff42 	bl	800067a <AS7341_Write_Byte>
  AS7341_SetBank(0);
 80007f6:	2000      	movs	r0, #0
 80007f8:	f000 fa2e 	bl	8000c58 <AS7341_SetBank>
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <F1F4_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F1-4, Clear and NIR
info：	
******************************************************************************/
void F1F4_Clear_NIR() 
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x30); 
 8000808:	2130      	movs	r1, #48	; 0x30
 800080a:	2000      	movs	r0, #0
 800080c:	f7ff ff35 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x01); 
 8000810:	2101      	movs	r1, #1
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff ff31 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 8000818:	2100      	movs	r1, #0
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff ff2d 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x00); 
 8000820:	2100      	movs	r1, #0
 8000822:	2003      	movs	r0, #3
 8000824:	f7ff ff29 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x00); 
 8000828:	2100      	movs	r1, #0
 800082a:	2004      	movs	r0, #4
 800082c:	f7ff ff25 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x42); 
 8000830:	2142      	movs	r1, #66	; 0x42
 8000832:	2005      	movs	r0, #5
 8000834:	f7ff ff21 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x00); 
 8000838:	2100      	movs	r1, #0
 800083a:	2006      	movs	r0, #6
 800083c:	f7ff ff1d 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x00); 
 8000840:	2100      	movs	r1, #0
 8000842:	2007      	movs	r0, #7
 8000844:	f7ff ff19 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 8000848:	2150      	movs	r1, #80	; 0x50
 800084a:	2008      	movs	r0, #8
 800084c:	f7ff ff15 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x00); 
 8000850:	2100      	movs	r1, #0
 8000852:	2009      	movs	r0, #9
 8000854:	f7ff ff11 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x00); 
 8000858:	2100      	movs	r1, #0
 800085a:	200a      	movs	r0, #10
 800085c:	f7ff ff0d 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 8000860:	2100      	movs	r1, #0
 8000862:	200b      	movs	r0, #11
 8000864:	f7ff ff09 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x20); 
 8000868:	2120      	movs	r1, #32
 800086a:	200c      	movs	r0, #12
 800086c:	f7ff ff05 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x04); 
 8000870:	2104      	movs	r1, #4
 8000872:	200d      	movs	r0, #13
 8000874:	f7ff ff01 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x00); 
 8000878:	2100      	movs	r1, #0
 800087a:	200e      	movs	r0, #14
 800087c:	f7ff fefd 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x30); 
 8000880:	2130      	movs	r1, #48	; 0x30
 8000882:	200f      	movs	r0, #15
 8000884:	f7ff fef9 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x01); 
 8000888:	2101      	movs	r1, #1
 800088a:	2010      	movs	r0, #16
 800088c:	f7ff fef5 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 8000890:	2150      	movs	r1, #80	; 0x50
 8000892:	2011      	movs	r0, #17
 8000894:	f7ff fef1 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 8000898:	2100      	movs	r1, #0
 800089a:	2012      	movs	r0, #18
 800089c:	f7ff feed 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 80008a0:	2106      	movs	r1, #6
 80008a2:	2013      	movs	r0, #19
 80008a4:	f7ff fee9 	bl	800067a <AS7341_Write_Byte>
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <F5F8_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F5-8, Clear and NIR
info：	
******************************************************************************/
void F5F8_Clear_NIR() 
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x00); 
 80008b0:	2100      	movs	r1, #0
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff fee1 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x00); 
 80008b8:	2100      	movs	r1, #0
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff fedd 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 80008c0:	2100      	movs	r1, #0
 80008c2:	2002      	movs	r0, #2
 80008c4:	f7ff fed9 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x40); 
 80008c8:	2140      	movs	r1, #64	; 0x40
 80008ca:	2003      	movs	r0, #3
 80008cc:	f7ff fed5 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x02); 
 80008d0:	2102      	movs	r1, #2
 80008d2:	2004      	movs	r0, #4
 80008d4:	f7ff fed1 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x00); 
 80008d8:	2100      	movs	r1, #0
 80008da:	2005      	movs	r0, #5
 80008dc:	f7ff fecd 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x10); 
 80008e0:	2110      	movs	r1, #16
 80008e2:	2006      	movs	r0, #6
 80008e4:	f7ff fec9 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x03); 
 80008e8:	2103      	movs	r1, #3
 80008ea:	2007      	movs	r0, #7
 80008ec:	f7ff fec5 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 80008f0:	2150      	movs	r1, #80	; 0x50
 80008f2:	2008      	movs	r0, #8
 80008f4:	f7ff fec1 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x10); 
 80008f8:	2110      	movs	r1, #16
 80008fa:	2009      	movs	r0, #9
 80008fc:	f7ff febd 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x03); 
 8000900:	2103      	movs	r1, #3
 8000902:	200a      	movs	r0, #10
 8000904:	f7ff feb9 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 8000908:	2100      	movs	r1, #0
 800090a:	200b      	movs	r0, #11
 800090c:	f7ff feb5 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x00); 
 8000910:	2100      	movs	r1, #0
 8000912:	200c      	movs	r0, #12
 8000914:	f7ff feb1 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x00); 
 8000918:	2100      	movs	r1, #0
 800091a:	200d      	movs	r0, #13
 800091c:	f7ff fead 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x24); 
 8000920:	2124      	movs	r1, #36	; 0x24
 8000922:	200e      	movs	r0, #14
 8000924:	f7ff fea9 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x00); 
 8000928:	2100      	movs	r1, #0
 800092a:	200f      	movs	r0, #15
 800092c:	f7ff fea5 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x00); 
 8000930:	2100      	movs	r1, #0
 8000932:	2010      	movs	r0, #16
 8000934:	f7ff fea1 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 8000938:	2150      	movs	r1, #80	; 0x50
 800093a:	2011      	movs	r0, #17
 800093c:	f7ff fe9d 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 8000940:	2100      	movs	r1, #0
 8000942:	2012      	movs	r0, #18
 8000944:	f7ff fe99 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 8000948:	2106      	movs	r1, #6
 800094a:	2013      	movs	r0, #19
 800094c:	f7ff fe95 	bl	800067a <AS7341_Write_Byte>
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <AS7341_startMeasure>:
/******************************************************************************
function:	Start the measurement
info：		This function only handles SPM and SYNS modes.
******************************************************************************/
void AS7341_startMeasure(eChChoose_t mode)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	  UBYTE data=0;
 800095e:	2300      	movs	r3, #0
 8000960:	73fb      	strb	r3, [r7, #15]
	  data = AS7341_Read_Byte(AS7341_CFG_0);  
 8000962:	20a9      	movs	r0, #169	; 0xa9
 8000964:	f7ff fe7a 	bl	800065c <AS7341_Read_Byte>
 8000968:	4603      	mov	r3, r0
 800096a:	73fb      	strb	r3, [r7, #15]
	  data = data & (~(1<<4));
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	f023 0310 	bic.w	r3, r3, #16
 8000972:	73fb      	strb	r3, [r7, #15]

	  AS7341_Write_Byte(AS7341_CFG_0,data);
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	4619      	mov	r1, r3
 8000978:	20a9      	movs	r0, #169	; 0xa9
 800097a:	f7ff fe7e 	bl	800067a <AS7341_Write_Byte>
	  
	  AS7341_EnableSpectralMeasure(false);
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff fecc 	bl	800071c <AS7341_EnableSpectralMeasure>
	  AS7341_Write_Byte(0xAF,0x10);//SMUX Command config
 8000984:	2110      	movs	r1, #16
 8000986:	20af      	movs	r0, #175	; 0xaf
 8000988:	f7ff fe77 	bl	800067a <AS7341_Write_Byte>
	  
	  if(mode  == eF1F4ClearNIR)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d102      	bne.n	8000998 <AS7341_startMeasure+0x44>
      F1F4_Clear_NIR();
 8000992:	f7ff ff37 	bl	8000804 <F1F4_Clear_NIR>
 8000996:	e004      	b.n	80009a2 <AS7341_startMeasure+0x4e>
	  else if(mode  == eF5F8ClearNIR)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d101      	bne.n	80009a2 <AS7341_startMeasure+0x4e>
	  F5F8_Clear_NIR();
 800099e:	f7ff ff85 	bl	80008ac <F5F8_Clear_NIR>
	  AS7341_EnableSMUX(true);
 80009a2:	2001      	movs	r0, #1
 80009a4:	f7ff fed8 	bl	8000758 <AS7341_EnableSMUX>
	  if(measureMode == eSyns){
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <AS7341_startMeasure+0xa0>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d106      	bne.n	80009be <AS7341_startMeasure+0x6a>
	  AS7341_SetGpioMode(INPUT);
 80009b0:	2000      	movs	r0, #0
 80009b2:	f000 f8c0 	bl	8000b36 <AS7341_SetGpioMode>
      AS7341_Config(eSyns);
 80009b6:	2001      	movs	r0, #1
 80009b8:	f7ff feec 	bl	8000794 <AS7341_Config>
 80009bc:	e006      	b.n	80009cc <AS7341_startMeasure+0x78>
      }
	  else if(measureMode == eSpm){
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <AS7341_startMeasure+0xa0>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d102      	bne.n	80009cc <AS7341_startMeasure+0x78>
      AS7341_Config(eSpm);
 80009c6:	2000      	movs	r0, #0
 80009c8:	f7ff fee4 	bl	8000794 <AS7341_Config>
	  }
	  AS7341_EnableSpectralMeasure(true);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f7ff fea5 	bl	800071c <AS7341_EnableSpectralMeasure>
      if(measureMode == eSpm){
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <AS7341_startMeasure+0xa0>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d108      	bne.n	80009ec <AS7341_startMeasure+0x98>
        while(!AS7341_MeasureComplete()){
 80009da:	e002      	b.n	80009e2 <AS7341_startMeasure+0x8e>
        DEV_Delay_ms(1);
 80009dc:	2001      	movs	r0, #1
 80009de:	f7ff fdc5 	bl	800056c <DEV_Delay_ms>
        while(!AS7341_MeasureComplete()){
 80009e2:	f000 f809 	bl	80009f8 <AS7341_MeasureComplete>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d0f7      	beq.n	80009dc <AS7341_startMeasure+0x88>
        }
      }
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000086 	.word	0x20000086

080009f8 <AS7341_MeasureComplete>:
/******************************************************************************
function:  Determine whether the measurement is complete
info：		
******************************************************************************/

int AS7341_MeasureComplete(){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
	UBYTE status;
	status = AS7341_Read_Byte(AS7341_STATUS_2); 
 80009fe:	20a3      	movs	r0, #163	; 0xa3
 8000a00:	f7ff fe2c 	bl	800065c <AS7341_Read_Byte>
 8000a04:	4603      	mov	r3, r0
 8000a06:	71fb      	strb	r3, [r7, #7]
	if((status & (1<<6))){
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <AS7341_MeasureComplete+0x1e>
		return true;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e000      	b.n	8000a18 <AS7341_MeasureComplete+0x20>
	}
	else{
		return false;
 8000a16:	2300      	movs	r3, #0
	}
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <AS7341_GetChannelData>:
/******************************************************************************
function:  Gets data for all channels
info：		
******************************************************************************/
UWORD AS7341_GetChannelData(UBYTE channel)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
  UWORD data[2];
  UWORD channelData = 0x0000;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	81fb      	strh	r3, [r7, #14]
  data[0] = AS7341_Read_Byte(AS7341_CH0_DATA_L + channel*2); 
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	3b6b      	subs	r3, #107	; 0x6b
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fe0f 	bl	800065c <AS7341_Read_Byte>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	813b      	strh	r3, [r7, #8]
  data[1] = AS7341_Read_Byte(AS7341_CH0_DATA_H + channel*2); 
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	334b      	adds	r3, #75	; 0x4b
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fe04 	bl	800065c <AS7341_Read_Byte>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	817b      	strh	r3, [r7, #10]
  channelData = data[1];
 8000a5a:	897b      	ldrh	r3, [r7, #10]
 8000a5c:	81fb      	strh	r3, [r7, #14]
  channelData = (channelData<<8) | data[0];
 8000a5e:	89fb      	ldrh	r3, [r7, #14]
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	893b      	ldrh	r3, [r7, #8]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	81fb      	strh	r3, [r7, #14]
  DEV_Delay_ms(50);
 8000a6e:	2032      	movs	r0, #50	; 0x32
 8000a70:	f7ff fd7c 	bl	800056c <DEV_Delay_ms>
  return channelData;
 8000a74:	89fb      	ldrh	r3, [r7, #14]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <AS7341_ReadSpectralDataOne>:
function:  Use SMUX to read data from the low channel
info：		
******************************************************************************/

sModeOneData_t AS7341_ReadSpectralDataOne()
{
 8000a7e:	b590      	push	{r4, r7, lr}
 8000a80:	b087      	sub	sp, #28
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
  sModeOneData_t data;
  data.channel1 = AS7341_GetChannelData(0);
 8000a86:	2000      	movs	r0, #0
 8000a88:	f7ff ffca 	bl	8000a20 <AS7341_GetChannelData>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	81bb      	strh	r3, [r7, #12]
  data.channel2 = AS7341_GetChannelData(1);
 8000a90:	2001      	movs	r0, #1
 8000a92:	f7ff ffc5 	bl	8000a20 <AS7341_GetChannelData>
 8000a96:	4603      	mov	r3, r0
 8000a98:	81fb      	strh	r3, [r7, #14]
  data.channel3 = AS7341_GetChannelData(2);
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	f7ff ffc0 	bl	8000a20 <AS7341_GetChannelData>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	823b      	strh	r3, [r7, #16]
  data.channel4 = AS7341_GetChannelData(3);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f7ff ffbb 	bl	8000a20 <AS7341_GetChannelData>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 8000aae:	2004      	movs	r0, #4
 8000ab0:	f7ff ffb6 	bl	8000a20 <AS7341_GetChannelData>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 8000ab8:	2005      	movs	r0, #5
 8000aba:	f7ff ffb1 	bl	8000a20 <AS7341_GetChannelData>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	82fb      	strh	r3, [r7, #22]
  return data;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	461c      	mov	r4, r3
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000acc:	6020      	str	r0, [r4, #0]
 8000ace:	6061      	str	r1, [r4, #4]
 8000ad0:	60a2      	str	r2, [r4, #8]
}
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	371c      	adds	r7, #28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd90      	pop	{r4, r7, pc}

08000ada <AS7341_ReadSpectralDataTwo>:
function:  Use SMUX to read data from the high channel
info：		
******************************************************************************/

sModeTwoData_t AS7341_ReadSpectralDataTwo()
{
 8000ada:	b590      	push	{r4, r7, lr}
 8000adc:	b087      	sub	sp, #28
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  sModeTwoData_t data;
  data.channel5 = AS7341_GetChannelData(0);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f7ff ff9c 	bl	8000a20 <AS7341_GetChannelData>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	81bb      	strh	r3, [r7, #12]
  data.channel6 = AS7341_GetChannelData(1);
 8000aec:	2001      	movs	r0, #1
 8000aee:	f7ff ff97 	bl	8000a20 <AS7341_GetChannelData>
 8000af2:	4603      	mov	r3, r0
 8000af4:	81fb      	strh	r3, [r7, #14]
  data.channel7 = AS7341_GetChannelData(2);
 8000af6:	2002      	movs	r0, #2
 8000af8:	f7ff ff92 	bl	8000a20 <AS7341_GetChannelData>
 8000afc:	4603      	mov	r3, r0
 8000afe:	823b      	strh	r3, [r7, #16]
  data.channel8 = AS7341_GetChannelData(3);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f7ff ff8d 	bl	8000a20 <AS7341_GetChannelData>
 8000b06:	4603      	mov	r3, r0
 8000b08:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 8000b0a:	2004      	movs	r0, #4
 8000b0c:	f7ff ff88 	bl	8000a20 <AS7341_GetChannelData>
 8000b10:	4603      	mov	r3, r0
 8000b12:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 8000b14:	2005      	movs	r0, #5
 8000b16:	f7ff ff83 	bl	8000a20 <AS7341_GetChannelData>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	82fb      	strh	r3, [r7, #22]
  return data;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	461c      	mov	r4, r3
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b28:	6020      	str	r0, [r4, #0]
 8000b2a:	6061      	str	r1, [r4, #4]
 8000b2c:	60a2      	str	r2, [r4, #8]
}
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	371c      	adds	r7, #28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd90      	pop	{r4, r7, pc}

08000b36 <AS7341_SetGpioMode>:
/******************************************************************************
function:	Set GPIO to input or output mode
info：
******************************************************************************/
void AS7341_SetGpioMode(UBYTE mode)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b084      	sub	sp, #16
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	71fb      	strb	r3, [r7, #7]
  UBYTE data;

  data = AS7341_Read_Byte(AS7341_GPIO_2);  
 8000b40:	20be      	movs	r0, #190	; 0xbe
 8000b42:	f7ff fd8b 	bl	800065c <AS7341_Read_Byte>
 8000b46:	4603      	mov	r3, r0
 8000b48:	73fb      	strb	r3, [r7, #15]
  if(mode == INPUT){
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d103      	bne.n	8000b58 <AS7341_SetGpioMode+0x22>
     data = data | (1<<2);
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	73fb      	strb	r3, [r7, #15]
  }
  
  if(mode == OUTPUT){
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d103      	bne.n	8000b66 <AS7341_SetGpioMode+0x30>
     data = data & (~(1<<2));
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
 8000b60:	f023 0304 	bic.w	r3, r3, #4
 8000b64:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_GPIO_2,data);
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	20be      	movs	r0, #190	; 0xbe
 8000b6c:	f7ff fd85 	bl	800067a <AS7341_Write_Byte>
}
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <AS7341_ATIME_config>:
/******************************************************************************
function:	Configure the ATIME register
info：
******************************************************************************/
void AS7341_ATIME_config(UBYTE value)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_ATIME,value);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4619      	mov	r1, r3
 8000b86:	2081      	movs	r0, #129	; 0x81
 8000b88:	f7ff fd77 	bl	800067a <AS7341_Write_Byte>
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <AS7341_ASTEP_config>:
/******************************************************************************
function:	Configure the ASTEP register
info：
******************************************************************************/
void AS7341_ASTEP_config(UWORD value)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]
  UBYTE highValue,lowValue;
  lowValue = value & 0x00ff;
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	73fb      	strb	r3, [r7, #15]
  highValue = value >> 8 ;
 8000ba2:	88fb      	ldrh	r3, [r7, #6]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	73bb      	strb	r3, [r7, #14]
  AS7341_Write_Byte(AS7341_ASTEP_L,lowValue);
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	4619      	mov	r1, r3
 8000bae:	20ca      	movs	r0, #202	; 0xca
 8000bb0:	f7ff fd63 	bl	800067a <AS7341_Write_Byte>
  AS7341_Write_Byte(AS7341_ASTEP_H,highValue);
 8000bb4:	7bbb      	ldrb	r3, [r7, #14]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	20cb      	movs	r0, #203	; 0xcb
 8000bba:	f7ff fd5e 	bl	800067a <AS7341_Write_Byte>
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <AS7341_AGAIN_config>:
function:	Configure the AGAIN register
value:    0    1    2    3    4    5      6     7     8     9      10
gain:   X0.5 | X1 | X2 | X4 | X8 | X16 | X32 | X64 | X128 | X256 | X512
******************************************************************************/
void AS7341_AGAIN_config(UBYTE value)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	71fb      	strb	r3, [r7, #7]
  if(value > 10) value = 10;
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	2b0a      	cmp	r3, #10
 8000bd4:	d901      	bls.n	8000bda <AS7341_AGAIN_config+0x14>
 8000bd6:	230a      	movs	r3, #10
 8000bd8:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_CFG_1,value);
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	20aa      	movs	r0, #170	; 0xaa
 8000be0:	f7ff fd4b 	bl	800067a <AS7341_Write_Byte>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <AS7341_EnableLED>:
function:	enable led
info：true		: Enable
			false		: Anergy
******************************************************************************/
void AS7341_EnableLED(int flag)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  UBYTE data=0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	73fb      	strb	r3, [r7, #15]
  UBYTE data1=0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73bb      	strb	r3, [r7, #14]
  AS7341_SetBank(1);
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f000 f82b 	bl	8000c58 <AS7341_SetBank>
  data = AS7341_Read_Byte(AS7341_CONFIG);
 8000c02:	2070      	movs	r0, #112	; 0x70
 8000c04:	f7ff fd2a 	bl	800065c <AS7341_Read_Byte>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	73fb      	strb	r3, [r7, #15]
  data1 = AS7341_Read_Byte(AS7341_LED);
 8000c0c:	2074      	movs	r0, #116	; 0x74
 8000c0e:	f7ff fd25 	bl	800065c <AS7341_Read_Byte>
 8000c12:	4603      	mov	r3, r0
 8000c14:	73bb      	strb	r3, [r7, #14]
  if(flag== true)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d104      	bne.n	8000c26 <AS7341_EnableLED+0x3a>
	{
    data = data | 0x08;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	f043 0308 	orr.w	r3, r3, #8
 8000c22:	73fb      	strb	r3, [r7, #15]
 8000c24:	e00c      	b.n	8000c40 <AS7341_EnableLED+0x54>
	} 
	else 
	{
    data = data & 0xf7;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	f023 0308 	bic.w	r3, r3, #8
 8000c2c:	73fb      	strb	r3, [r7, #15]
    data1 = data1 & 0x7f;
 8000c2e:	7bbb      	ldrb	r3, [r7, #14]
 8000c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c34:	73bb      	strb	r3, [r7, #14]
		AS7341_Write_Byte(AS7341_LED,data1);
 8000c36:	7bbb      	ldrb	r3, [r7, #14]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	2074      	movs	r0, #116	; 0x74
 8000c3c:	f7ff fd1d 	bl	800067a <AS7341_Write_Byte>
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	4619      	mov	r1, r3
 8000c44:	2070      	movs	r0, #112	; 0x70
 8000c46:	f7ff fd18 	bl	800067a <AS7341_Write_Byte>
  AS7341_SetBank(0);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f000 f804 	bl	8000c58 <AS7341_SetBank>
}
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <AS7341_SetBank>:
function:	set REG_BANK
info：	0: Register access to register 0x80 and above
		1: Register access to register 0x60 to 0x74
******************************************************************************/
void AS7341_SetBank(UBYTE addr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  UBYTE data=0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	73fb      	strb	r3, [r7, #15]
  data = AS7341_Read_Byte(AS7341_CFG_0);
 8000c66:	20a9      	movs	r0, #169	; 0xa9
 8000c68:	f7ff fcf8 	bl	800065c <AS7341_Read_Byte>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	73fb      	strb	r3, [r7, #15]
  if(addr == 1){
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d103      	bne.n	8000c7e <AS7341_SetBank+0x26>
  
    data = data | (1<<4);
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	f043 0310 	orr.w	r3, r3, #16
 8000c7c:	73fb      	strb	r3, [r7, #15]
  }
  
  if(addr == 0){
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d103      	bne.n	8000c8c <AS7341_SetBank+0x34>
  
    data = data & (~(1<<4));
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
 8000c86:	f023 0310 	bic.w	r3, r3, #16
 8000c8a:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_CFG_0,data);
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	20a9      	movs	r0, #169	; 0xa9
 8000c92:	f7ff fcf2 	bl	800067a <AS7341_Write_Byte>
}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <AS7341_ControlLed>:
info：   LED 			 :   true  : LED ON
											 false : LED OFF
         current   :  intensity control
******************************************************************************/
void AS7341_ControlLed(UBYTE LED,UBYTE current)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b084      	sub	sp, #16
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	460a      	mov	r2, r1
 8000ca8:	71fb      	strb	r3, [r7, #7]
 8000caa:	4613      	mov	r3, r2
 8000cac:	71bb      	strb	r3, [r7, #6]
  UBYTE data=0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	73fb      	strb	r3, [r7, #15]
  if(current < 1) current = 1;
 8000cb2:	79bb      	ldrb	r3, [r7, #6]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <AS7341_ControlLed+0x1e>
 8000cb8:	2301      	movs	r3, #1
 8000cba:	71bb      	strb	r3, [r7, #6]
    current--;
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	71bb      	strb	r3, [r7, #6]
  if(current > 19) current = 19;
 8000cc2:	79bb      	ldrb	r3, [r7, #6]
 8000cc4:	2b13      	cmp	r3, #19
 8000cc6:	d901      	bls.n	8000ccc <AS7341_ControlLed+0x2e>
 8000cc8:	2313      	movs	r3, #19
 8000cca:	71bb      	strb	r3, [r7, #6]
  AS7341_SetBank(1); 
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f7ff ffc3 	bl	8000c58 <AS7341_SetBank>
	if(LED == true)	
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d104      	bne.n	8000ce2 <AS7341_ControlLed+0x44>
		data = 0x80 | current;
 8000cd8:	79bb      	ldrb	r3, [r7, #6]
 8000cda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cde:	73fb      	strb	r3, [r7, #15]
 8000ce0:	e001      	b.n	8000ce6 <AS7341_ControlLed+0x48>
	else	
		data = current;
 8000ce2:	79bb      	ldrb	r3, [r7, #6]
 8000ce4:	73fb      	strb	r3, [r7, #15]
  AS7341_Write_Byte(AS7341_LED,data);
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	2074      	movs	r0, #116	; 0x74
 8000cec:	f7ff fcc5 	bl	800067a <AS7341_Write_Byte>
  DEV_Delay_ms(100);
 8000cf0:	2064      	movs	r0, #100	; 0x64
 8000cf2:	f7ff fc3b 	bl	800056c <DEV_Delay_ms>
  AS7341_SetBank(0);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff ffae 	bl	8000c58 <AS7341_SetBank>
}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	4b32      	ldr	r3, [pc, #200]	; (8000de4 <MX_GPIO_Init+0xe0>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	4a31      	ldr	r2, [pc, #196]	; (8000de4 <MX_GPIO_Init+0xe0>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d26:	4b2f      	ldr	r3, [pc, #188]	; (8000de4 <MX_GPIO_Init+0xe0>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d32:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <MX_GPIO_Init+0xe0>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	4a2b      	ldr	r2, [pc, #172]	; (8000de4 <MX_GPIO_Init+0xe0>)
 8000d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3e:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <MX_GPIO_Init+0xe0>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <MX_GPIO_Init+0xe0>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	4a25      	ldr	r2, [pc, #148]	; (8000de4 <MX_GPIO_Init+0xe0>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d56:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <MX_GPIO_Init+0xe0>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <MX_GPIO_Init+0xe0>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	4a1f      	ldr	r2, [pc, #124]	; (8000de4 <MX_GPIO_Init+0xe0>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <MX_GPIO_Init+0xe0>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2120      	movs	r1, #32
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d82:	f000 feeb 	bl	8001b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d8c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4812      	ldr	r0, [pc, #72]	; (8000de8 <MX_GPIO_Init+0xe4>)
 8000d9e:	f000 fd33 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000da2:	2320      	movs	r3, #32
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f000 fd24 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 8000dc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4804      	ldr	r0, [pc, #16]	; (8000de8 <MX_GPIO_Init+0xe4>)
 8000dd6:	f000 fd17 	bl	8001808 <HAL_GPIO_Init>

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	; 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	48000800 	.word	0x48000800

08000dec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <MX_I2C1_Init+0x74>)
 8000df2:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <MX_I2C1_Init+0x78>)
 8000df4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_I2C1_Init+0x74>)
 8000df8:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <MX_I2C1_Init+0x7c>)
 8000dfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <MX_I2C1_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MX_I2C1_Init+0x74>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_I2C1_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_I2C1_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_I2C1_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_I2C1_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_I2C1_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e26:	480e      	ldr	r0, [pc, #56]	; (8000e60 <MX_I2C1_Init+0x74>)
 8000e28:	f000 feb0 	bl	8001b8c <HAL_I2C_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e32:	f000 f9a3 	bl	800117c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e36:	2100      	movs	r1, #0
 8000e38:	4809      	ldr	r0, [pc, #36]	; (8000e60 <MX_I2C1_Init+0x74>)
 8000e3a:	f001 fc29 	bl	8002690 <HAL_I2CEx_ConfigAnalogFilter>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e44:	f000 f99a 	bl	800117c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_I2C1_Init+0x74>)
 8000e4c:	f001 fc6b 	bl	8002726 <HAL_I2CEx_ConfigDigitalFilter>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e56:	f000 f991 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000088 	.word	0x20000088
 8000e64:	40005400 	.word	0x40005400
 8000e68:	10909cec 	.word	0x10909cec

08000e6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0ac      	sub	sp, #176	; 0xb0
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2288      	movs	r2, #136	; 0x88
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 ff61 	bl	8004d54 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <HAL_I2C_MspInit+0xb0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d13a      	bne.n	8000f12 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e9c:	2340      	movs	r3, #64	; 0x40
 8000e9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f002 faed 	bl	8003488 <HAL_RCCEx_PeriphCLKConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000eb4:	f000 f962 	bl	800117c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_I2C_MspInit+0xb4>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebc:	4a18      	ldr	r2, [pc, #96]	; (8000f20 <HAL_I2C_MspInit+0xb4>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_I2C_MspInit+0xb4>)
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ed0:	23c0      	movs	r3, #192	; 0xc0
 8000ed2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed6:	2312      	movs	r3, #18
 8000ed8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480b      	ldr	r0, [pc, #44]	; (8000f24 <HAL_I2C_MspInit+0xb8>)
 8000ef6:	f000 fc87 	bl	8001808 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_I2C_MspInit+0xb4>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <HAL_I2C_MspInit+0xb4>)
 8000f00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f04:	6593      	str	r3, [r2, #88]	; 0x58
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_I2C_MspInit+0xb4>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f12:	bf00      	nop
 8000f14:	37b0      	adds	r7, #176	; 0xb0
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40005400 	.word	0x40005400
 8000f20:	40021000 	.word	0x40021000
 8000f24:	48000400 	.word	0x48000400

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2e:	f000 fae5 	bl	80014fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f32:	f000 f895 	bl	8001060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f36:	f7ff fee5 	bl	8000d04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f3a:	f000 fa29 	bl	8001390 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f3e:	f7ff ff55 	bl	8000dec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

//  memset(buffer, 0, sizeof(buffer));
//  sprintf(buffer, "AS7341 Spectral Sensor Code...\r\n");
//  HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
  UART_Print("AS7341 Spectral Sensor Code...\r\n");
 8000f42:	483b      	ldr	r0, [pc, #236]	; (8001030 <main+0x108>)
 8000f44:	f000 f8de 	bl	8001104 <UART_Print>
  DEV_ModuleInit();
 8000f48:	f7ff fb7e 	bl	8000648 <DEV_ModuleInit>

  AS7341_Init(eSpm);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff fba7 	bl	80006a0 <AS7341_Init>
  AS7341_ATIME_config(100);
 8000f52:	2064      	movs	r0, #100	; 0x64
 8000f54:	f7ff fe10 	bl	8000b78 <AS7341_ATIME_config>
  AS7341_ASTEP_config(999);
 8000f58:	f240 30e7 	movw	r0, #999	; 0x3e7
 8000f5c:	f7ff fe1a 	bl	8000b94 <AS7341_ASTEP_config>
  AS7341_AGAIN_config(6);
 8000f60:	2006      	movs	r0, #6
 8000f62:	f7ff fe30 	bl	8000bc6 <AS7341_AGAIN_config>
  AS7341_EnableLED(false);// LED Enable
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff fe40 	bl	8000bec <AS7341_EnableLED>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	AS7341_ControlLed(true,10);//Turn on or off the LED and set the brightness of the LED
 8000f6c:	210a      	movs	r1, #10
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f7ff fe95 	bl	8000c9e <AS7341_ControlLed>
	sModeOneData_t data1;
	sModeTwoData_t data2;

//	Getdata_test();

	AS7341_startMeasure(eF1F4ClearNIR);
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff fced 	bl	8000954 <AS7341_startMeasure>
	data1 = AS7341_ReadSpectralDataOne();
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fd7d 	bl	8000a7e <AS7341_ReadSpectralDataOne>
	UART_Print("channel 1(405-425nm):\r\n");
 8000f84:	482b      	ldr	r0, [pc, #172]	; (8001034 <main+0x10c>)
 8000f86:	f000 f8bd 	bl	8001104 <UART_Print>
	UART_Dec_Print(data1.channel1);
 8000f8a:	89bb      	ldrh	r3, [r7, #12]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 f8d5 	bl	800113c <UART_Dec_Print>
	UART_Print("channel 2(435-455nm):\r\n");
 8000f92:	4829      	ldr	r0, [pc, #164]	; (8001038 <main+0x110>)
 8000f94:	f000 f8b6 	bl	8001104 <UART_Print>
	UART_Dec_Print(data1.channel2);
 8000f98:	89fb      	ldrh	r3, [r7, #14]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f8ce 	bl	800113c <UART_Dec_Print>
	UART_Print("channel 3(470-490nm):\r\n");
 8000fa0:	4826      	ldr	r0, [pc, #152]	; (800103c <main+0x114>)
 8000fa2:	f000 f8af 	bl	8001104 <UART_Print>
	UART_Dec_Print(data1.channel3);
 8000fa6:	8a3b      	ldrh	r3, [r7, #16]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 f8c7 	bl	800113c <UART_Dec_Print>
	UART_Print("channel 4(505-525nm):\r\n");
 8000fae:	4824      	ldr	r0, [pc, #144]	; (8001040 <main+0x118>)
 8000fb0:	f000 f8a8 	bl	8001104 <UART_Print>
	UART_Dec_Print(data1.channel4);
 8000fb4:	8a7b      	ldrh	r3, [r7, #18]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f8c0 	bl	800113c <UART_Dec_Print>

	AS7341_startMeasure(eF5F8ClearNIR);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f7ff fcc9 	bl	8000954 <AS7341_startMeasure>
	data2 =AS7341_ReadSpectralDataTwo();
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fd88 	bl	8000ada <AS7341_ReadSpectralDataTwo>
	UART_Print("channel 5(545-565nm):\r\n");
 8000fca:	481e      	ldr	r0, [pc, #120]	; (8001044 <main+0x11c>)
 8000fcc:	f000 f89a 	bl	8001104 <UART_Print>
	UART_Dec_Print(data2.channel5);
 8000fd0:	883b      	ldrh	r3, [r7, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f8b2 	bl	800113c <UART_Dec_Print>
	UART_Print("channel 6(580-600nm):\r\n");
 8000fd8:	481b      	ldr	r0, [pc, #108]	; (8001048 <main+0x120>)
 8000fda:	f000 f893 	bl	8001104 <UART_Print>
	UART_Dec_Print(data2.channel6);
 8000fde:	887b      	ldrh	r3, [r7, #2]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 f8ab 	bl	800113c <UART_Dec_Print>
	UART_Print("channel 7(620-640nm):\r\n");
 8000fe6:	4819      	ldr	r0, [pc, #100]	; (800104c <main+0x124>)
 8000fe8:	f000 f88c 	bl	8001104 <UART_Print>
	UART_Dec_Print(data2.channel7);
 8000fec:	88bb      	ldrh	r3, [r7, #4]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f8a4 	bl	800113c <UART_Dec_Print>
	UART_Print("channel 8(670-690nm):\r\n");
 8000ff4:	4816      	ldr	r0, [pc, #88]	; (8001050 <main+0x128>)
 8000ff6:	f000 f885 	bl	8001104 <UART_Print>
	UART_Dec_Print(data2.channel8);
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f89d 	bl	800113c <UART_Dec_Print>
	UART_Print("Clear:\r\n");
 8001002:	4814      	ldr	r0, [pc, #80]	; (8001054 <main+0x12c>)
 8001004:	f000 f87e 	bl	8001104 <UART_Print>
	UART_Dec_Print(data2.CLEAR);
 8001008:	893b      	ldrh	r3, [r7, #8]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f896 	bl	800113c <UART_Dec_Print>
	UART_Print("NIR:\r\n");
 8001010:	4811      	ldr	r0, [pc, #68]	; (8001058 <main+0x130>)
 8001012:	f000 f877 	bl	8001104 <UART_Print>
	UART_Dec_Print(data2.NIR);
 8001016:	897b      	ldrh	r3, [r7, #10]
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f88f 	bl	800113c <UART_Dec_Print>
	UART_Print("--------------------------\r\n");
 800101e:	480f      	ldr	r0, [pc, #60]	; (800105c <main+0x134>)
 8001020:	f000 f870 	bl	8001104 <UART_Print>
	DEV_Delay_ms(500);
 8001024:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001028:	f7ff faa0 	bl	800056c <DEV_Delay_ms>
  {
 800102c:	e79e      	b.n	8000f6c <main+0x44>
 800102e:	bf00      	nop
 8001030:	080059cc 	.word	0x080059cc
 8001034:	080059f0 	.word	0x080059f0
 8001038:	08005a08 	.word	0x08005a08
 800103c:	08005a20 	.word	0x08005a20
 8001040:	08005a38 	.word	0x08005a38
 8001044:	08005a50 	.word	0x08005a50
 8001048:	08005a68 	.word	0x08005a68
 800104c:	08005a80 	.word	0x08005a80
 8001050:	08005a98 	.word	0x08005a98
 8001054:	08005ab0 	.word	0x08005ab0
 8001058:	08005abc 	.word	0x08005abc
 800105c:	08005ac4 	.word	0x08005ac4

08001060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b096      	sub	sp, #88	; 0x58
 8001064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	2244      	movs	r2, #68	; 0x44
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f003 fe70 	bl	8004d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001074:	463b      	mov	r3, r7
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001082:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001086:	f001 fba9 	bl	80027dc <HAL_PWREx_ControlVoltageScaling>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001090:	f000 f874 	bl	800117c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001094:	2302      	movs	r3, #2
 8001096:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001098:	f44f 7380 	mov.w	r3, #256	; 0x100
 800109c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800109e:	2310      	movs	r3, #16
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a2:	2302      	movs	r3, #2
 80010a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a6:	2302      	movs	r3, #2
 80010a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010ae:	230a      	movs	r3, #10
 80010b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010b2:	2307      	movs	r3, #7
 80010b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010b6:	2302      	movs	r3, #2
 80010b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4618      	mov	r0, r3
 80010c4:	f001 fbe0 	bl	8002888 <HAL_RCC_OscConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010ce:	f000 f855 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d2:	230f      	movs	r3, #15
 80010d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d6:	2303      	movs	r3, #3
 80010d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	2104      	movs	r1, #4
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 ffa8 	bl	8003040 <HAL_RCC_ClockConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010f6:	f000 f841 	bl	800117c <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3758      	adds	r7, #88	; 0x58
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <UART_Print>:

/* USER CODE BEGIN 4 */

void UART_Print(char data[60]){
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	memset(buffer, 0, sizeof buffer);
 800110c:	223c      	movs	r2, #60	; 0x3c
 800110e:	2100      	movs	r1, #0
 8001110:	4808      	ldr	r0, [pc, #32]	; (8001134 <UART_Print+0x30>)
 8001112:	f003 fe1f 	bl	8004d54 <memset>
	sprintf(buffer, data);
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	4806      	ldr	r0, [pc, #24]	; (8001134 <UART_Print+0x30>)
 800111a:	f003 fd23 	bl	8004b64 <siprintf>
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	223c      	movs	r2, #60	; 0x3c
 8001124:	4903      	ldr	r1, [pc, #12]	; (8001134 <UART_Print+0x30>)
 8001126:	4804      	ldr	r0, [pc, #16]	; (8001138 <UART_Print+0x34>)
 8001128:	f002 feb8 	bl	8003e9c <HAL_UART_Transmit>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200000dc 	.word	0x200000dc
 8001138:	2000011c 	.word	0x2000011c

0800113c <UART_Dec_Print>:

void UART_Dec_Print(int data){
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	memset(buffer, 0, sizeof buffer);
 8001144:	223c      	movs	r2, #60	; 0x3c
 8001146:	2100      	movs	r1, #0
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <UART_Dec_Print+0x34>)
 800114a:	f003 fe03 	bl	8004d54 <memset>
	sprintf(buffer, "%d\r\n", data);
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	4908      	ldr	r1, [pc, #32]	; (8001174 <UART_Dec_Print+0x38>)
 8001152:	4807      	ldr	r0, [pc, #28]	; (8001170 <UART_Dec_Print+0x34>)
 8001154:	f003 fd06 	bl	8004b64 <siprintf>
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 8001158:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115c:	223c      	movs	r2, #60	; 0x3c
 800115e:	4904      	ldr	r1, [pc, #16]	; (8001170 <UART_Dec_Print+0x34>)
 8001160:	4805      	ldr	r0, [pc, #20]	; (8001178 <UART_Dec_Print+0x3c>)
 8001162:	f002 fe9b 	bl	8003e9c <HAL_UART_Transmit>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200000dc 	.word	0x200000dc
 8001174:	08005ae4 	.word	0x08005ae4
 8001178:	2000011c 	.word	0x2000011c

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	e7fe      	b.n	8001184 <Error_Handler+0x8>
	...

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_MspInit+0x44>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_MspInit+0x44>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6613      	str	r3, [r2, #96]	; 0x60
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_MspInit+0x44>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_MspInit+0x44>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_MspInit+0x44>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	6593      	str	r3, [r2, #88]	; 0x58
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_MspInit+0x44>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <NMI_Handler+0x4>

080011d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <HardFault_Handler+0x4>

080011dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <MemManage_Handler+0x4>

080011e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <BusFault_Handler+0x4>

080011e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <UsageFault_Handler+0x4>

080011ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121c:	f000 f9ca 	bl	80015b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	e00a      	b.n	800124c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001236:	f3af 8000 	nop.w
 800123a:	4601      	mov	r1, r0
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	60ba      	str	r2, [r7, #8]
 8001242:	b2ca      	uxtb	r2, r1
 8001244:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	429a      	cmp	r2, r3
 8001252:	dbf0      	blt.n	8001236 <_read+0x12>
  }

  return len;
 8001254:	687b      	ldr	r3, [r7, #4]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	e009      	b.n	8001284 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	60ba      	str	r2, [r7, #8]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3301      	adds	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	429a      	cmp	r2, r3
 800128a:	dbf1      	blt.n	8001270 <_write+0x12>
  }
  return len;
 800128c:	687b      	ldr	r3, [r7, #4]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_close>:

int _close(int file)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012be:	605a      	str	r2, [r3, #4]
  return 0;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <_isatty>:

int _isatty(int file)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001308:	4a14      	ldr	r2, [pc, #80]	; (800135c <_sbrk+0x5c>)
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <_sbrk+0x60>)
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <_sbrk+0x64>)
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <_sbrk+0x68>)
 8001320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	429a      	cmp	r2, r3
 800132e:	d207      	bcs.n	8001340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001330:	f003 fd5e 	bl	8004df0 <__errno>
 8001334:	4603      	mov	r3, r0
 8001336:	220c      	movs	r2, #12
 8001338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	e009      	b.n	8001354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <_sbrk+0x64>)
 8001350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20018000 	.word	0x20018000
 8001360:	00000400 	.word	0x00000400
 8001364:	20000118 	.word	0x20000118
 8001368:	200002f8 	.word	0x200002f8

0800136c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <SystemInit+0x20>)
 8001372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <SystemInit+0x20>)
 8001378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800137c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 8001396:	4a15      	ldr	r2, [pc, #84]	; (80013ec <MX_USART2_UART_Init+0x5c>)
 8001398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 800139c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013d4:	f002 fd14 	bl	8003e00 <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013de:	f7ff fecd 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000011c 	.word	0x2000011c
 80013ec:	40004400 	.word	0x40004400

080013f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b0ac      	sub	sp, #176	; 0xb0
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2288      	movs	r2, #136	; 0x88
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f003 fc9f 	bl	8004d54 <memset>
  if(uartHandle->Instance==USART2)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a21      	ldr	r2, [pc, #132]	; (80014a0 <HAL_UART_MspInit+0xb0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d13b      	bne.n	8001498 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001420:	2302      	movs	r3, #2
 8001422:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001424:	2300      	movs	r3, #0
 8001426:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4618      	mov	r0, r3
 800142e:	f002 f82b 	bl	8003488 <HAL_RCCEx_PeriphCLKConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001438:	f7ff fea0 	bl	800117c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_UART_MspInit+0xb4>)
 800143e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001440:	4a18      	ldr	r2, [pc, #96]	; (80014a4 <HAL_UART_MspInit+0xb4>)
 8001442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001446:	6593      	str	r3, [r2, #88]	; 0x58
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_UART_MspInit+0xb4>)
 800144a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <HAL_UART_MspInit+0xb4>)
 8001456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001458:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <HAL_UART_MspInit+0xb4>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_UART_MspInit+0xb4>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800146c:	230c      	movs	r3, #12
 800146e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001484:	2307      	movs	r3, #7
 8001486:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800148e:	4619      	mov	r1, r3
 8001490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001494:	f000 f9b8 	bl	8001808 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001498:	bf00      	nop
 800149a:	37b0      	adds	r7, #176	; 0xb0
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40004400 	.word	0x40004400
 80014a4:	40021000 	.word	0x40021000

080014a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014ac:	f7ff ff5e 	bl	800136c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80014b2:	490d      	ldr	r1, [pc, #52]	; (80014e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014b4:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <LoopForever+0xe>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014c8:	4c0a      	ldr	r4, [pc, #40]	; (80014f4 <LoopForever+0x16>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d6:	f003 fc91 	bl	8004dfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014da:	f7ff fd25 	bl	8000f28 <main>

080014de <LoopForever>:

LoopForever:
    b LoopForever
 80014de:	e7fe      	b.n	80014de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80014ec:	08005b78 	.word	0x08005b78
  ldr r2, =_sbss
 80014f0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80014f4:	200002f4 	.word	0x200002f4

080014f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC1_2_IRQHandler>
	...

080014fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_Init+0x3c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <HAL_Init+0x3c>)
 800150c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001510:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001512:	2003      	movs	r0, #3
 8001514:	f000 f944 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001518:	2000      	movs	r0, #0
 800151a:	f000 f80f 	bl	800153c <HAL_InitTick>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	71fb      	strb	r3, [r7, #7]
 8001528:	e001      	b.n	800152e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800152a:	f7ff fe2d 	bl	8001188 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800152e:	79fb      	ldrb	r3, [r7, #7]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40022000 	.word	0x40022000

0800153c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <HAL_InitTick+0x6c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d023      	beq.n	8001598 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_InitTick+0x70>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <HAL_InitTick+0x6c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f941 	bl	80017ee <HAL_SYSTICK_Config>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10f      	bne.n	8001592 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b0f      	cmp	r3, #15
 8001576:	d809      	bhi.n	800158c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001578:	2200      	movs	r2, #0
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	f04f 30ff 	mov.w	r0, #4294967295
 8001580:	f000 f919 	bl	80017b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_InitTick+0x74>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e007      	b.n	800159c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
 8001590:	e004      	b.n	800159c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	73fb      	strb	r3, [r7, #15]
 8001596:	e001      	b.n	800159c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000008 	.word	0x20000008
 80015ac:	20000000 	.word	0x20000000
 80015b0:	20000004 	.word	0x20000004

080015b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_IncTick+0x20>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_IncTick+0x24>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_IncTick+0x24>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000008 	.word	0x20000008
 80015d8:	200001a4 	.word	0x200001a4

080015dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_GetTick+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	200001a4 	.word	0x200001a4

080015f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff ffee 	bl	80015dc <HAL_GetTick>
 8001600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160c:	d005      	beq.n	800161a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_Delay+0x44>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4413      	add	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800161a:	bf00      	nop
 800161c:	f7ff ffde 	bl	80015dc <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	429a      	cmp	r2, r3
 800162a:	d8f7      	bhi.n	800161c <HAL_Delay+0x28>
  {
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000008 	.word	0x20000008

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db0a      	blt.n	80016ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	490c      	ldr	r1, [pc, #48]	; (80016ec <__NVIC_SetPriority+0x4c>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c8:	e00a      	b.n	80016e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <__NVIC_SetPriority+0x50>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	3b04      	subs	r3, #4
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	440b      	add	r3, r1
 80016de:	761a      	strb	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	; 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f1c3 0307 	rsb	r3, r3, #7
 800170e:	2b04      	cmp	r3, #4
 8001710:	bf28      	it	cs
 8001712:	2304      	movcs	r3, #4
 8001714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3304      	adds	r3, #4
 800171a:	2b06      	cmp	r3, #6
 800171c:	d902      	bls.n	8001724 <NVIC_EncodePriority+0x30>
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3b03      	subs	r3, #3
 8001722:	e000      	b.n	8001726 <NVIC_EncodePriority+0x32>
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	f04f 32ff 	mov.w	r2, #4294967295
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	401a      	ands	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43d9      	mvns	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	4313      	orrs	r3, r2
         );
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	; 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800176c:	d301      	bcc.n	8001772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176e:	2301      	movs	r3, #1
 8001770:	e00f      	b.n	8001792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <SysTick_Config+0x40>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177a:	210f      	movs	r1, #15
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f7ff ff8e 	bl	80016a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <SysTick_Config+0x40>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <SysTick_Config+0x40>)
 800178c:	2207      	movs	r2, #7
 800178e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	e000e010 	.word	0xe000e010

080017a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff47 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017c8:	f7ff ff5c 	bl	8001684 <__NVIC_GetPriorityGrouping>
 80017cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7ff ff8e 	bl	80016f4 <NVIC_EncodePriority>
 80017d8:	4602      	mov	r2, r0
 80017da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff5d 	bl	80016a0 <__NVIC_SetPriority>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ffb0 	bl	800175c <SysTick_Config>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001808:	b480      	push	{r7}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001816:	e17f      	b.n	8001b18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2101      	movs	r1, #1
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	4013      	ands	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 8171 	beq.w	8001b12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d005      	beq.n	8001848 <HAL_GPIO_Init+0x40>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d130      	bne.n	80018aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800187e:	2201      	movs	r2, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	f003 0201 	and.w	r2, r3, #1
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d118      	bne.n	80018e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018bc:	2201      	movs	r2, #1
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	08db      	lsrs	r3, r3, #3
 80018d2:	f003 0201 	and.w	r2, r3, #1
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d017      	beq.n	8001924 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d123      	bne.n	8001978 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	08da      	lsrs	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3208      	adds	r2, #8
 8001938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	220f      	movs	r2, #15
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	08da      	lsrs	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3208      	adds	r2, #8
 8001972:	6939      	ldr	r1, [r7, #16]
 8001974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2203      	movs	r2, #3
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0203 	and.w	r2, r3, #3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80ac 	beq.w	8001b12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ba:	4b5f      	ldr	r3, [pc, #380]	; (8001b38 <HAL_GPIO_Init+0x330>)
 80019bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019be:	4a5e      	ldr	r2, [pc, #376]	; (8001b38 <HAL_GPIO_Init+0x330>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6613      	str	r3, [r2, #96]	; 0x60
 80019c6:	4b5c      	ldr	r3, [pc, #368]	; (8001b38 <HAL_GPIO_Init+0x330>)
 80019c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019d2:	4a5a      	ldr	r2, [pc, #360]	; (8001b3c <HAL_GPIO_Init+0x334>)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	3302      	adds	r3, #2
 80019da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	220f      	movs	r2, #15
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019fc:	d025      	beq.n	8001a4a <HAL_GPIO_Init+0x242>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4f      	ldr	r2, [pc, #316]	; (8001b40 <HAL_GPIO_Init+0x338>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d01f      	beq.n	8001a46 <HAL_GPIO_Init+0x23e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4e      	ldr	r2, [pc, #312]	; (8001b44 <HAL_GPIO_Init+0x33c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d019      	beq.n	8001a42 <HAL_GPIO_Init+0x23a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4d      	ldr	r2, [pc, #308]	; (8001b48 <HAL_GPIO_Init+0x340>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <HAL_GPIO_Init+0x236>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4c      	ldr	r2, [pc, #304]	; (8001b4c <HAL_GPIO_Init+0x344>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00d      	beq.n	8001a3a <HAL_GPIO_Init+0x232>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4b      	ldr	r2, [pc, #300]	; (8001b50 <HAL_GPIO_Init+0x348>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d007      	beq.n	8001a36 <HAL_GPIO_Init+0x22e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4a      	ldr	r2, [pc, #296]	; (8001b54 <HAL_GPIO_Init+0x34c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d101      	bne.n	8001a32 <HAL_GPIO_Init+0x22a>
 8001a2e:	2306      	movs	r3, #6
 8001a30:	e00c      	b.n	8001a4c <HAL_GPIO_Init+0x244>
 8001a32:	2307      	movs	r3, #7
 8001a34:	e00a      	b.n	8001a4c <HAL_GPIO_Init+0x244>
 8001a36:	2305      	movs	r3, #5
 8001a38:	e008      	b.n	8001a4c <HAL_GPIO_Init+0x244>
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	e006      	b.n	8001a4c <HAL_GPIO_Init+0x244>
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e004      	b.n	8001a4c <HAL_GPIO_Init+0x244>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e002      	b.n	8001a4c <HAL_GPIO_Init+0x244>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_GPIO_Init+0x244>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	f002 0203 	and.w	r2, r2, #3
 8001a52:	0092      	lsls	r2, r2, #2
 8001a54:	4093      	lsls	r3, r2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a5c:	4937      	ldr	r1, [pc, #220]	; (8001b3c <HAL_GPIO_Init+0x334>)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	089b      	lsrs	r3, r3, #2
 8001a62:	3302      	adds	r3, #2
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a6a:	4b3b      	ldr	r3, [pc, #236]	; (8001b58 <HAL_GPIO_Init+0x350>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a8e:	4a32      	ldr	r2, [pc, #200]	; (8001b58 <HAL_GPIO_Init+0x350>)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a94:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <HAL_GPIO_Init+0x350>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ab8:	4a27      	ldr	r2, [pc, #156]	; (8001b58 <HAL_GPIO_Init+0x350>)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001abe:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <HAL_GPIO_Init+0x350>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ae2:	4a1d      	ldr	r2, [pc, #116]	; (8001b58 <HAL_GPIO_Init+0x350>)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <HAL_GPIO_Init+0x350>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b0c:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <HAL_GPIO_Init+0x350>)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3301      	adds	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f47f ae78 	bne.w	8001818 <HAL_GPIO_Init+0x10>
  }
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	371c      	adds	r7, #28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	48000400 	.word	0x48000400
 8001b44:	48000800 	.word	0x48000800
 8001b48:	48000c00 	.word	0x48000c00
 8001b4c:	48001000 	.word	0x48001000
 8001b50:	48001400 	.word	0x48001400
 8001b54:	48001800 	.word	0x48001800
 8001b58:	40010400 	.word	0x40010400

08001b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	807b      	strh	r3, [r7, #2]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b6c:	787b      	ldrb	r3, [r7, #1]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b72:	887a      	ldrh	r2, [r7, #2]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b78:	e002      	b.n	8001b80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b7a:	887a      	ldrh	r2, [r7, #2]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e08d      	b.n	8001cba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff f95a 	bl	8000e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2224      	movs	r2, #36	; 0x24
 8001bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0201 	bic.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bdc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d107      	bne.n	8001c06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	e006      	b.n	8001c14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d108      	bne.n	8001c2e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	e007      	b.n	8001c3e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69d9      	ldr	r1, [r3, #28]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1a      	ldr	r2, [r3, #32]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af02      	add	r7, sp, #8
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	4608      	mov	r0, r1
 8001cce:	4611      	mov	r1, r2
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	817b      	strh	r3, [r7, #10]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	813b      	strh	r3, [r7, #8]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b20      	cmp	r3, #32
 8001ce8:	f040 80f9 	bne.w	8001ede <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <HAL_I2C_Mem_Write+0x34>
 8001cf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d105      	bne.n	8001d04 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cfe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0ed      	b.n	8001ee0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_I2C_Mem_Write+0x4e>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e0e6      	b.n	8001ee0 <HAL_I2C_Mem_Write+0x21c>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d1a:	f7ff fc5f 	bl	80015dc <HAL_GetTick>
 8001d1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	2319      	movs	r3, #25
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f000 fac3 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0d1      	b.n	8001ee0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2221      	movs	r2, #33	; 0x21
 8001d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2240      	movs	r2, #64	; 0x40
 8001d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a3a      	ldr	r2, [r7, #32]
 8001d56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d64:	88f8      	ldrh	r0, [r7, #6]
 8001d66:	893a      	ldrh	r2, [r7, #8]
 8001d68:	8979      	ldrh	r1, [r7, #10]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	4603      	mov	r3, r0
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 f9d3 	bl	8002120 <I2C_RequestMemoryWrite>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0a9      	b.n	8001ee0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	2bff      	cmp	r3, #255	; 0xff
 8001d94:	d90e      	bls.n	8001db4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	22ff      	movs	r2, #255	; 0xff
 8001d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	8979      	ldrh	r1, [r7, #10]
 8001da4:	2300      	movs	r3, #0
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 fc3d 	bl	800262c <I2C_TransferConfig>
 8001db2:	e00f      	b.n	8001dd4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	8979      	ldrh	r1, [r7, #10]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 fc2c 	bl	800262c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 fabc 	bl	8002356 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e07b      	b.n	8001ee0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	781a      	ldrb	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	3b01      	subs	r3, #1
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d034      	beq.n	8001e8c <HAL_I2C_Mem_Write+0x1c8>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d130      	bne.n	8001e8c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e30:	2200      	movs	r2, #0
 8001e32:	2180      	movs	r1, #128	; 0x80
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 fa3f 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e04d      	b.n	8001ee0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	2bff      	cmp	r3, #255	; 0xff
 8001e4c:	d90e      	bls.n	8001e6c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	22ff      	movs	r2, #255	; 0xff
 8001e52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	8979      	ldrh	r1, [r7, #10]
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 fbe1 	bl	800262c <I2C_TransferConfig>
 8001e6a:	e00f      	b.n	8001e8c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	8979      	ldrh	r1, [r7, #10]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 fbd0 	bl	800262c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d19e      	bne.n	8001dd4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 faa2 	bl	80023e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e01a      	b.n	8001ee0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6859      	ldr	r1, [r3, #4]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_I2C_Mem_Write+0x224>)
 8001ebe:	400b      	ands	r3, r1
 8001ec0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e000      	b.n	8001ee0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001ede:	2302      	movs	r3, #2
  }
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	fe00e800 	.word	0xfe00e800

08001eec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	4608      	mov	r0, r1
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4603      	mov	r3, r0
 8001efc:	817b      	strh	r3, [r7, #10]
 8001efe:	460b      	mov	r3, r1
 8001f00:	813b      	strh	r3, [r7, #8]
 8001f02:	4613      	mov	r3, r2
 8001f04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b20      	cmp	r3, #32
 8001f10:	f040 80fd 	bne.w	800210e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <HAL_I2C_Mem_Read+0x34>
 8001f1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d105      	bne.n	8001f2c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0f1      	b.n	8002110 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_I2C_Mem_Read+0x4e>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e0ea      	b.n	8002110 <HAL_I2C_Mem_Read+0x224>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f42:	f7ff fb4b 	bl	80015dc <HAL_GetTick>
 8001f46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2319      	movs	r3, #25
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 f9af 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0d5      	b.n	8002110 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2222      	movs	r2, #34	; 0x22
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2240      	movs	r2, #64	; 0x40
 8001f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6a3a      	ldr	r2, [r7, #32]
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f8c:	88f8      	ldrh	r0, [r7, #6]
 8001f8e:	893a      	ldrh	r2, [r7, #8]
 8001f90:	8979      	ldrh	r1, [r7, #10]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f913 	bl	80021c8 <I2C_RequestMemoryRead>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0ad      	b.n	8002110 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2bff      	cmp	r3, #255	; 0xff
 8001fbc:	d90e      	bls.n	8001fdc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	22ff      	movs	r2, #255	; 0xff
 8001fc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	8979      	ldrh	r1, [r7, #10]
 8001fcc:	4b52      	ldr	r3, [pc, #328]	; (8002118 <HAL_I2C_Mem_Read+0x22c>)
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 fb29 	bl	800262c <I2C_TransferConfig>
 8001fda:	e00f      	b.n	8001ffc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	8979      	ldrh	r1, [r7, #10]
 8001fee:	4b4a      	ldr	r3, [pc, #296]	; (8002118 <HAL_I2C_Mem_Read+0x22c>)
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 fb18 	bl	800262c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002002:	2200      	movs	r2, #0
 8002004:	2104      	movs	r1, #4
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f956 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e07c      	b.n	8002110 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d034      	beq.n	80020bc <HAL_I2C_Mem_Read+0x1d0>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002056:	2b00      	cmp	r3, #0
 8002058:	d130      	bne.n	80020bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002060:	2200      	movs	r2, #0
 8002062:	2180      	movs	r1, #128	; 0x80
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f927 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e04d      	b.n	8002110 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002078:	b29b      	uxth	r3, r3
 800207a:	2bff      	cmp	r3, #255	; 0xff
 800207c:	d90e      	bls.n	800209c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	22ff      	movs	r2, #255	; 0xff
 8002082:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002088:	b2da      	uxtb	r2, r3
 800208a:	8979      	ldrh	r1, [r7, #10]
 800208c:	2300      	movs	r3, #0
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 fac9 	bl	800262c <I2C_TransferConfig>
 800209a:	e00f      	b.n	80020bc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	8979      	ldrh	r1, [r7, #10]
 80020ae:	2300      	movs	r3, #0
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 fab8 	bl	800262c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d19a      	bne.n	8001ffc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f98a 	bl	80023e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e01a      	b.n	8002110 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2220      	movs	r2, #32
 80020e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6859      	ldr	r1, [r3, #4]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_I2C_Mem_Read+0x230>)
 80020ee:	400b      	ands	r3, r1
 80020f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	e000      	b.n	8002110 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800210e:	2302      	movs	r3, #2
  }
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	80002400 	.word	0x80002400
 800211c:	fe00e800 	.word	0xfe00e800

08002120 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	4608      	mov	r0, r1
 800212a:	4611      	mov	r1, r2
 800212c:	461a      	mov	r2, r3
 800212e:	4603      	mov	r3, r0
 8002130:	817b      	strh	r3, [r7, #10]
 8002132:	460b      	mov	r3, r1
 8002134:	813b      	strh	r3, [r7, #8]
 8002136:	4613      	mov	r3, r2
 8002138:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	8979      	ldrh	r1, [r7, #10]
 8002140:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <I2C_RequestMemoryWrite+0xa4>)
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 fa6f 	bl	800262c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	69b9      	ldr	r1, [r7, #24]
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 f8ff 	bl	8002356 <I2C_WaitOnTXISFlagUntilTimeout>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e02c      	b.n	80021bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d105      	bne.n	8002174 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002168:	893b      	ldrh	r3, [r7, #8]
 800216a:	b2da      	uxtb	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	629a      	str	r2, [r3, #40]	; 0x28
 8002172:	e015      	b.n	80021a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002174:	893b      	ldrh	r3, [r7, #8]
 8002176:	0a1b      	lsrs	r3, r3, #8
 8002178:	b29b      	uxth	r3, r3
 800217a:	b2da      	uxtb	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	69b9      	ldr	r1, [r7, #24]
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 f8e5 	bl	8002356 <I2C_WaitOnTXISFlagUntilTimeout>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e012      	b.n	80021bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002196:	893b      	ldrh	r3, [r7, #8]
 8002198:	b2da      	uxtb	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	2200      	movs	r2, #0
 80021a8:	2180      	movs	r1, #128	; 0x80
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 f884 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	80002000 	.word	0x80002000

080021c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	4608      	mov	r0, r1
 80021d2:	4611      	mov	r1, r2
 80021d4:	461a      	mov	r2, r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	817b      	strh	r3, [r7, #10]
 80021da:	460b      	mov	r3, r1
 80021dc:	813b      	strh	r3, [r7, #8]
 80021de:	4613      	mov	r3, r2
 80021e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	8979      	ldrh	r1, [r7, #10]
 80021e8:	4b20      	ldr	r3, [pc, #128]	; (800226c <I2C_RequestMemoryRead+0xa4>)
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	2300      	movs	r3, #0
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fa1c 	bl	800262c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021f4:	69fa      	ldr	r2, [r7, #28]
 80021f6:	69b9      	ldr	r1, [r7, #24]
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f8ac 	bl	8002356 <I2C_WaitOnTXISFlagUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e02c      	b.n	8002262 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d105      	bne.n	800221a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800220e:	893b      	ldrh	r3, [r7, #8]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	629a      	str	r2, [r3, #40]	; 0x28
 8002218:	e015      	b.n	8002246 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800221a:	893b      	ldrh	r3, [r7, #8]
 800221c:	0a1b      	lsrs	r3, r3, #8
 800221e:	b29b      	uxth	r3, r3
 8002220:	b2da      	uxtb	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	69b9      	ldr	r1, [r7, #24]
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f892 	bl	8002356 <I2C_WaitOnTXISFlagUntilTimeout>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e012      	b.n	8002262 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800223c:	893b      	ldrh	r3, [r7, #8]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	2200      	movs	r2, #0
 800224e:	2140      	movs	r1, #64	; 0x40
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f831 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	80002000 	.word	0x80002000

08002270 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b02      	cmp	r3, #2
 8002284:	d103      	bne.n	800228e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2200      	movs	r2, #0
 800228c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b01      	cmp	r3, #1
 800229a:	d007      	beq.n	80022ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	619a      	str	r2, [r3, #24]
  }
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	4613      	mov	r3, r2
 80022c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022c8:	e031      	b.n	800232e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d02d      	beq.n	800232e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d2:	f7ff f983 	bl	80015dc <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d302      	bcc.n	80022e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d122      	bne.n	800232e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	4013      	ands	r3, r2
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	429a      	cmp	r2, r3
 8002304:	d113      	bne.n	800232e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	f043 0220 	orr.w	r2, r3, #32
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2220      	movs	r2, #32
 8002316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e00f      	b.n	800234e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	699a      	ldr	r2, [r3, #24]
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4013      	ands	r3, r2
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	429a      	cmp	r2, r3
 800233c:	bf0c      	ite	eq
 800233e:	2301      	moveq	r3, #1
 8002340:	2300      	movne	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	429a      	cmp	r2, r3
 800234a:	d0be      	beq.n	80022ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002362:	e033      	b.n	80023cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	68b9      	ldr	r1, [r7, #8]
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 f87f 	bl	800246c <I2C_IsErrorOccurred>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e031      	b.n	80023dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237e:	d025      	beq.n	80023cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002380:	f7ff f92c 	bl	80015dc <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	429a      	cmp	r2, r3
 800238e:	d302      	bcc.n	8002396 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d11a      	bne.n	80023cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d013      	beq.n	80023cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a8:	f043 0220 	orr.w	r2, r3, #32
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e007      	b.n	80023dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d1c4      	bne.n	8002364 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023f0:	e02f      	b.n	8002452 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f838 	bl	800246c <I2C_IsErrorOccurred>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e02d      	b.n	8002462 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002406:	f7ff f8e9 	bl	80015dc <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	429a      	cmp	r2, r3
 8002414:	d302      	bcc.n	800241c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d11a      	bne.n	8002452 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b20      	cmp	r3, #32
 8002428:	d013      	beq.n	8002452 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f043 0220 	orr.w	r2, r3, #32
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e007      	b.n	8002462 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b20      	cmp	r3, #32
 800245e:	d1c8      	bne.n	80023f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	; 0x28
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b00      	cmp	r3, #0
 8002496:	d068      	beq.n	800256a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2210      	movs	r2, #16
 800249e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024a0:	e049      	b.n	8002536 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a8:	d045      	beq.n	8002536 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024aa:	f7ff f897 	bl	80015dc <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d302      	bcc.n	80024c0 <I2C_IsErrorOccurred+0x54>
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d13a      	bne.n	8002536 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024e2:	d121      	bne.n	8002528 <I2C_IsErrorOccurred+0xbc>
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ea:	d01d      	beq.n	8002528 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	d01a      	beq.n	8002528 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002500:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002502:	f7ff f86b 	bl	80015dc <HAL_GetTick>
 8002506:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002508:	e00e      	b.n	8002528 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800250a:	f7ff f867 	bl	80015dc <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b19      	cmp	r3, #25
 8002516:	d907      	bls.n	8002528 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	f043 0320 	orr.w	r3, r3, #32
 800251e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002526:	e006      	b.n	8002536 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b20      	cmp	r3, #32
 8002534:	d1e9      	bne.n	800250a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b20      	cmp	r3, #32
 8002542:	d003      	beq.n	800254c <I2C_IsErrorOccurred+0xe0>
 8002544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0aa      	beq.n	80024a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800254c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002550:	2b00      	cmp	r3, #0
 8002552:	d103      	bne.n	800255c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2220      	movs	r2, #32
 800255a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	f043 0304 	orr.w	r3, r3, #4
 8002562:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00b      	beq.n	8002594 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f44f 7280 	mov.w	r2, #256	; 0x100
 800258c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00b      	beq.n	80025b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	f043 0308 	orr.w	r3, r3, #8
 80025a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00b      	beq.n	80025d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	f043 0302 	orr.w	r3, r3, #2
 80025c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80025d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01c      	beq.n	800261a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f7ff fe45 	bl	8002270 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6859      	ldr	r1, [r3, #4]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <I2C_IsErrorOccurred+0x1bc>)
 80025f2:	400b      	ands	r3, r1
 80025f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	431a      	orrs	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800261a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800261e:	4618      	mov	r0, r3
 8002620:	3728      	adds	r7, #40	; 0x28
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	fe00e800 	.word	0xfe00e800

0800262c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	460b      	mov	r3, r1
 8002638:	817b      	strh	r3, [r7, #10]
 800263a:	4613      	mov	r3, r2
 800263c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800263e:	897b      	ldrh	r3, [r7, #10]
 8002640:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002644:	7a7b      	ldrb	r3, [r7, #9]
 8002646:	041b      	lsls	r3, r3, #16
 8002648:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800264c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	4313      	orrs	r3, r2
 8002656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800265a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	0d5b      	lsrs	r3, r3, #21
 8002666:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <I2C_TransferConfig+0x60>)
 800266c:	430b      	orrs	r3, r1
 800266e:	43db      	mvns	r3, r3
 8002670:	ea02 0103 	and.w	r1, r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	430a      	orrs	r2, r1
 800267c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800267e:	bf00      	nop
 8002680:	371c      	adds	r7, #28
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	03ff63ff 	.word	0x03ff63ff

08002690 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	d138      	bne.n	8002718 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e032      	b.n	800271a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2224      	movs	r2, #36	; 0x24
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6819      	ldr	r1, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	e000      	b.n	800271a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002718:	2302      	movs	r3, #2
  }
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002726:	b480      	push	{r7}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b20      	cmp	r3, #32
 800273a:	d139      	bne.n	80027b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002746:	2302      	movs	r3, #2
 8002748:	e033      	b.n	80027b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2224      	movs	r2, #36	; 0x24
 8002756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002778:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4313      	orrs	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e000      	b.n	80027b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027b0:	2302      	movs	r3, #2
  }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40007000 	.word	0x40007000

080027dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ea:	d130      	bne.n	800284e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ec:	4b23      	ldr	r3, [pc, #140]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027f8:	d038      	beq.n	800286c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002802:	4a1e      	ldr	r2, [pc, #120]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002804:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002808:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800280a:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2232      	movs	r2, #50	; 0x32
 8002810:	fb02 f303 	mul.w	r3, r2, r3
 8002814:	4a1b      	ldr	r2, [pc, #108]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	0c9b      	lsrs	r3, r3, #18
 800281c:	3301      	adds	r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002820:	e002      	b.n	8002828 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3b01      	subs	r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002834:	d102      	bne.n	800283c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f2      	bne.n	8002822 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002848:	d110      	bne.n	800286c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e00f      	b.n	800286e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800285a:	d007      	beq.n	800286c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002864:	4a05      	ldr	r2, [pc, #20]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800286a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40007000 	.word	0x40007000
 8002880:	20000000 	.word	0x20000000
 8002884:	431bde83 	.word	0x431bde83

08002888 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e3ca      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289a:	4b97      	ldr	r3, [pc, #604]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028a4:	4b94      	ldr	r3, [pc, #592]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80e4 	beq.w	8002a84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <HAL_RCC_OscConfig+0x4a>
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	2b0c      	cmp	r3, #12
 80028c6:	f040 808b 	bne.w	80029e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	f040 8087 	bne.w	80029e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028d2:	4b89      	ldr	r3, [pc, #548]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <HAL_RCC_OscConfig+0x62>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e3a2      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1a      	ldr	r2, [r3, #32]
 80028ee:	4b82      	ldr	r3, [pc, #520]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d004      	beq.n	8002904 <HAL_RCC_OscConfig+0x7c>
 80028fa:	4b7f      	ldr	r3, [pc, #508]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002902:	e005      	b.n	8002910 <HAL_RCC_OscConfig+0x88>
 8002904:	4b7c      	ldr	r3, [pc, #496]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002910:	4293      	cmp	r3, r2
 8002912:	d223      	bcs.n	800295c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	4618      	mov	r0, r3
 800291a:	f000 fd55 	bl	80033c8 <RCC_SetFlashLatencyFromMSIRange>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e383      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002928:	4b73      	ldr	r3, [pc, #460]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a72      	ldr	r2, [pc, #456]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 800292e:	f043 0308 	orr.w	r3, r3, #8
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b70      	ldr	r3, [pc, #448]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	496d      	ldr	r1, [pc, #436]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002946:	4b6c      	ldr	r3, [pc, #432]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	4968      	ldr	r1, [pc, #416]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]
 800295a:	e025      	b.n	80029a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800295c:	4b66      	ldr	r3, [pc, #408]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a65      	ldr	r2, [pc, #404]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002962:	f043 0308 	orr.w	r3, r3, #8
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b63      	ldr	r3, [pc, #396]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	4960      	ldr	r1, [pc, #384]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800297a:	4b5f      	ldr	r3, [pc, #380]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	495b      	ldr	r1, [pc, #364]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d109      	bne.n	80029a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fd15 	bl	80033c8 <RCC_SetFlashLatencyFromMSIRange>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e343      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029a8:	f000 fc4a 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80029ac:	4602      	mov	r2, r0
 80029ae:	4b52      	ldr	r3, [pc, #328]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	4950      	ldr	r1, [pc, #320]	; (8002afc <HAL_RCC_OscConfig+0x274>)
 80029ba:	5ccb      	ldrb	r3, [r1, r3]
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	fa22 f303 	lsr.w	r3, r2, r3
 80029c4:	4a4e      	ldr	r2, [pc, #312]	; (8002b00 <HAL_RCC_OscConfig+0x278>)
 80029c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029c8:	4b4e      	ldr	r3, [pc, #312]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe fdb5 	bl	800153c <HAL_InitTick>
 80029d2:	4603      	mov	r3, r0
 80029d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d052      	beq.n	8002a82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	e327      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d032      	beq.n	8002a4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029e8:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a42      	ldr	r2, [pc, #264]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029f4:	f7fe fdf2 	bl	80015dc <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029fc:	f7fe fdee 	bl	80015dc <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e310      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a0e:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a1a:	4b37      	ldr	r3, [pc, #220]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a36      	ldr	r2, [pc, #216]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002a20:	f043 0308 	orr.w	r3, r3, #8
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	4b34      	ldr	r3, [pc, #208]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	4931      	ldr	r1, [pc, #196]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a38:	4b2f      	ldr	r3, [pc, #188]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	492c      	ldr	r1, [pc, #176]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	604b      	str	r3, [r1, #4]
 8002a4c:	e01a      	b.n	8002a84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a4e:	4b2a      	ldr	r3, [pc, #168]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a29      	ldr	r2, [pc, #164]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a5a:	f7fe fdbf 	bl	80015dc <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a62:	f7fe fdbb 	bl	80015dc <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e2dd      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a74:	4b20      	ldr	r3, [pc, #128]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x1da>
 8002a80:	e000      	b.n	8002a84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d074      	beq.n	8002b7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d005      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x21a>
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	2b0c      	cmp	r3, #12
 8002a9a:	d10e      	bne.n	8002aba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d10b      	bne.n	8002aba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d064      	beq.n	8002b78 <HAL_RCC_OscConfig+0x2f0>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d160      	bne.n	8002b78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e2ba      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac2:	d106      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x24a>
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	e026      	b.n	8002b20 <HAL_RCC_OscConfig+0x298>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ada:	d115      	bne.n	8002b08 <HAL_RCC_OscConfig+0x280>
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a05      	ldr	r2, [pc, #20]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002ae2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a02      	ldr	r2, [pc, #8]	; (8002af8 <HAL_RCC_OscConfig+0x270>)
 8002aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	e014      	b.n	8002b20 <HAL_RCC_OscConfig+0x298>
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000
 8002afc:	08005aec 	.word	0x08005aec
 8002b00:	20000000 	.word	0x20000000
 8002b04:	20000004 	.word	0x20000004
 8002b08:	4ba0      	ldr	r3, [pc, #640]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a9f      	ldr	r2, [pc, #636]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	4b9d      	ldr	r3, [pc, #628]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a9c      	ldr	r2, [pc, #624]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d013      	beq.n	8002b50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7fe fd58 	bl	80015dc <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b30:	f7fe fd54 	bl	80015dc <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	; 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e276      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b42:	4b92      	ldr	r3, [pc, #584]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0x2a8>
 8002b4e:	e014      	b.n	8002b7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fd44 	bl	80015dc <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b58:	f7fe fd40 	bl	80015dc <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e262      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b6a:	4b88      	ldr	r3, [pc, #544]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x2d0>
 8002b76:	e000      	b.n	8002b7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d060      	beq.n	8002c48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_OscConfig+0x310>
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b0c      	cmp	r3, #12
 8002b90:	d119      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d116      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b98:	4b7c      	ldr	r3, [pc, #496]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x328>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e23f      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb0:	4b76      	ldr	r3, [pc, #472]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	061b      	lsls	r3, r3, #24
 8002bbe:	4973      	ldr	r1, [pc, #460]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bc4:	e040      	b.n	8002c48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d023      	beq.n	8002c16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bce:	4b6f      	ldr	r3, [pc, #444]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a6e      	ldr	r2, [pc, #440]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bda:	f7fe fcff 	bl	80015dc <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be2:	f7fe fcfb 	bl	80015dc <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e21d      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf4:	4b65      	ldr	r3, [pc, #404]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f0      	beq.n	8002be2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c00:	4b62      	ldr	r3, [pc, #392]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	061b      	lsls	r3, r3, #24
 8002c0e:	495f      	ldr	r1, [pc, #380]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
 8002c14:	e018      	b.n	8002c48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c16:	4b5d      	ldr	r3, [pc, #372]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a5c      	ldr	r2, [pc, #368]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7fe fcdb 	bl	80015dc <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2a:	f7fe fcd7 	bl	80015dc <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e1f9      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c3c:	4b53      	ldr	r3, [pc, #332]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f0      	bne.n	8002c2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d03c      	beq.n	8002cce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01c      	beq.n	8002c96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5c:	4b4b      	ldr	r3, [pc, #300]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c62:	4a4a      	ldr	r2, [pc, #296]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6c:	f7fe fcb6 	bl	80015dc <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c74:	f7fe fcb2 	bl	80015dc <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e1d4      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c86:	4b41      	ldr	r3, [pc, #260]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0ef      	beq.n	8002c74 <HAL_RCC_OscConfig+0x3ec>
 8002c94:	e01b      	b.n	8002cce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c96:	4b3d      	ldr	r3, [pc, #244]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9c:	4a3b      	ldr	r2, [pc, #236]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002c9e:	f023 0301 	bic.w	r3, r3, #1
 8002ca2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca6:	f7fe fc99 	bl	80015dc <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cae:	f7fe fc95 	bl	80015dc <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e1b7      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cc0:	4b32      	ldr	r3, [pc, #200]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1ef      	bne.n	8002cae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80a6 	beq.w	8002e28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ce0:	4b2a      	ldr	r3, [pc, #168]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10d      	bne.n	8002d08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cec:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	4a26      	ldr	r2, [pc, #152]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf8:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d04:	2301      	movs	r3, #1
 8002d06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d08:	4b21      	ldr	r3, [pc, #132]	; (8002d90 <HAL_RCC_OscConfig+0x508>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d118      	bne.n	8002d46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d14:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <HAL_RCC_OscConfig+0x508>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1d      	ldr	r2, [pc, #116]	; (8002d90 <HAL_RCC_OscConfig+0x508>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d20:	f7fe fc5c 	bl	80015dc <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d28:	f7fe fc58 	bl	80015dc <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e17a      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d3a:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <HAL_RCC_OscConfig+0x508>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d108      	bne.n	8002d60 <HAL_RCC_OscConfig+0x4d8>
 8002d4e:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	4a0d      	ldr	r2, [pc, #52]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d5e:	e029      	b.n	8002db4 <HAL_RCC_OscConfig+0x52c>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b05      	cmp	r3, #5
 8002d66:	d115      	bne.n	8002d94 <HAL_RCC_OscConfig+0x50c>
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6e:	4a07      	ldr	r2, [pc, #28]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d78:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7e:	4a03      	ldr	r2, [pc, #12]	; (8002d8c <HAL_RCC_OscConfig+0x504>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d88:	e014      	b.n	8002db4 <HAL_RCC_OscConfig+0x52c>
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40007000 	.word	0x40007000
 8002d94:	4b9c      	ldr	r3, [pc, #624]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9a:	4a9b      	ldr	r2, [pc, #620]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002da4:	4b98      	ldr	r3, [pc, #608]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	4a97      	ldr	r2, [pc, #604]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002dac:	f023 0304 	bic.w	r3, r3, #4
 8002db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d016      	beq.n	8002dea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7fe fc0e 	bl	80015dc <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc4:	f7fe fc0a 	bl	80015dc <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e12a      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dda:	4b8b      	ldr	r3, [pc, #556]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0ed      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x53c>
 8002de8:	e015      	b.n	8002e16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dea:	f7fe fbf7 	bl	80015dc <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002df0:	e00a      	b.n	8002e08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f7fe fbf3 	bl	80015dc <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e113      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e08:	4b7f      	ldr	r3, [pc, #508]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1ed      	bne.n	8002df2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e16:	7ffb      	ldrb	r3, [r7, #31]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d105      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1c:	4b7a      	ldr	r3, [pc, #488]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e20:	4a79      	ldr	r2, [pc, #484]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e26:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80fe 	beq.w	800302e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	f040 80d0 	bne.w	8002fdc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e3c:	4b72      	ldr	r3, [pc, #456]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f003 0203 	and.w	r2, r3, #3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d130      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d127      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d11f      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e7c:	2a07      	cmp	r2, #7
 8002e7e:	bf14      	ite	ne
 8002e80:	2201      	movne	r2, #1
 8002e82:	2200      	moveq	r2, #0
 8002e84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d113      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	3b01      	subs	r3, #1
 8002e98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d109      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	085b      	lsrs	r3, r3, #1
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d06e      	beq.n	8002f90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b0c      	cmp	r3, #12
 8002eb6:	d069      	beq.n	8002f8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002eb8:	4b53      	ldr	r3, [pc, #332]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d105      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ec4:	4b50      	ldr	r3, [pc, #320]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0ad      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ed4:	4b4c      	ldr	r3, [pc, #304]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a4b      	ldr	r2, [pc, #300]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ede:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ee0:	f7fe fb7c 	bl	80015dc <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee8:	f7fe fb78 	bl	80015dc <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e09a      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002efa:	4b43      	ldr	r3, [pc, #268]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f06:	4b40      	ldr	r3, [pc, #256]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	4b40      	ldr	r3, [pc, #256]	; (800300c <HAL_RCC_OscConfig+0x784>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f16:	3a01      	subs	r2, #1
 8002f18:	0112      	lsls	r2, r2, #4
 8002f1a:	4311      	orrs	r1, r2
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f20:	0212      	lsls	r2, r2, #8
 8002f22:	4311      	orrs	r1, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f28:	0852      	lsrs	r2, r2, #1
 8002f2a:	3a01      	subs	r2, #1
 8002f2c:	0552      	lsls	r2, r2, #21
 8002f2e:	4311      	orrs	r1, r2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f34:	0852      	lsrs	r2, r2, #1
 8002f36:	3a01      	subs	r2, #1
 8002f38:	0652      	lsls	r2, r2, #25
 8002f3a:	4311      	orrs	r1, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f40:	0912      	lsrs	r2, r2, #4
 8002f42:	0452      	lsls	r2, r2, #17
 8002f44:	430a      	orrs	r2, r1
 8002f46:	4930      	ldr	r1, [pc, #192]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f4c:	4b2e      	ldr	r3, [pc, #184]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a2d      	ldr	r2, [pc, #180]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f58:	4b2b      	ldr	r3, [pc, #172]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4a2a      	ldr	r2, [pc, #168]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f64:	f7fe fb3a 	bl	80015dc <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7fe fb36 	bl	80015dc <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e058      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f7e:	4b22      	ldr	r3, [pc, #136]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f8a:	e050      	b.n	800302e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e04f      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f90:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d148      	bne.n	800302e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f9c:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a19      	ldr	r2, [pc, #100]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fa8:	4b17      	ldr	r3, [pc, #92]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4a16      	ldr	r2, [pc, #88]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fb4:	f7fe fb12 	bl	80015dc <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fe fb0e 	bl	80015dc <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e030      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fce:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x734>
 8002fda:	e028      	b.n	800302e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d023      	beq.n	800302a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe2:	4b09      	ldr	r3, [pc, #36]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a08      	ldr	r2, [pc, #32]	; (8003008 <HAL_RCC_OscConfig+0x780>)
 8002fe8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fee:	f7fe faf5 	bl	80015dc <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff4:	e00c      	b.n	8003010 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7fe faf1 	bl	80015dc <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d905      	bls.n	8003010 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e013      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
 8003008:	40021000 	.word	0x40021000
 800300c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003010:	4b09      	ldr	r3, [pc, #36]	; (8003038 <HAL_RCC_OscConfig+0x7b0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1ec      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_RCC_OscConfig+0x7b0>)
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	4905      	ldr	r1, [pc, #20]	; (8003038 <HAL_RCC_OscConfig+0x7b0>)
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_RCC_OscConfig+0x7b4>)
 8003024:	4013      	ands	r3, r2
 8003026:	60cb      	str	r3, [r1, #12]
 8003028:	e001      	b.n	800302e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3720      	adds	r7, #32
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000
 800303c:	feeefffc 	.word	0xfeeefffc

08003040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0e7      	b.n	8003224 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003054:	4b75      	ldr	r3, [pc, #468]	; (800322c <HAL_RCC_ClockConfig+0x1ec>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d910      	bls.n	8003084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b72      	ldr	r3, [pc, #456]	; (800322c <HAL_RCC_ClockConfig+0x1ec>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 0207 	bic.w	r2, r3, #7
 800306a:	4970      	ldr	r1, [pc, #448]	; (800322c <HAL_RCC_ClockConfig+0x1ec>)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b6e      	ldr	r3, [pc, #440]	; (800322c <HAL_RCC_ClockConfig+0x1ec>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0cf      	b.n	8003224 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d010      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	4b66      	ldr	r3, [pc, #408]	; (8003230 <HAL_RCC_ClockConfig+0x1f0>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800309c:	429a      	cmp	r2, r3
 800309e:	d908      	bls.n	80030b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a0:	4b63      	ldr	r3, [pc, #396]	; (8003230 <HAL_RCC_ClockConfig+0x1f0>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4960      	ldr	r1, [pc, #384]	; (8003230 <HAL_RCC_ClockConfig+0x1f0>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d04c      	beq.n	8003158 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c6:	4b5a      	ldr	r3, [pc, #360]	; (8003230 <HAL_RCC_ClockConfig+0x1f0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d121      	bne.n	8003116 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e0a6      	b.n	8003224 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030de:	4b54      	ldr	r3, [pc, #336]	; (8003230 <HAL_RCC_ClockConfig+0x1f0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d115      	bne.n	8003116 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e09a      	b.n	8003224 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d107      	bne.n	8003106 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030f6:	4b4e      	ldr	r3, [pc, #312]	; (8003230 <HAL_RCC_ClockConfig+0x1f0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e08e      	b.n	8003224 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003106:	4b4a      	ldr	r3, [pc, #296]	; (8003230 <HAL_RCC_ClockConfig+0x1f0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e086      	b.n	8003224 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003116:	4b46      	ldr	r3, [pc, #280]	; (8003230 <HAL_RCC_ClockConfig+0x1f0>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f023 0203 	bic.w	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4943      	ldr	r1, [pc, #268]	; (8003230 <HAL_RCC_ClockConfig+0x1f0>)
 8003124:	4313      	orrs	r3, r2
 8003126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003128:	f7fe fa58 	bl	80015dc <HAL_GetTick>
 800312c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312e:	e00a      	b.n	8003146 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003130:	f7fe fa54 	bl	80015dc <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	; 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e06e      	b.n	8003224 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003146:	4b3a      	ldr	r3, [pc, #232]	; (8003230 <HAL_RCC_ClockConfig+0x1f0>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 020c 	and.w	r2, r3, #12
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	429a      	cmp	r2, r3
 8003156:	d1eb      	bne.n	8003130 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d010      	beq.n	8003186 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	4b31      	ldr	r3, [pc, #196]	; (8003230 <HAL_RCC_ClockConfig+0x1f0>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003170:	429a      	cmp	r2, r3
 8003172:	d208      	bcs.n	8003186 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003174:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <HAL_RCC_ClockConfig+0x1f0>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	492b      	ldr	r1, [pc, #172]	; (8003230 <HAL_RCC_ClockConfig+0x1f0>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003186:	4b29      	ldr	r3, [pc, #164]	; (800322c <HAL_RCC_ClockConfig+0x1ec>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d210      	bcs.n	80031b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003194:	4b25      	ldr	r3, [pc, #148]	; (800322c <HAL_RCC_ClockConfig+0x1ec>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f023 0207 	bic.w	r2, r3, #7
 800319c:	4923      	ldr	r1, [pc, #140]	; (800322c <HAL_RCC_ClockConfig+0x1ec>)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a4:	4b21      	ldr	r3, [pc, #132]	; (800322c <HAL_RCC_ClockConfig+0x1ec>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d001      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e036      	b.n	8003224 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d008      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c2:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <HAL_RCC_ClockConfig+0x1f0>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	4918      	ldr	r1, [pc, #96]	; (8003230 <HAL_RCC_ClockConfig+0x1f0>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031e0:	4b13      	ldr	r3, [pc, #76]	; (8003230 <HAL_RCC_ClockConfig+0x1f0>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4910      	ldr	r1, [pc, #64]	; (8003230 <HAL_RCC_ClockConfig+0x1f0>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031f4:	f000 f824 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80031f8:	4602      	mov	r2, r0
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <HAL_RCC_ClockConfig+0x1f0>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	490b      	ldr	r1, [pc, #44]	; (8003234 <HAL_RCC_ClockConfig+0x1f4>)
 8003206:	5ccb      	ldrb	r3, [r1, r3]
 8003208:	f003 031f 	and.w	r3, r3, #31
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
 8003210:	4a09      	ldr	r2, [pc, #36]	; (8003238 <HAL_RCC_ClockConfig+0x1f8>)
 8003212:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003214:	4b09      	ldr	r3, [pc, #36]	; (800323c <HAL_RCC_ClockConfig+0x1fc>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe f98f 	bl	800153c <HAL_InitTick>
 800321e:	4603      	mov	r3, r0
 8003220:	72fb      	strb	r3, [r7, #11]

  return status;
 8003222:	7afb      	ldrb	r3, [r7, #11]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40022000 	.word	0x40022000
 8003230:	40021000 	.word	0x40021000
 8003234:	08005aec 	.word	0x08005aec
 8003238:	20000000 	.word	0x20000000
 800323c:	20000004 	.word	0x20000004

08003240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003240:	b480      	push	{r7}
 8003242:	b089      	sub	sp, #36	; 0x24
 8003244:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
 800324a:	2300      	movs	r3, #0
 800324c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800324e:	4b3e      	ldr	r3, [pc, #248]	; (8003348 <HAL_RCC_GetSysClockFreq+0x108>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003258:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <HAL_RCC_GetSysClockFreq+0x108>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0x34>
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b0c      	cmp	r3, #12
 800326c:	d121      	bne.n	80032b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d11e      	bne.n	80032b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003274:	4b34      	ldr	r3, [pc, #208]	; (8003348 <HAL_RCC_GetSysClockFreq+0x108>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d107      	bne.n	8003290 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003280:	4b31      	ldr	r3, [pc, #196]	; (8003348 <HAL_RCC_GetSysClockFreq+0x108>)
 8003282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003286:	0a1b      	lsrs	r3, r3, #8
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	e005      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003290:	4b2d      	ldr	r3, [pc, #180]	; (8003348 <HAL_RCC_GetSysClockFreq+0x108>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800329c:	4a2b      	ldr	r2, [pc, #172]	; (800334c <HAL_RCC_GetSysClockFreq+0x10c>)
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10d      	bne.n	80032c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032b0:	e00a      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d102      	bne.n	80032be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032b8:	4b25      	ldr	r3, [pc, #148]	; (8003350 <HAL_RCC_GetSysClockFreq+0x110>)
 80032ba:	61bb      	str	r3, [r7, #24]
 80032bc:	e004      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032c4:	4b23      	ldr	r3, [pc, #140]	; (8003354 <HAL_RCC_GetSysClockFreq+0x114>)
 80032c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b0c      	cmp	r3, #12
 80032cc:	d134      	bne.n	8003338 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032ce:	4b1e      	ldr	r3, [pc, #120]	; (8003348 <HAL_RCC_GetSysClockFreq+0x108>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d003      	beq.n	80032e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d003      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0xac>
 80032e4:	e005      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032e6:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <HAL_RCC_GetSysClockFreq+0x110>)
 80032e8:	617b      	str	r3, [r7, #20]
      break;
 80032ea:	e005      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032ec:	4b19      	ldr	r3, [pc, #100]	; (8003354 <HAL_RCC_GetSysClockFreq+0x114>)
 80032ee:	617b      	str	r3, [r7, #20]
      break;
 80032f0:	e002      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	617b      	str	r3, [r7, #20]
      break;
 80032f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032f8:	4b13      	ldr	r3, [pc, #76]	; (8003348 <HAL_RCC_GetSysClockFreq+0x108>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	091b      	lsrs	r3, r3, #4
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	3301      	adds	r3, #1
 8003304:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <HAL_RCC_GetSysClockFreq+0x108>)
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	0a1b      	lsrs	r3, r3, #8
 800330c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	fb03 f202 	mul.w	r2, r3, r2
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	fbb2 f3f3 	udiv	r3, r2, r3
 800331c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800331e:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <HAL_RCC_GetSysClockFreq+0x108>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	0e5b      	lsrs	r3, r3, #25
 8003324:	f003 0303 	and.w	r3, r3, #3
 8003328:	3301      	adds	r3, #1
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	fbb2 f3f3 	udiv	r3, r2, r3
 8003336:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003338:	69bb      	ldr	r3, [r7, #24]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3724      	adds	r7, #36	; 0x24
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	08005b04 	.word	0x08005b04
 8003350:	00f42400 	.word	0x00f42400
 8003354:	007a1200 	.word	0x007a1200

08003358 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800335c:	4b03      	ldr	r3, [pc, #12]	; (800336c <HAL_RCC_GetHCLKFreq+0x14>)
 800335e:	681b      	ldr	r3, [r3, #0]
}
 8003360:	4618      	mov	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20000000 	.word	0x20000000

08003370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003374:	f7ff fff0 	bl	8003358 <HAL_RCC_GetHCLKFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_RCC_GetPCLK1Freq+0x24>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	0a1b      	lsrs	r3, r3, #8
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4904      	ldr	r1, [pc, #16]	; (8003398 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003386:	5ccb      	ldrb	r3, [r1, r3]
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40021000 	.word	0x40021000
 8003398:	08005afc 	.word	0x08005afc

0800339c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033a0:	f7ff ffda 	bl	8003358 <HAL_RCC_GetHCLKFreq>
 80033a4:	4602      	mov	r2, r0
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	0adb      	lsrs	r3, r3, #11
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	4904      	ldr	r1, [pc, #16]	; (80033c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033b2:	5ccb      	ldrb	r3, [r1, r3]
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40021000 	.word	0x40021000
 80033c4:	08005afc 	.word	0x08005afc

080033c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033d0:	2300      	movs	r3, #0
 80033d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033d4:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033e0:	f7ff f9ee 	bl	80027c0 <HAL_PWREx_GetVoltageRange>
 80033e4:	6178      	str	r0, [r7, #20]
 80033e6:	e014      	b.n	8003412 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033e8:	4b25      	ldr	r3, [pc, #148]	; (8003480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ec:	4a24      	ldr	r2, [pc, #144]	; (8003480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f2:	6593      	str	r3, [r2, #88]	; 0x58
 80033f4:	4b22      	ldr	r3, [pc, #136]	; (8003480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003400:	f7ff f9de 	bl	80027c0 <HAL_PWREx_GetVoltageRange>
 8003404:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003406:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340a:	4a1d      	ldr	r2, [pc, #116]	; (8003480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800340c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003410:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003418:	d10b      	bne.n	8003432 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b80      	cmp	r3, #128	; 0x80
 800341e:	d919      	bls.n	8003454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2ba0      	cmp	r3, #160	; 0xa0
 8003424:	d902      	bls.n	800342c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003426:	2302      	movs	r3, #2
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	e013      	b.n	8003454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800342c:	2301      	movs	r3, #1
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	e010      	b.n	8003454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b80      	cmp	r3, #128	; 0x80
 8003436:	d902      	bls.n	800343e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003438:	2303      	movs	r3, #3
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	e00a      	b.n	8003454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b80      	cmp	r3, #128	; 0x80
 8003442:	d102      	bne.n	800344a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003444:	2302      	movs	r3, #2
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	e004      	b.n	8003454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b70      	cmp	r3, #112	; 0x70
 800344e:	d101      	bne.n	8003454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003450:	2301      	movs	r3, #1
 8003452:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f023 0207 	bic.w	r2, r3, #7
 800345c:	4909      	ldr	r1, [pc, #36]	; (8003484 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003464:	4b07      	ldr	r3, [pc, #28]	; (8003484 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	429a      	cmp	r2, r3
 8003470:	d001      	beq.n	8003476 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40021000 	.word	0x40021000
 8003484:	40022000 	.word	0x40022000

08003488 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003490:	2300      	movs	r3, #0
 8003492:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003494:	2300      	movs	r3, #0
 8003496:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d041      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034ac:	d02a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034b2:	d824      	bhi.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034b8:	d008      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034be:	d81e      	bhi.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c8:	d010      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034ca:	e018      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034cc:	4b86      	ldr	r3, [pc, #536]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4a85      	ldr	r2, [pc, #532]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034d8:	e015      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3304      	adds	r3, #4
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fabb 	bl	8003a5c <RCCEx_PLLSAI1_Config>
 80034e6:	4603      	mov	r3, r0
 80034e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034ea:	e00c      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3320      	adds	r3, #32
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fba6 	bl	8003c44 <RCCEx_PLLSAI2_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034fc:	e003      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	74fb      	strb	r3, [r7, #19]
      break;
 8003502:	e000      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003504:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003506:	7cfb      	ldrb	r3, [r7, #19]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10b      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800350c:	4b76      	ldr	r3, [pc, #472]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003512:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800351a:	4973      	ldr	r1, [pc, #460]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003522:	e001      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003524:	7cfb      	ldrb	r3, [r7, #19]
 8003526:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d041      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003538:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800353c:	d02a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800353e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003542:	d824      	bhi.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003544:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003548:	d008      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800354a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800354e:	d81e      	bhi.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003558:	d010      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800355a:	e018      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800355c:	4b62      	ldr	r3, [pc, #392]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4a61      	ldr	r2, [pc, #388]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003566:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003568:	e015      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3304      	adds	r3, #4
 800356e:	2100      	movs	r1, #0
 8003570:	4618      	mov	r0, r3
 8003572:	f000 fa73 	bl	8003a5c <RCCEx_PLLSAI1_Config>
 8003576:	4603      	mov	r3, r0
 8003578:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800357a:	e00c      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3320      	adds	r3, #32
 8003580:	2100      	movs	r1, #0
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fb5e 	bl	8003c44 <RCCEx_PLLSAI2_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800358c:	e003      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	74fb      	strb	r3, [r7, #19]
      break;
 8003592:	e000      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003596:	7cfb      	ldrb	r3, [r7, #19]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10b      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800359c:	4b52      	ldr	r3, [pc, #328]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035aa:	494f      	ldr	r1, [pc, #316]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035b2:	e001      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b4:	7cfb      	ldrb	r3, [r7, #19]
 80035b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 80a0 	beq.w	8003706 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c6:	2300      	movs	r3, #0
 80035c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035ca:	4b47      	ldr	r3, [pc, #284]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80035da:	2300      	movs	r3, #0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00d      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e0:	4b41      	ldr	r3, [pc, #260]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e4:	4a40      	ldr	r2, [pc, #256]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ea:	6593      	str	r3, [r2, #88]	; 0x58
 80035ec:	4b3e      	ldr	r3, [pc, #248]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f8:	2301      	movs	r3, #1
 80035fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035fc:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a3a      	ldr	r2, [pc, #232]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003606:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003608:	f7fd ffe8 	bl	80015dc <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800360e:	e009      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003610:	f7fd ffe4 	bl	80015dc <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d902      	bls.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	74fb      	strb	r3, [r7, #19]
        break;
 8003622:	e005      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003624:	4b31      	ldr	r3, [pc, #196]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ef      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d15c      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003636:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003640:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01f      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	429a      	cmp	r2, r3
 8003652:	d019      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003654:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003660:	4b21      	ldr	r3, [pc, #132]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003666:	4a20      	ldr	r2, [pc, #128]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003670:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003676:	4a1c      	ldr	r2, [pc, #112]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800367c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003680:	4a19      	ldr	r2, [pc, #100]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d016      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003692:	f7fd ffa3 	bl	80015dc <HAL_GetTick>
 8003696:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003698:	e00b      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369a:	f7fd ff9f 	bl	80015dc <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d902      	bls.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	74fb      	strb	r3, [r7, #19]
            break;
 80036b0:	e006      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b2:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0ec      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80036c0:	7cfb      	ldrb	r3, [r7, #19]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036c6:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d6:	4904      	ldr	r1, [pc, #16]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036de:	e009      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036e0:	7cfb      	ldrb	r3, [r7, #19]
 80036e2:	74bb      	strb	r3, [r7, #18]
 80036e4:	e006      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f0:	7cfb      	ldrb	r3, [r7, #19]
 80036f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036f4:	7c7b      	ldrb	r3, [r7, #17]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d105      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fa:	4b9e      	ldr	r3, [pc, #632]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fe:	4a9d      	ldr	r2, [pc, #628]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003704:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003712:	4b98      	ldr	r3, [pc, #608]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003718:	f023 0203 	bic.w	r2, r3, #3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	4994      	ldr	r1, [pc, #592]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003734:	4b8f      	ldr	r3, [pc, #572]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	f023 020c 	bic.w	r2, r3, #12
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003742:	498c      	ldr	r1, [pc, #560]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003756:	4b87      	ldr	r3, [pc, #540]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	4983      	ldr	r1, [pc, #524]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003778:	4b7e      	ldr	r3, [pc, #504]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	497b      	ldr	r1, [pc, #492]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800379a:	4b76      	ldr	r3, [pc, #472]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a8:	4972      	ldr	r1, [pc, #456]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037bc:	4b6d      	ldr	r3, [pc, #436]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ca:	496a      	ldr	r1, [pc, #424]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037de:	4b65      	ldr	r3, [pc, #404]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ec:	4961      	ldr	r1, [pc, #388]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003800:	4b5c      	ldr	r3, [pc, #368]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380e:	4959      	ldr	r1, [pc, #356]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003822:	4b54      	ldr	r3, [pc, #336]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003830:	4950      	ldr	r1, [pc, #320]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003844:	4b4b      	ldr	r3, [pc, #300]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	4948      	ldr	r1, [pc, #288]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003866:	4b43      	ldr	r3, [pc, #268]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	493f      	ldr	r1, [pc, #252]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d028      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003888:	4b3a      	ldr	r3, [pc, #232]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003896:	4937      	ldr	r1, [pc, #220]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a6:	d106      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a8:	4b32      	ldr	r3, [pc, #200]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a31      	ldr	r2, [pc, #196]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038b2:	60d3      	str	r3, [r2, #12]
 80038b4:	e011      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038be:	d10c      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3304      	adds	r3, #4
 80038c4:	2101      	movs	r1, #1
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 f8c8 	bl	8003a5c <RCCEx_PLLSAI1_Config>
 80038cc:	4603      	mov	r3, r0
 80038ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038d0:	7cfb      	ldrb	r3, [r7, #19]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80038d6:	7cfb      	ldrb	r3, [r7, #19]
 80038d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d028      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038e6:	4b23      	ldr	r3, [pc, #140]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	491f      	ldr	r1, [pc, #124]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003904:	d106      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003906:	4b1b      	ldr	r3, [pc, #108]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	4a1a      	ldr	r2, [pc, #104]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003910:	60d3      	str	r3, [r2, #12]
 8003912:	e011      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800391c:	d10c      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3304      	adds	r3, #4
 8003922:	2101      	movs	r1, #1
 8003924:	4618      	mov	r0, r3
 8003926:	f000 f899 	bl	8003a5c <RCCEx_PLLSAI1_Config>
 800392a:	4603      	mov	r3, r0
 800392c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800392e:	7cfb      	ldrb	r3, [r7, #19]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003934:	7cfb      	ldrb	r3, [r7, #19]
 8003936:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d02b      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003952:	4908      	ldr	r1, [pc, #32]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003962:	d109      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003964:	4b03      	ldr	r3, [pc, #12]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4a02      	ldr	r2, [pc, #8]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800396e:	60d3      	str	r3, [r2, #12]
 8003970:	e014      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003980:	d10c      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3304      	adds	r3, #4
 8003986:	2101      	movs	r1, #1
 8003988:	4618      	mov	r0, r3
 800398a:	f000 f867 	bl	8003a5c <RCCEx_PLLSAI1_Config>
 800398e:	4603      	mov	r3, r0
 8003990:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003992:	7cfb      	ldrb	r3, [r7, #19]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003998:	7cfb      	ldrb	r3, [r7, #19]
 800399a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d02f      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039a8:	4b2b      	ldr	r3, [pc, #172]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039b6:	4928      	ldr	r1, [pc, #160]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039c6:	d10d      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3304      	adds	r3, #4
 80039cc:	2102      	movs	r1, #2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f844 	bl	8003a5c <RCCEx_PLLSAI1_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039d8:	7cfb      	ldrb	r3, [r7, #19]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d014      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039de:	7cfb      	ldrb	r3, [r7, #19]
 80039e0:	74bb      	strb	r3, [r7, #18]
 80039e2:	e011      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3320      	adds	r3, #32
 80039f2:	2102      	movs	r1, #2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 f925 	bl	8003c44 <RCCEx_PLLSAI2_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039fe:	7cfb      	ldrb	r3, [r7, #19]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a14:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a22:	490d      	ldr	r1, [pc, #52]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00b      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a46:	4904      	ldr	r1, [pc, #16]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40021000 	.word	0x40021000

08003a5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a6a:	4b75      	ldr	r3, [pc, #468]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d018      	beq.n	8003aa8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a76:	4b72      	ldr	r3, [pc, #456]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f003 0203 	and.w	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d10d      	bne.n	8003aa2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
       ||
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a8e:	4b6c      	ldr	r3, [pc, #432]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d047      	beq.n	8003b32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
 8003aa6:	e044      	b.n	8003b32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d018      	beq.n	8003ae2 <RCCEx_PLLSAI1_Config+0x86>
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d825      	bhi.n	8003b00 <RCCEx_PLLSAI1_Config+0xa4>
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d002      	beq.n	8003abe <RCCEx_PLLSAI1_Config+0x62>
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d009      	beq.n	8003ad0 <RCCEx_PLLSAI1_Config+0x74>
 8003abc:	e020      	b.n	8003b00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003abe:	4b60      	ldr	r3, [pc, #384]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d11d      	bne.n	8003b06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ace:	e01a      	b.n	8003b06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ad0:	4b5b      	ldr	r3, [pc, #364]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d116      	bne.n	8003b0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae0:	e013      	b.n	8003b0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ae2:	4b57      	ldr	r3, [pc, #348]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10f      	bne.n	8003b0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aee:	4b54      	ldr	r3, [pc, #336]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d109      	bne.n	8003b0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003afe:	e006      	b.n	8003b0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
      break;
 8003b04:	e004      	b.n	8003b10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b06:	bf00      	nop
 8003b08:	e002      	b.n	8003b10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e000      	b.n	8003b10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10d      	bne.n	8003b32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b16:	4b4a      	ldr	r3, [pc, #296]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6819      	ldr	r1, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	4944      	ldr	r1, [pc, #272]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d17d      	bne.n	8003c34 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b38:	4b41      	ldr	r3, [pc, #260]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a40      	ldr	r2, [pc, #256]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b44:	f7fd fd4a 	bl	80015dc <HAL_GetTick>
 8003b48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b4a:	e009      	b.n	8003b60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b4c:	f7fd fd46 	bl	80015dc <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d902      	bls.n	8003b60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b5e:	e005      	b.n	8003b6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b60:	4b37      	ldr	r3, [pc, #220]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1ef      	bne.n	8003b4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d160      	bne.n	8003c34 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d111      	bne.n	8003b9c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b78:	4b31      	ldr	r3, [pc, #196]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6892      	ldr	r2, [r2, #8]
 8003b88:	0211      	lsls	r1, r2, #8
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68d2      	ldr	r2, [r2, #12]
 8003b8e:	0912      	lsrs	r2, r2, #4
 8003b90:	0452      	lsls	r2, r2, #17
 8003b92:	430a      	orrs	r2, r1
 8003b94:	492a      	ldr	r1, [pc, #168]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	610b      	str	r3, [r1, #16]
 8003b9a:	e027      	b.n	8003bec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d112      	bne.n	8003bc8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ba2:	4b27      	ldr	r3, [pc, #156]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003baa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6892      	ldr	r2, [r2, #8]
 8003bb2:	0211      	lsls	r1, r2, #8
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6912      	ldr	r2, [r2, #16]
 8003bb8:	0852      	lsrs	r2, r2, #1
 8003bba:	3a01      	subs	r2, #1
 8003bbc:	0552      	lsls	r2, r2, #21
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	491f      	ldr	r1, [pc, #124]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	610b      	str	r3, [r1, #16]
 8003bc6:	e011      	b.n	8003bec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6892      	ldr	r2, [r2, #8]
 8003bd8:	0211      	lsls	r1, r2, #8
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6952      	ldr	r2, [r2, #20]
 8003bde:	0852      	lsrs	r2, r2, #1
 8003be0:	3a01      	subs	r2, #1
 8003be2:	0652      	lsls	r2, r2, #25
 8003be4:	430a      	orrs	r2, r1
 8003be6:	4916      	ldr	r1, [pc, #88]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bec:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a13      	ldr	r2, [pc, #76]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bf6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf8:	f7fd fcf0 	bl	80015dc <HAL_GetTick>
 8003bfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bfe:	e009      	b.n	8003c14 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c00:	f7fd fcec 	bl	80015dc <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d902      	bls.n	8003c14 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	73fb      	strb	r3, [r7, #15]
          break;
 8003c12:	e005      	b.n	8003c20 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c14:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0ef      	beq.n	8003c00 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	4904      	ldr	r1, [pc, #16]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40021000 	.word	0x40021000

08003c44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c52:	4b6a      	ldr	r3, [pc, #424]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d018      	beq.n	8003c90 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c5e:	4b67      	ldr	r3, [pc, #412]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0203 	and.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d10d      	bne.n	8003c8a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
       ||
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c76:	4b61      	ldr	r3, [pc, #388]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
       ||
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d047      	beq.n	8003d1a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
 8003c8e:	e044      	b.n	8003d1a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d018      	beq.n	8003cca <RCCEx_PLLSAI2_Config+0x86>
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d825      	bhi.n	8003ce8 <RCCEx_PLLSAI2_Config+0xa4>
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d002      	beq.n	8003ca6 <RCCEx_PLLSAI2_Config+0x62>
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d009      	beq.n	8003cb8 <RCCEx_PLLSAI2_Config+0x74>
 8003ca4:	e020      	b.n	8003ce8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ca6:	4b55      	ldr	r3, [pc, #340]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d11d      	bne.n	8003cee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb6:	e01a      	b.n	8003cee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cb8:	4b50      	ldr	r3, [pc, #320]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d116      	bne.n	8003cf2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc8:	e013      	b.n	8003cf2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cca:	4b4c      	ldr	r3, [pc, #304]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10f      	bne.n	8003cf6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cd6:	4b49      	ldr	r3, [pc, #292]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ce6:	e006      	b.n	8003cf6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
      break;
 8003cec:	e004      	b.n	8003cf8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cee:	bf00      	nop
 8003cf0:	e002      	b.n	8003cf8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cf2:	bf00      	nop
 8003cf4:	e000      	b.n	8003cf8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cf6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10d      	bne.n	8003d1a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cfe:	4b3f      	ldr	r3, [pc, #252]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	430b      	orrs	r3, r1
 8003d14:	4939      	ldr	r1, [pc, #228]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d167      	bne.n	8003df0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d20:	4b36      	ldr	r3, [pc, #216]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a35      	ldr	r2, [pc, #212]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d2c:	f7fd fc56 	bl	80015dc <HAL_GetTick>
 8003d30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d32:	e009      	b.n	8003d48 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d34:	f7fd fc52 	bl	80015dc <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d902      	bls.n	8003d48 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	73fb      	strb	r3, [r7, #15]
        break;
 8003d46:	e005      	b.n	8003d54 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d48:	4b2c      	ldr	r3, [pc, #176]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1ef      	bne.n	8003d34 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d14a      	bne.n	8003df0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d111      	bne.n	8003d84 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d60:	4b26      	ldr	r3, [pc, #152]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6892      	ldr	r2, [r2, #8]
 8003d70:	0211      	lsls	r1, r2, #8
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68d2      	ldr	r2, [r2, #12]
 8003d76:	0912      	lsrs	r2, r2, #4
 8003d78:	0452      	lsls	r2, r2, #17
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	491f      	ldr	r1, [pc, #124]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	614b      	str	r3, [r1, #20]
 8003d82:	e011      	b.n	8003da8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d84:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6892      	ldr	r2, [r2, #8]
 8003d94:	0211      	lsls	r1, r2, #8
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6912      	ldr	r2, [r2, #16]
 8003d9a:	0852      	lsrs	r2, r2, #1
 8003d9c:	3a01      	subs	r2, #1
 8003d9e:	0652      	lsls	r2, r2, #25
 8003da0:	430a      	orrs	r2, r1
 8003da2:	4916      	ldr	r1, [pc, #88]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003da8:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a13      	ldr	r2, [pc, #76]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db4:	f7fd fc12 	bl	80015dc <HAL_GetTick>
 8003db8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dba:	e009      	b.n	8003dd0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dbc:	f7fd fc0e 	bl	80015dc <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d902      	bls.n	8003dd0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	73fb      	strb	r3, [r7, #15]
          break;
 8003dce:	e005      	b.n	8003ddc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dd0:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0ef      	beq.n	8003dbc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003de2:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de4:	695a      	ldr	r2, [r3, #20]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	4904      	ldr	r1, [pc, #16]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40021000 	.word	0x40021000

08003e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e040      	b.n	8003e94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fd fae4 	bl	80013f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2224      	movs	r2, #36	; 0x24
 8003e2c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0201 	bic.w	r2, r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fb6a 	bl	8004520 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f8af 	bl	8003fb0 <UART_SetConfig>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e01b      	b.n	8003e94 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fbe9 	bl	8004664 <UART_CheckIdleState>
 8003e92:	4603      	mov	r3, r0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08a      	sub	sp, #40	; 0x28
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d178      	bne.n	8003fa6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <HAL_UART_Transmit+0x24>
 8003eba:	88fb      	ldrh	r3, [r7, #6]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e071      	b.n	8003fa8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2221      	movs	r2, #33	; 0x21
 8003ed0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ed2:	f7fd fb83 	bl	80015dc <HAL_GetTick>
 8003ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	88fa      	ldrh	r2, [r7, #6]
 8003edc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	88fa      	ldrh	r2, [r7, #6]
 8003ee4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef0:	d108      	bne.n	8003f04 <HAL_UART_Transmit+0x68>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d104      	bne.n	8003f04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	e003      	b.n	8003f0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f0c:	e030      	b.n	8003f70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2200      	movs	r2, #0
 8003f16:	2180      	movs	r1, #128	; 0x80
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 fc4b 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d004      	beq.n	8003f2e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e03c      	b.n	8003fa8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10b      	bne.n	8003f4c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	881a      	ldrh	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f40:	b292      	uxth	r2, r2
 8003f42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	3302      	adds	r3, #2
 8003f48:	61bb      	str	r3, [r7, #24]
 8003f4a:	e008      	b.n	8003f5e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	781a      	ldrb	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	b292      	uxth	r2, r2
 8003f56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1c8      	bne.n	8003f0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2200      	movs	r2, #0
 8003f84:	2140      	movs	r1, #64	; 0x40
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 fc14 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d004      	beq.n	8003f9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2220      	movs	r2, #32
 8003f96:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e005      	b.n	8003fa8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e000      	b.n	8003fa8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003fa6:	2302      	movs	r3, #2
  }
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb4:	b08a      	sub	sp, #40	; 0x28
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4ba4      	ldr	r3, [pc, #656]	; (8004270 <UART_SetConfig+0x2c0>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a99      	ldr	r2, [pc, #612]	; (8004274 <UART_SetConfig+0x2c4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004018:	4313      	orrs	r3, r2
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402c:	430a      	orrs	r2, r1
 800402e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a90      	ldr	r2, [pc, #576]	; (8004278 <UART_SetConfig+0x2c8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d126      	bne.n	8004088 <UART_SetConfig+0xd8>
 800403a:	4b90      	ldr	r3, [pc, #576]	; (800427c <UART_SetConfig+0x2cc>)
 800403c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	2b03      	cmp	r3, #3
 8004046:	d81b      	bhi.n	8004080 <UART_SetConfig+0xd0>
 8004048:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <UART_SetConfig+0xa0>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	08004061 	.word	0x08004061
 8004054:	08004071 	.word	0x08004071
 8004058:	08004069 	.word	0x08004069
 800405c:	08004079 	.word	0x08004079
 8004060:	2301      	movs	r3, #1
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004066:	e116      	b.n	8004296 <UART_SetConfig+0x2e6>
 8004068:	2302      	movs	r3, #2
 800406a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800406e:	e112      	b.n	8004296 <UART_SetConfig+0x2e6>
 8004070:	2304      	movs	r3, #4
 8004072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004076:	e10e      	b.n	8004296 <UART_SetConfig+0x2e6>
 8004078:	2308      	movs	r3, #8
 800407a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800407e:	e10a      	b.n	8004296 <UART_SetConfig+0x2e6>
 8004080:	2310      	movs	r3, #16
 8004082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004086:	e106      	b.n	8004296 <UART_SetConfig+0x2e6>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a7c      	ldr	r2, [pc, #496]	; (8004280 <UART_SetConfig+0x2d0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d138      	bne.n	8004104 <UART_SetConfig+0x154>
 8004092:	4b7a      	ldr	r3, [pc, #488]	; (800427c <UART_SetConfig+0x2cc>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004098:	f003 030c 	and.w	r3, r3, #12
 800409c:	2b0c      	cmp	r3, #12
 800409e:	d82d      	bhi.n	80040fc <UART_SetConfig+0x14c>
 80040a0:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <UART_SetConfig+0xf8>)
 80040a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a6:	bf00      	nop
 80040a8:	080040dd 	.word	0x080040dd
 80040ac:	080040fd 	.word	0x080040fd
 80040b0:	080040fd 	.word	0x080040fd
 80040b4:	080040fd 	.word	0x080040fd
 80040b8:	080040ed 	.word	0x080040ed
 80040bc:	080040fd 	.word	0x080040fd
 80040c0:	080040fd 	.word	0x080040fd
 80040c4:	080040fd 	.word	0x080040fd
 80040c8:	080040e5 	.word	0x080040e5
 80040cc:	080040fd 	.word	0x080040fd
 80040d0:	080040fd 	.word	0x080040fd
 80040d4:	080040fd 	.word	0x080040fd
 80040d8:	080040f5 	.word	0x080040f5
 80040dc:	2300      	movs	r3, #0
 80040de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040e2:	e0d8      	b.n	8004296 <UART_SetConfig+0x2e6>
 80040e4:	2302      	movs	r3, #2
 80040e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ea:	e0d4      	b.n	8004296 <UART_SetConfig+0x2e6>
 80040ec:	2304      	movs	r3, #4
 80040ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040f2:	e0d0      	b.n	8004296 <UART_SetConfig+0x2e6>
 80040f4:	2308      	movs	r3, #8
 80040f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040fa:	e0cc      	b.n	8004296 <UART_SetConfig+0x2e6>
 80040fc:	2310      	movs	r3, #16
 80040fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004102:	e0c8      	b.n	8004296 <UART_SetConfig+0x2e6>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a5e      	ldr	r2, [pc, #376]	; (8004284 <UART_SetConfig+0x2d4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d125      	bne.n	800415a <UART_SetConfig+0x1aa>
 800410e:	4b5b      	ldr	r3, [pc, #364]	; (800427c <UART_SetConfig+0x2cc>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004114:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004118:	2b30      	cmp	r3, #48	; 0x30
 800411a:	d016      	beq.n	800414a <UART_SetConfig+0x19a>
 800411c:	2b30      	cmp	r3, #48	; 0x30
 800411e:	d818      	bhi.n	8004152 <UART_SetConfig+0x1a2>
 8004120:	2b20      	cmp	r3, #32
 8004122:	d00a      	beq.n	800413a <UART_SetConfig+0x18a>
 8004124:	2b20      	cmp	r3, #32
 8004126:	d814      	bhi.n	8004152 <UART_SetConfig+0x1a2>
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <UART_SetConfig+0x182>
 800412c:	2b10      	cmp	r3, #16
 800412e:	d008      	beq.n	8004142 <UART_SetConfig+0x192>
 8004130:	e00f      	b.n	8004152 <UART_SetConfig+0x1a2>
 8004132:	2300      	movs	r3, #0
 8004134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004138:	e0ad      	b.n	8004296 <UART_SetConfig+0x2e6>
 800413a:	2302      	movs	r3, #2
 800413c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004140:	e0a9      	b.n	8004296 <UART_SetConfig+0x2e6>
 8004142:	2304      	movs	r3, #4
 8004144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004148:	e0a5      	b.n	8004296 <UART_SetConfig+0x2e6>
 800414a:	2308      	movs	r3, #8
 800414c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004150:	e0a1      	b.n	8004296 <UART_SetConfig+0x2e6>
 8004152:	2310      	movs	r3, #16
 8004154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004158:	e09d      	b.n	8004296 <UART_SetConfig+0x2e6>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a4a      	ldr	r2, [pc, #296]	; (8004288 <UART_SetConfig+0x2d8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d125      	bne.n	80041b0 <UART_SetConfig+0x200>
 8004164:	4b45      	ldr	r3, [pc, #276]	; (800427c <UART_SetConfig+0x2cc>)
 8004166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800416e:	2bc0      	cmp	r3, #192	; 0xc0
 8004170:	d016      	beq.n	80041a0 <UART_SetConfig+0x1f0>
 8004172:	2bc0      	cmp	r3, #192	; 0xc0
 8004174:	d818      	bhi.n	80041a8 <UART_SetConfig+0x1f8>
 8004176:	2b80      	cmp	r3, #128	; 0x80
 8004178:	d00a      	beq.n	8004190 <UART_SetConfig+0x1e0>
 800417a:	2b80      	cmp	r3, #128	; 0x80
 800417c:	d814      	bhi.n	80041a8 <UART_SetConfig+0x1f8>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <UART_SetConfig+0x1d8>
 8004182:	2b40      	cmp	r3, #64	; 0x40
 8004184:	d008      	beq.n	8004198 <UART_SetConfig+0x1e8>
 8004186:	e00f      	b.n	80041a8 <UART_SetConfig+0x1f8>
 8004188:	2300      	movs	r3, #0
 800418a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800418e:	e082      	b.n	8004296 <UART_SetConfig+0x2e6>
 8004190:	2302      	movs	r3, #2
 8004192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004196:	e07e      	b.n	8004296 <UART_SetConfig+0x2e6>
 8004198:	2304      	movs	r3, #4
 800419a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800419e:	e07a      	b.n	8004296 <UART_SetConfig+0x2e6>
 80041a0:	2308      	movs	r3, #8
 80041a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041a6:	e076      	b.n	8004296 <UART_SetConfig+0x2e6>
 80041a8:	2310      	movs	r3, #16
 80041aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ae:	e072      	b.n	8004296 <UART_SetConfig+0x2e6>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a35      	ldr	r2, [pc, #212]	; (800428c <UART_SetConfig+0x2dc>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d12a      	bne.n	8004210 <UART_SetConfig+0x260>
 80041ba:	4b30      	ldr	r3, [pc, #192]	; (800427c <UART_SetConfig+0x2cc>)
 80041bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041c8:	d01a      	beq.n	8004200 <UART_SetConfig+0x250>
 80041ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ce:	d81b      	bhi.n	8004208 <UART_SetConfig+0x258>
 80041d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d4:	d00c      	beq.n	80041f0 <UART_SetConfig+0x240>
 80041d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041da:	d815      	bhi.n	8004208 <UART_SetConfig+0x258>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <UART_SetConfig+0x238>
 80041e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e4:	d008      	beq.n	80041f8 <UART_SetConfig+0x248>
 80041e6:	e00f      	b.n	8004208 <UART_SetConfig+0x258>
 80041e8:	2300      	movs	r3, #0
 80041ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ee:	e052      	b.n	8004296 <UART_SetConfig+0x2e6>
 80041f0:	2302      	movs	r3, #2
 80041f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f6:	e04e      	b.n	8004296 <UART_SetConfig+0x2e6>
 80041f8:	2304      	movs	r3, #4
 80041fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041fe:	e04a      	b.n	8004296 <UART_SetConfig+0x2e6>
 8004200:	2308      	movs	r3, #8
 8004202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004206:	e046      	b.n	8004296 <UART_SetConfig+0x2e6>
 8004208:	2310      	movs	r3, #16
 800420a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420e:	e042      	b.n	8004296 <UART_SetConfig+0x2e6>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a17      	ldr	r2, [pc, #92]	; (8004274 <UART_SetConfig+0x2c4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d13a      	bne.n	8004290 <UART_SetConfig+0x2e0>
 800421a:	4b18      	ldr	r3, [pc, #96]	; (800427c <UART_SetConfig+0x2cc>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004220:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004224:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004228:	d01a      	beq.n	8004260 <UART_SetConfig+0x2b0>
 800422a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800422e:	d81b      	bhi.n	8004268 <UART_SetConfig+0x2b8>
 8004230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004234:	d00c      	beq.n	8004250 <UART_SetConfig+0x2a0>
 8004236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800423a:	d815      	bhi.n	8004268 <UART_SetConfig+0x2b8>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <UART_SetConfig+0x298>
 8004240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004244:	d008      	beq.n	8004258 <UART_SetConfig+0x2a8>
 8004246:	e00f      	b.n	8004268 <UART_SetConfig+0x2b8>
 8004248:	2300      	movs	r3, #0
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424e:	e022      	b.n	8004296 <UART_SetConfig+0x2e6>
 8004250:	2302      	movs	r3, #2
 8004252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004256:	e01e      	b.n	8004296 <UART_SetConfig+0x2e6>
 8004258:	2304      	movs	r3, #4
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425e:	e01a      	b.n	8004296 <UART_SetConfig+0x2e6>
 8004260:	2308      	movs	r3, #8
 8004262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004266:	e016      	b.n	8004296 <UART_SetConfig+0x2e6>
 8004268:	2310      	movs	r3, #16
 800426a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426e:	e012      	b.n	8004296 <UART_SetConfig+0x2e6>
 8004270:	efff69f3 	.word	0xefff69f3
 8004274:	40008000 	.word	0x40008000
 8004278:	40013800 	.word	0x40013800
 800427c:	40021000 	.word	0x40021000
 8004280:	40004400 	.word	0x40004400
 8004284:	40004800 	.word	0x40004800
 8004288:	40004c00 	.word	0x40004c00
 800428c:	40005000 	.word	0x40005000
 8004290:	2310      	movs	r3, #16
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a9f      	ldr	r2, [pc, #636]	; (8004518 <UART_SetConfig+0x568>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d17a      	bne.n	8004396 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d824      	bhi.n	80042f2 <UART_SetConfig+0x342>
 80042a8:	a201      	add	r2, pc, #4	; (adr r2, 80042b0 <UART_SetConfig+0x300>)
 80042aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ae:	bf00      	nop
 80042b0:	080042d5 	.word	0x080042d5
 80042b4:	080042f3 	.word	0x080042f3
 80042b8:	080042dd 	.word	0x080042dd
 80042bc:	080042f3 	.word	0x080042f3
 80042c0:	080042e3 	.word	0x080042e3
 80042c4:	080042f3 	.word	0x080042f3
 80042c8:	080042f3 	.word	0x080042f3
 80042cc:	080042f3 	.word	0x080042f3
 80042d0:	080042eb 	.word	0x080042eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d4:	f7ff f84c 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 80042d8:	61f8      	str	r0, [r7, #28]
        break;
 80042da:	e010      	b.n	80042fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042dc:	4b8f      	ldr	r3, [pc, #572]	; (800451c <UART_SetConfig+0x56c>)
 80042de:	61fb      	str	r3, [r7, #28]
        break;
 80042e0:	e00d      	b.n	80042fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e2:	f7fe ffad 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80042e6:	61f8      	str	r0, [r7, #28]
        break;
 80042e8:	e009      	b.n	80042fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ee:	61fb      	str	r3, [r7, #28]
        break;
 80042f0:	e005      	b.n	80042fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80042fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80fb 	beq.w	80044fc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	4613      	mov	r3, r2
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	4413      	add	r3, r2
 8004310:	69fa      	ldr	r2, [r7, #28]
 8004312:	429a      	cmp	r2, r3
 8004314:	d305      	bcc.n	8004322 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	429a      	cmp	r2, r3
 8004320:	d903      	bls.n	800432a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004328:	e0e8      	b.n	80044fc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	2200      	movs	r2, #0
 800432e:	461c      	mov	r4, r3
 8004330:	4615      	mov	r5, r2
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	022b      	lsls	r3, r5, #8
 800433c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004340:	0222      	lsls	r2, r4, #8
 8004342:	68f9      	ldr	r1, [r7, #12]
 8004344:	6849      	ldr	r1, [r1, #4]
 8004346:	0849      	lsrs	r1, r1, #1
 8004348:	2000      	movs	r0, #0
 800434a:	4688      	mov	r8, r1
 800434c:	4681      	mov	r9, r0
 800434e:	eb12 0a08 	adds.w	sl, r2, r8
 8004352:	eb43 0b09 	adc.w	fp, r3, r9
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	603b      	str	r3, [r7, #0]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004364:	4650      	mov	r0, sl
 8004366:	4659      	mov	r1, fp
 8004368:	f7fb ff82 	bl	8000270 <__aeabi_uldivmod>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4613      	mov	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800437a:	d308      	bcc.n	800438e <UART_SetConfig+0x3de>
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004382:	d204      	bcs.n	800438e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	60da      	str	r2, [r3, #12]
 800438c:	e0b6      	b.n	80044fc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004394:	e0b2      	b.n	80044fc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800439e:	d15e      	bne.n	800445e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80043a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d828      	bhi.n	80043fa <UART_SetConfig+0x44a>
 80043a8:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <UART_SetConfig+0x400>)
 80043aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ae:	bf00      	nop
 80043b0:	080043d5 	.word	0x080043d5
 80043b4:	080043dd 	.word	0x080043dd
 80043b8:	080043e5 	.word	0x080043e5
 80043bc:	080043fb 	.word	0x080043fb
 80043c0:	080043eb 	.word	0x080043eb
 80043c4:	080043fb 	.word	0x080043fb
 80043c8:	080043fb 	.word	0x080043fb
 80043cc:	080043fb 	.word	0x080043fb
 80043d0:	080043f3 	.word	0x080043f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d4:	f7fe ffcc 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 80043d8:	61f8      	str	r0, [r7, #28]
        break;
 80043da:	e014      	b.n	8004406 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043dc:	f7fe ffde 	bl	800339c <HAL_RCC_GetPCLK2Freq>
 80043e0:	61f8      	str	r0, [r7, #28]
        break;
 80043e2:	e010      	b.n	8004406 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043e4:	4b4d      	ldr	r3, [pc, #308]	; (800451c <UART_SetConfig+0x56c>)
 80043e6:	61fb      	str	r3, [r7, #28]
        break;
 80043e8:	e00d      	b.n	8004406 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ea:	f7fe ff29 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80043ee:	61f8      	str	r0, [r7, #28]
        break;
 80043f0:	e009      	b.n	8004406 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043f6:	61fb      	str	r3, [r7, #28]
        break;
 80043f8:	e005      	b.n	8004406 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004404:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d077      	beq.n	80044fc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	005a      	lsls	r2, r3, #1
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	085b      	lsrs	r3, r3, #1
 8004416:	441a      	add	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b0f      	cmp	r3, #15
 8004426:	d916      	bls.n	8004456 <UART_SetConfig+0x4a6>
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800442e:	d212      	bcs.n	8004456 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	b29b      	uxth	r3, r3
 8004434:	f023 030f 	bic.w	r3, r3, #15
 8004438:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	085b      	lsrs	r3, r3, #1
 800443e:	b29b      	uxth	r3, r3
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	b29a      	uxth	r2, r3
 8004446:	8afb      	ldrh	r3, [r7, #22]
 8004448:	4313      	orrs	r3, r2
 800444a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	8afa      	ldrh	r2, [r7, #22]
 8004452:	60da      	str	r2, [r3, #12]
 8004454:	e052      	b.n	80044fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800445c:	e04e      	b.n	80044fc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800445e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004462:	2b08      	cmp	r3, #8
 8004464:	d827      	bhi.n	80044b6 <UART_SetConfig+0x506>
 8004466:	a201      	add	r2, pc, #4	; (adr r2, 800446c <UART_SetConfig+0x4bc>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	08004491 	.word	0x08004491
 8004470:	08004499 	.word	0x08004499
 8004474:	080044a1 	.word	0x080044a1
 8004478:	080044b7 	.word	0x080044b7
 800447c:	080044a7 	.word	0x080044a7
 8004480:	080044b7 	.word	0x080044b7
 8004484:	080044b7 	.word	0x080044b7
 8004488:	080044b7 	.word	0x080044b7
 800448c:	080044af 	.word	0x080044af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004490:	f7fe ff6e 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 8004494:	61f8      	str	r0, [r7, #28]
        break;
 8004496:	e014      	b.n	80044c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004498:	f7fe ff80 	bl	800339c <HAL_RCC_GetPCLK2Freq>
 800449c:	61f8      	str	r0, [r7, #28]
        break;
 800449e:	e010      	b.n	80044c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a0:	4b1e      	ldr	r3, [pc, #120]	; (800451c <UART_SetConfig+0x56c>)
 80044a2:	61fb      	str	r3, [r7, #28]
        break;
 80044a4:	e00d      	b.n	80044c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044a6:	f7fe fecb 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80044aa:	61f8      	str	r0, [r7, #28]
        break;
 80044ac:	e009      	b.n	80044c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b2:	61fb      	str	r3, [r7, #28]
        break;
 80044b4:	e005      	b.n	80044c2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044c0:	bf00      	nop
    }

    if (pclk != 0U)
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d019      	beq.n	80044fc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	085a      	lsrs	r2, r3, #1
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	441a      	add	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b0f      	cmp	r3, #15
 80044e0:	d909      	bls.n	80044f6 <UART_SetConfig+0x546>
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e8:	d205      	bcs.n	80044f6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60da      	str	r2, [r3, #12]
 80044f4:	e002      	b.n	80044fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004508:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800450c:	4618      	mov	r0, r3
 800450e:	3728      	adds	r7, #40	; 0x28
 8004510:	46bd      	mov	sp, r7
 8004512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004516:	bf00      	nop
 8004518:	40008000 	.word	0x40008000
 800451c:	00f42400 	.word	0x00f42400

08004520 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	f003 0320 	and.w	r3, r3, #32
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01a      	beq.n	8004636 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800461e:	d10a      	bne.n	8004636 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	605a      	str	r2, [r3, #4]
  }
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b098      	sub	sp, #96	; 0x60
 8004668:	af02      	add	r7, sp, #8
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004674:	f7fc ffb2 	bl	80015dc <HAL_GetTick>
 8004678:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b08      	cmp	r3, #8
 8004686:	d12e      	bne.n	80046e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004688:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004690:	2200      	movs	r2, #0
 8004692:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f88c 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d021      	beq.n	80046e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046aa:	e853 3f00 	ldrex	r3, [r3]
 80046ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b6:	653b      	str	r3, [r7, #80]	; 0x50
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c0:	647b      	str	r3, [r7, #68]	; 0x44
 80046c2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046c8:	e841 2300 	strex	r3, r2, [r1]
 80046cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1e6      	bne.n	80046a2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2220      	movs	r2, #32
 80046d8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e062      	b.n	80047ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d149      	bne.n	8004788 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046fc:	2200      	movs	r2, #0
 80046fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f856 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d03c      	beq.n	8004788 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	e853 3f00 	ldrex	r3, [r3]
 800471a:	623b      	str	r3, [r7, #32]
   return(result);
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	461a      	mov	r2, r3
 800472a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800472c:	633b      	str	r3, [r7, #48]	; 0x30
 800472e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004734:	e841 2300 	strex	r3, r2, [r1]
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e6      	bne.n	800470e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3308      	adds	r3, #8
 8004746:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	64bb      	str	r3, [r7, #72]	; 0x48
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3308      	adds	r3, #8
 800475e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004760:	61fa      	str	r2, [r7, #28]
 8004762:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004764:	69b9      	ldr	r1, [r7, #24]
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	e841 2300 	strex	r3, r2, [r1]
 800476c:	617b      	str	r3, [r7, #20]
   return(result);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e5      	bne.n	8004740 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e011      	b.n	80047ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2220      	movs	r2, #32
 800478c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3758      	adds	r7, #88	; 0x58
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c4:	e049      	b.n	800485a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d045      	beq.n	800485a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ce:	f7fc ff05 	bl	80015dc <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d302      	bcc.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e048      	b.n	800487a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d031      	beq.n	800485a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b08      	cmp	r3, #8
 8004802:	d110      	bne.n	8004826 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2208      	movs	r2, #8
 800480a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 f838 	bl	8004882 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2208      	movs	r2, #8
 8004816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e029      	b.n	800487a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004834:	d111      	bne.n	800485a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800483e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f81e 	bl	8004882 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e00f      	b.n	800487a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69da      	ldr	r2, [r3, #28]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4013      	ands	r3, r2
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	429a      	cmp	r2, r3
 8004868:	bf0c      	ite	eq
 800486a:	2301      	moveq	r3, #1
 800486c:	2300      	movne	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	79fb      	ldrb	r3, [r7, #7]
 8004874:	429a      	cmp	r2, r3
 8004876:	d0a6      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004882:	b480      	push	{r7}
 8004884:	b095      	sub	sp, #84	; 0x54
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004892:	e853 3f00 	ldrex	r3, [r3]
 8004896:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800489e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	461a      	mov	r2, r3
 80048a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a8:	643b      	str	r3, [r7, #64]	; 0x40
 80048aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048b0:	e841 2300 	strex	r3, r2, [r1]
 80048b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e6      	bne.n	800488a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3308      	adds	r3, #8
 80048c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	e853 3f00 	ldrex	r3, [r3]
 80048ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f023 0301 	bic.w	r3, r3, #1
 80048d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3308      	adds	r3, #8
 80048da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e5      	bne.n	80048bc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d118      	bne.n	800492a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	e853 3f00 	ldrex	r3, [r3]
 8004904:	60bb      	str	r3, [r7, #8]
   return(result);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f023 0310 	bic.w	r3, r3, #16
 800490c:	647b      	str	r3, [r7, #68]	; 0x44
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004916:	61bb      	str	r3, [r7, #24]
 8004918:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491a:	6979      	ldr	r1, [r7, #20]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	e841 2300 	strex	r3, r2, [r1]
 8004922:	613b      	str	r3, [r7, #16]
   return(result);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1e6      	bne.n	80048f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2220      	movs	r2, #32
 800492e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800493e:	bf00      	nop
 8004940:	3754      	adds	r7, #84	; 0x54
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <std>:
 800494c:	2300      	movs	r3, #0
 800494e:	b510      	push	{r4, lr}
 8004950:	4604      	mov	r4, r0
 8004952:	e9c0 3300 	strd	r3, r3, [r0]
 8004956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800495a:	6083      	str	r3, [r0, #8]
 800495c:	8181      	strh	r1, [r0, #12]
 800495e:	6643      	str	r3, [r0, #100]	; 0x64
 8004960:	81c2      	strh	r2, [r0, #14]
 8004962:	6183      	str	r3, [r0, #24]
 8004964:	4619      	mov	r1, r3
 8004966:	2208      	movs	r2, #8
 8004968:	305c      	adds	r0, #92	; 0x5c
 800496a:	f000 f9f3 	bl	8004d54 <memset>
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <std+0x38>)
 8004970:	6263      	str	r3, [r4, #36]	; 0x24
 8004972:	4b05      	ldr	r3, [pc, #20]	; (8004988 <std+0x3c>)
 8004974:	62a3      	str	r3, [r4, #40]	; 0x28
 8004976:	4b05      	ldr	r3, [pc, #20]	; (800498c <std+0x40>)
 8004978:	62e3      	str	r3, [r4, #44]	; 0x2c
 800497a:	4b05      	ldr	r3, [pc, #20]	; (8004990 <std+0x44>)
 800497c:	6224      	str	r4, [r4, #32]
 800497e:	6323      	str	r3, [r4, #48]	; 0x30
 8004980:	bd10      	pop	{r4, pc}
 8004982:	bf00      	nop
 8004984:	08004ba5 	.word	0x08004ba5
 8004988:	08004bc7 	.word	0x08004bc7
 800498c:	08004bff 	.word	0x08004bff
 8004990:	08004c23 	.word	0x08004c23

08004994 <stdio_exit_handler>:
 8004994:	4a02      	ldr	r2, [pc, #8]	; (80049a0 <stdio_exit_handler+0xc>)
 8004996:	4903      	ldr	r1, [pc, #12]	; (80049a4 <stdio_exit_handler+0x10>)
 8004998:	4803      	ldr	r0, [pc, #12]	; (80049a8 <stdio_exit_handler+0x14>)
 800499a:	f000 b869 	b.w	8004a70 <_fwalk_sglue>
 800499e:	bf00      	nop
 80049a0:	2000000c 	.word	0x2000000c
 80049a4:	08005715 	.word	0x08005715
 80049a8:	20000018 	.word	0x20000018

080049ac <cleanup_stdio>:
 80049ac:	6841      	ldr	r1, [r0, #4]
 80049ae:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <cleanup_stdio+0x34>)
 80049b0:	4299      	cmp	r1, r3
 80049b2:	b510      	push	{r4, lr}
 80049b4:	4604      	mov	r4, r0
 80049b6:	d001      	beq.n	80049bc <cleanup_stdio+0x10>
 80049b8:	f000 feac 	bl	8005714 <_fflush_r>
 80049bc:	68a1      	ldr	r1, [r4, #8]
 80049be:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <cleanup_stdio+0x38>)
 80049c0:	4299      	cmp	r1, r3
 80049c2:	d002      	beq.n	80049ca <cleanup_stdio+0x1e>
 80049c4:	4620      	mov	r0, r4
 80049c6:	f000 fea5 	bl	8005714 <_fflush_r>
 80049ca:	68e1      	ldr	r1, [r4, #12]
 80049cc:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <cleanup_stdio+0x3c>)
 80049ce:	4299      	cmp	r1, r3
 80049d0:	d004      	beq.n	80049dc <cleanup_stdio+0x30>
 80049d2:	4620      	mov	r0, r4
 80049d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d8:	f000 be9c 	b.w	8005714 <_fflush_r>
 80049dc:	bd10      	pop	{r4, pc}
 80049de:	bf00      	nop
 80049e0:	200001a8 	.word	0x200001a8
 80049e4:	20000210 	.word	0x20000210
 80049e8:	20000278 	.word	0x20000278

080049ec <global_stdio_init.part.0>:
 80049ec:	b510      	push	{r4, lr}
 80049ee:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <global_stdio_init.part.0+0x30>)
 80049f0:	4c0b      	ldr	r4, [pc, #44]	; (8004a20 <global_stdio_init.part.0+0x34>)
 80049f2:	4a0c      	ldr	r2, [pc, #48]	; (8004a24 <global_stdio_init.part.0+0x38>)
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	4620      	mov	r0, r4
 80049f8:	2200      	movs	r2, #0
 80049fa:	2104      	movs	r1, #4
 80049fc:	f7ff ffa6 	bl	800494c <std>
 8004a00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004a04:	2201      	movs	r2, #1
 8004a06:	2109      	movs	r1, #9
 8004a08:	f7ff ffa0 	bl	800494c <std>
 8004a0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004a10:	2202      	movs	r2, #2
 8004a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a16:	2112      	movs	r1, #18
 8004a18:	f7ff bf98 	b.w	800494c <std>
 8004a1c:	200002e0 	.word	0x200002e0
 8004a20:	200001a8 	.word	0x200001a8
 8004a24:	08004995 	.word	0x08004995

08004a28 <__sfp_lock_acquire>:
 8004a28:	4801      	ldr	r0, [pc, #4]	; (8004a30 <__sfp_lock_acquire+0x8>)
 8004a2a:	f000 ba0b 	b.w	8004e44 <__retarget_lock_acquire_recursive>
 8004a2e:	bf00      	nop
 8004a30:	200002e9 	.word	0x200002e9

08004a34 <__sfp_lock_release>:
 8004a34:	4801      	ldr	r0, [pc, #4]	; (8004a3c <__sfp_lock_release+0x8>)
 8004a36:	f000 ba06 	b.w	8004e46 <__retarget_lock_release_recursive>
 8004a3a:	bf00      	nop
 8004a3c:	200002e9 	.word	0x200002e9

08004a40 <__sinit>:
 8004a40:	b510      	push	{r4, lr}
 8004a42:	4604      	mov	r4, r0
 8004a44:	f7ff fff0 	bl	8004a28 <__sfp_lock_acquire>
 8004a48:	6a23      	ldr	r3, [r4, #32]
 8004a4a:	b11b      	cbz	r3, 8004a54 <__sinit+0x14>
 8004a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a50:	f7ff bff0 	b.w	8004a34 <__sfp_lock_release>
 8004a54:	4b04      	ldr	r3, [pc, #16]	; (8004a68 <__sinit+0x28>)
 8004a56:	6223      	str	r3, [r4, #32]
 8004a58:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <__sinit+0x2c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1f5      	bne.n	8004a4c <__sinit+0xc>
 8004a60:	f7ff ffc4 	bl	80049ec <global_stdio_init.part.0>
 8004a64:	e7f2      	b.n	8004a4c <__sinit+0xc>
 8004a66:	bf00      	nop
 8004a68:	080049ad 	.word	0x080049ad
 8004a6c:	200002e0 	.word	0x200002e0

08004a70 <_fwalk_sglue>:
 8004a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a74:	4607      	mov	r7, r0
 8004a76:	4688      	mov	r8, r1
 8004a78:	4614      	mov	r4, r2
 8004a7a:	2600      	movs	r6, #0
 8004a7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a80:	f1b9 0901 	subs.w	r9, r9, #1
 8004a84:	d505      	bpl.n	8004a92 <_fwalk_sglue+0x22>
 8004a86:	6824      	ldr	r4, [r4, #0]
 8004a88:	2c00      	cmp	r4, #0
 8004a8a:	d1f7      	bne.n	8004a7c <_fwalk_sglue+0xc>
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a92:	89ab      	ldrh	r3, [r5, #12]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d907      	bls.n	8004aa8 <_fwalk_sglue+0x38>
 8004a98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	d003      	beq.n	8004aa8 <_fwalk_sglue+0x38>
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	47c0      	blx	r8
 8004aa6:	4306      	orrs	r6, r0
 8004aa8:	3568      	adds	r5, #104	; 0x68
 8004aaa:	e7e9      	b.n	8004a80 <_fwalk_sglue+0x10>

08004aac <_puts_r>:
 8004aac:	6a03      	ldr	r3, [r0, #32]
 8004aae:	b570      	push	{r4, r5, r6, lr}
 8004ab0:	6884      	ldr	r4, [r0, #8]
 8004ab2:	4605      	mov	r5, r0
 8004ab4:	460e      	mov	r6, r1
 8004ab6:	b90b      	cbnz	r3, 8004abc <_puts_r+0x10>
 8004ab8:	f7ff ffc2 	bl	8004a40 <__sinit>
 8004abc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004abe:	07db      	lsls	r3, r3, #31
 8004ac0:	d405      	bmi.n	8004ace <_puts_r+0x22>
 8004ac2:	89a3      	ldrh	r3, [r4, #12]
 8004ac4:	0598      	lsls	r0, r3, #22
 8004ac6:	d402      	bmi.n	8004ace <_puts_r+0x22>
 8004ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aca:	f000 f9bb 	bl	8004e44 <__retarget_lock_acquire_recursive>
 8004ace:	89a3      	ldrh	r3, [r4, #12]
 8004ad0:	0719      	lsls	r1, r3, #28
 8004ad2:	d513      	bpl.n	8004afc <_puts_r+0x50>
 8004ad4:	6923      	ldr	r3, [r4, #16]
 8004ad6:	b18b      	cbz	r3, 8004afc <_puts_r+0x50>
 8004ad8:	3e01      	subs	r6, #1
 8004ada:	68a3      	ldr	r3, [r4, #8]
 8004adc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	60a3      	str	r3, [r4, #8]
 8004ae4:	b9e9      	cbnz	r1, 8004b22 <_puts_r+0x76>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	da2e      	bge.n	8004b48 <_puts_r+0x9c>
 8004aea:	4622      	mov	r2, r4
 8004aec:	210a      	movs	r1, #10
 8004aee:	4628      	mov	r0, r5
 8004af0:	f000 f89b 	bl	8004c2a <__swbuf_r>
 8004af4:	3001      	adds	r0, #1
 8004af6:	d007      	beq.n	8004b08 <_puts_r+0x5c>
 8004af8:	250a      	movs	r5, #10
 8004afa:	e007      	b.n	8004b0c <_puts_r+0x60>
 8004afc:	4621      	mov	r1, r4
 8004afe:	4628      	mov	r0, r5
 8004b00:	f000 f8d0 	bl	8004ca4 <__swsetup_r>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d0e7      	beq.n	8004ad8 <_puts_r+0x2c>
 8004b08:	f04f 35ff 	mov.w	r5, #4294967295
 8004b0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b0e:	07da      	lsls	r2, r3, #31
 8004b10:	d405      	bmi.n	8004b1e <_puts_r+0x72>
 8004b12:	89a3      	ldrh	r3, [r4, #12]
 8004b14:	059b      	lsls	r3, r3, #22
 8004b16:	d402      	bmi.n	8004b1e <_puts_r+0x72>
 8004b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b1a:	f000 f994 	bl	8004e46 <__retarget_lock_release_recursive>
 8004b1e:	4628      	mov	r0, r5
 8004b20:	bd70      	pop	{r4, r5, r6, pc}
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	da04      	bge.n	8004b30 <_puts_r+0x84>
 8004b26:	69a2      	ldr	r2, [r4, #24]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	dc06      	bgt.n	8004b3a <_puts_r+0x8e>
 8004b2c:	290a      	cmp	r1, #10
 8004b2e:	d004      	beq.n	8004b3a <_puts_r+0x8e>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	6022      	str	r2, [r4, #0]
 8004b36:	7019      	strb	r1, [r3, #0]
 8004b38:	e7cf      	b.n	8004ada <_puts_r+0x2e>
 8004b3a:	4622      	mov	r2, r4
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	f000 f874 	bl	8004c2a <__swbuf_r>
 8004b42:	3001      	adds	r0, #1
 8004b44:	d1c9      	bne.n	8004ada <_puts_r+0x2e>
 8004b46:	e7df      	b.n	8004b08 <_puts_r+0x5c>
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	250a      	movs	r5, #10
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	6022      	str	r2, [r4, #0]
 8004b50:	701d      	strb	r5, [r3, #0]
 8004b52:	e7db      	b.n	8004b0c <_puts_r+0x60>

08004b54 <puts>:
 8004b54:	4b02      	ldr	r3, [pc, #8]	; (8004b60 <puts+0xc>)
 8004b56:	4601      	mov	r1, r0
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	f7ff bfa7 	b.w	8004aac <_puts_r>
 8004b5e:	bf00      	nop
 8004b60:	20000064 	.word	0x20000064

08004b64 <siprintf>:
 8004b64:	b40e      	push	{r1, r2, r3}
 8004b66:	b500      	push	{lr}
 8004b68:	b09c      	sub	sp, #112	; 0x70
 8004b6a:	ab1d      	add	r3, sp, #116	; 0x74
 8004b6c:	9002      	str	r0, [sp, #8]
 8004b6e:	9006      	str	r0, [sp, #24]
 8004b70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b74:	4809      	ldr	r0, [pc, #36]	; (8004b9c <siprintf+0x38>)
 8004b76:	9107      	str	r1, [sp, #28]
 8004b78:	9104      	str	r1, [sp, #16]
 8004b7a:	4909      	ldr	r1, [pc, #36]	; (8004ba0 <siprintf+0x3c>)
 8004b7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b80:	9105      	str	r1, [sp, #20]
 8004b82:	6800      	ldr	r0, [r0, #0]
 8004b84:	9301      	str	r3, [sp, #4]
 8004b86:	a902      	add	r1, sp, #8
 8004b88:	f000 fab0 	bl	80050ec <_svfiprintf_r>
 8004b8c:	9b02      	ldr	r3, [sp, #8]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	b01c      	add	sp, #112	; 0x70
 8004b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b98:	b003      	add	sp, #12
 8004b9a:	4770      	bx	lr
 8004b9c:	20000064 	.word	0x20000064
 8004ba0:	ffff0208 	.word	0xffff0208

08004ba4 <__sread>:
 8004ba4:	b510      	push	{r4, lr}
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bac:	f000 f8fc 	bl	8004da8 <_read_r>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	bfab      	itete	ge
 8004bb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8004bb8:	181b      	addge	r3, r3, r0
 8004bba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bbe:	bfac      	ite	ge
 8004bc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bc2:	81a3      	strhlt	r3, [r4, #12]
 8004bc4:	bd10      	pop	{r4, pc}

08004bc6 <__swrite>:
 8004bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bca:	461f      	mov	r7, r3
 8004bcc:	898b      	ldrh	r3, [r1, #12]
 8004bce:	05db      	lsls	r3, r3, #23
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	4616      	mov	r6, r2
 8004bd6:	d505      	bpl.n	8004be4 <__swrite+0x1e>
 8004bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bdc:	2302      	movs	r3, #2
 8004bde:	2200      	movs	r2, #0
 8004be0:	f000 f8d0 	bl	8004d84 <_lseek_r>
 8004be4:	89a3      	ldrh	r3, [r4, #12]
 8004be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bee:	81a3      	strh	r3, [r4, #12]
 8004bf0:	4632      	mov	r2, r6
 8004bf2:	463b      	mov	r3, r7
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bfa:	f000 b8e7 	b.w	8004dcc <_write_r>

08004bfe <__sseek>:
 8004bfe:	b510      	push	{r4, lr}
 8004c00:	460c      	mov	r4, r1
 8004c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c06:	f000 f8bd 	bl	8004d84 <_lseek_r>
 8004c0a:	1c43      	adds	r3, r0, #1
 8004c0c:	89a3      	ldrh	r3, [r4, #12]
 8004c0e:	bf15      	itete	ne
 8004c10:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c1a:	81a3      	strheq	r3, [r4, #12]
 8004c1c:	bf18      	it	ne
 8004c1e:	81a3      	strhne	r3, [r4, #12]
 8004c20:	bd10      	pop	{r4, pc}

08004c22 <__sclose>:
 8004c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c26:	f000 b89d 	b.w	8004d64 <_close_r>

08004c2a <__swbuf_r>:
 8004c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2c:	460e      	mov	r6, r1
 8004c2e:	4614      	mov	r4, r2
 8004c30:	4605      	mov	r5, r0
 8004c32:	b118      	cbz	r0, 8004c3c <__swbuf_r+0x12>
 8004c34:	6a03      	ldr	r3, [r0, #32]
 8004c36:	b90b      	cbnz	r3, 8004c3c <__swbuf_r+0x12>
 8004c38:	f7ff ff02 	bl	8004a40 <__sinit>
 8004c3c:	69a3      	ldr	r3, [r4, #24]
 8004c3e:	60a3      	str	r3, [r4, #8]
 8004c40:	89a3      	ldrh	r3, [r4, #12]
 8004c42:	071a      	lsls	r2, r3, #28
 8004c44:	d525      	bpl.n	8004c92 <__swbuf_r+0x68>
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	b31b      	cbz	r3, 8004c92 <__swbuf_r+0x68>
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	6922      	ldr	r2, [r4, #16]
 8004c4e:	1a98      	subs	r0, r3, r2
 8004c50:	6963      	ldr	r3, [r4, #20]
 8004c52:	b2f6      	uxtb	r6, r6
 8004c54:	4283      	cmp	r3, r0
 8004c56:	4637      	mov	r7, r6
 8004c58:	dc04      	bgt.n	8004c64 <__swbuf_r+0x3a>
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	f000 fd59 	bl	8005714 <_fflush_r>
 8004c62:	b9e0      	cbnz	r0, 8004c9e <__swbuf_r+0x74>
 8004c64:	68a3      	ldr	r3, [r4, #8]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	60a3      	str	r3, [r4, #8]
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	1c5a      	adds	r2, r3, #1
 8004c6e:	6022      	str	r2, [r4, #0]
 8004c70:	701e      	strb	r6, [r3, #0]
 8004c72:	6962      	ldr	r2, [r4, #20]
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d004      	beq.n	8004c84 <__swbuf_r+0x5a>
 8004c7a:	89a3      	ldrh	r3, [r4, #12]
 8004c7c:	07db      	lsls	r3, r3, #31
 8004c7e:	d506      	bpl.n	8004c8e <__swbuf_r+0x64>
 8004c80:	2e0a      	cmp	r6, #10
 8004c82:	d104      	bne.n	8004c8e <__swbuf_r+0x64>
 8004c84:	4621      	mov	r1, r4
 8004c86:	4628      	mov	r0, r5
 8004c88:	f000 fd44 	bl	8005714 <_fflush_r>
 8004c8c:	b938      	cbnz	r0, 8004c9e <__swbuf_r+0x74>
 8004c8e:	4638      	mov	r0, r7
 8004c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c92:	4621      	mov	r1, r4
 8004c94:	4628      	mov	r0, r5
 8004c96:	f000 f805 	bl	8004ca4 <__swsetup_r>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	d0d5      	beq.n	8004c4a <__swbuf_r+0x20>
 8004c9e:	f04f 37ff 	mov.w	r7, #4294967295
 8004ca2:	e7f4      	b.n	8004c8e <__swbuf_r+0x64>

08004ca4 <__swsetup_r>:
 8004ca4:	b538      	push	{r3, r4, r5, lr}
 8004ca6:	4b2a      	ldr	r3, [pc, #168]	; (8004d50 <__swsetup_r+0xac>)
 8004ca8:	4605      	mov	r5, r0
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	460c      	mov	r4, r1
 8004cae:	b118      	cbz	r0, 8004cb8 <__swsetup_r+0x14>
 8004cb0:	6a03      	ldr	r3, [r0, #32]
 8004cb2:	b90b      	cbnz	r3, 8004cb8 <__swsetup_r+0x14>
 8004cb4:	f7ff fec4 	bl	8004a40 <__sinit>
 8004cb8:	89a3      	ldrh	r3, [r4, #12]
 8004cba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cbe:	0718      	lsls	r0, r3, #28
 8004cc0:	d422      	bmi.n	8004d08 <__swsetup_r+0x64>
 8004cc2:	06d9      	lsls	r1, r3, #27
 8004cc4:	d407      	bmi.n	8004cd6 <__swsetup_r+0x32>
 8004cc6:	2309      	movs	r3, #9
 8004cc8:	602b      	str	r3, [r5, #0]
 8004cca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cce:	81a3      	strh	r3, [r4, #12]
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd4:	e034      	b.n	8004d40 <__swsetup_r+0x9c>
 8004cd6:	0758      	lsls	r0, r3, #29
 8004cd8:	d512      	bpl.n	8004d00 <__swsetup_r+0x5c>
 8004cda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cdc:	b141      	cbz	r1, 8004cf0 <__swsetup_r+0x4c>
 8004cde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ce2:	4299      	cmp	r1, r3
 8004ce4:	d002      	beq.n	8004cec <__swsetup_r+0x48>
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	f000 f8ae 	bl	8004e48 <_free_r>
 8004cec:	2300      	movs	r3, #0
 8004cee:	6363      	str	r3, [r4, #52]	; 0x34
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004cf6:	81a3      	strh	r3, [r4, #12]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	6063      	str	r3, [r4, #4]
 8004cfc:	6923      	ldr	r3, [r4, #16]
 8004cfe:	6023      	str	r3, [r4, #0]
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	f043 0308 	orr.w	r3, r3, #8
 8004d06:	81a3      	strh	r3, [r4, #12]
 8004d08:	6923      	ldr	r3, [r4, #16]
 8004d0a:	b94b      	cbnz	r3, 8004d20 <__swsetup_r+0x7c>
 8004d0c:	89a3      	ldrh	r3, [r4, #12]
 8004d0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d16:	d003      	beq.n	8004d20 <__swsetup_r+0x7c>
 8004d18:	4621      	mov	r1, r4
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	f000 fd48 	bl	80057b0 <__smakebuf_r>
 8004d20:	89a0      	ldrh	r0, [r4, #12]
 8004d22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d26:	f010 0301 	ands.w	r3, r0, #1
 8004d2a:	d00a      	beq.n	8004d42 <__swsetup_r+0x9e>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60a3      	str	r3, [r4, #8]
 8004d30:	6963      	ldr	r3, [r4, #20]
 8004d32:	425b      	negs	r3, r3
 8004d34:	61a3      	str	r3, [r4, #24]
 8004d36:	6923      	ldr	r3, [r4, #16]
 8004d38:	b943      	cbnz	r3, 8004d4c <__swsetup_r+0xa8>
 8004d3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d3e:	d1c4      	bne.n	8004cca <__swsetup_r+0x26>
 8004d40:	bd38      	pop	{r3, r4, r5, pc}
 8004d42:	0781      	lsls	r1, r0, #30
 8004d44:	bf58      	it	pl
 8004d46:	6963      	ldrpl	r3, [r4, #20]
 8004d48:	60a3      	str	r3, [r4, #8]
 8004d4a:	e7f4      	b.n	8004d36 <__swsetup_r+0x92>
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	e7f7      	b.n	8004d40 <__swsetup_r+0x9c>
 8004d50:	20000064 	.word	0x20000064

08004d54 <memset>:
 8004d54:	4402      	add	r2, r0
 8004d56:	4603      	mov	r3, r0
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d100      	bne.n	8004d5e <memset+0xa>
 8004d5c:	4770      	bx	lr
 8004d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d62:	e7f9      	b.n	8004d58 <memset+0x4>

08004d64 <_close_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	4d06      	ldr	r5, [pc, #24]	; (8004d80 <_close_r+0x1c>)
 8004d68:	2300      	movs	r3, #0
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	4608      	mov	r0, r1
 8004d6e:	602b      	str	r3, [r5, #0]
 8004d70:	f7fc fa91 	bl	8001296 <_close>
 8004d74:	1c43      	adds	r3, r0, #1
 8004d76:	d102      	bne.n	8004d7e <_close_r+0x1a>
 8004d78:	682b      	ldr	r3, [r5, #0]
 8004d7a:	b103      	cbz	r3, 8004d7e <_close_r+0x1a>
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	bd38      	pop	{r3, r4, r5, pc}
 8004d80:	200002e4 	.word	0x200002e4

08004d84 <_lseek_r>:
 8004d84:	b538      	push	{r3, r4, r5, lr}
 8004d86:	4d07      	ldr	r5, [pc, #28]	; (8004da4 <_lseek_r+0x20>)
 8004d88:	4604      	mov	r4, r0
 8004d8a:	4608      	mov	r0, r1
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	2200      	movs	r2, #0
 8004d90:	602a      	str	r2, [r5, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	f7fc faa6 	bl	80012e4 <_lseek>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d102      	bne.n	8004da2 <_lseek_r+0x1e>
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	b103      	cbz	r3, 8004da2 <_lseek_r+0x1e>
 8004da0:	6023      	str	r3, [r4, #0]
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
 8004da4:	200002e4 	.word	0x200002e4

08004da8 <_read_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	4d07      	ldr	r5, [pc, #28]	; (8004dc8 <_read_r+0x20>)
 8004dac:	4604      	mov	r4, r0
 8004dae:	4608      	mov	r0, r1
 8004db0:	4611      	mov	r1, r2
 8004db2:	2200      	movs	r2, #0
 8004db4:	602a      	str	r2, [r5, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f7fc fa34 	bl	8001224 <_read>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d102      	bne.n	8004dc6 <_read_r+0x1e>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	b103      	cbz	r3, 8004dc6 <_read_r+0x1e>
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}
 8004dc8:	200002e4 	.word	0x200002e4

08004dcc <_write_r>:
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	4d07      	ldr	r5, [pc, #28]	; (8004dec <_write_r+0x20>)
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	4608      	mov	r0, r1
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	602a      	str	r2, [r5, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f7fc fa3f 	bl	800125e <_write>
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	d102      	bne.n	8004dea <_write_r+0x1e>
 8004de4:	682b      	ldr	r3, [r5, #0]
 8004de6:	b103      	cbz	r3, 8004dea <_write_r+0x1e>
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	bd38      	pop	{r3, r4, r5, pc}
 8004dec:	200002e4 	.word	0x200002e4

08004df0 <__errno>:
 8004df0:	4b01      	ldr	r3, [pc, #4]	; (8004df8 <__errno+0x8>)
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	20000064 	.word	0x20000064

08004dfc <__libc_init_array>:
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	4d0d      	ldr	r5, [pc, #52]	; (8004e34 <__libc_init_array+0x38>)
 8004e00:	4c0d      	ldr	r4, [pc, #52]	; (8004e38 <__libc_init_array+0x3c>)
 8004e02:	1b64      	subs	r4, r4, r5
 8004e04:	10a4      	asrs	r4, r4, #2
 8004e06:	2600      	movs	r6, #0
 8004e08:	42a6      	cmp	r6, r4
 8004e0a:	d109      	bne.n	8004e20 <__libc_init_array+0x24>
 8004e0c:	4d0b      	ldr	r5, [pc, #44]	; (8004e3c <__libc_init_array+0x40>)
 8004e0e:	4c0c      	ldr	r4, [pc, #48]	; (8004e40 <__libc_init_array+0x44>)
 8004e10:	f000 fd9c 	bl	800594c <_init>
 8004e14:	1b64      	subs	r4, r4, r5
 8004e16:	10a4      	asrs	r4, r4, #2
 8004e18:	2600      	movs	r6, #0
 8004e1a:	42a6      	cmp	r6, r4
 8004e1c:	d105      	bne.n	8004e2a <__libc_init_array+0x2e>
 8004e1e:	bd70      	pop	{r4, r5, r6, pc}
 8004e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e24:	4798      	blx	r3
 8004e26:	3601      	adds	r6, #1
 8004e28:	e7ee      	b.n	8004e08 <__libc_init_array+0xc>
 8004e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2e:	4798      	blx	r3
 8004e30:	3601      	adds	r6, #1
 8004e32:	e7f2      	b.n	8004e1a <__libc_init_array+0x1e>
 8004e34:	08005b70 	.word	0x08005b70
 8004e38:	08005b70 	.word	0x08005b70
 8004e3c:	08005b70 	.word	0x08005b70
 8004e40:	08005b74 	.word	0x08005b74

08004e44 <__retarget_lock_acquire_recursive>:
 8004e44:	4770      	bx	lr

08004e46 <__retarget_lock_release_recursive>:
 8004e46:	4770      	bx	lr

08004e48 <_free_r>:
 8004e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e4a:	2900      	cmp	r1, #0
 8004e4c:	d044      	beq.n	8004ed8 <_free_r+0x90>
 8004e4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e52:	9001      	str	r0, [sp, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f1a1 0404 	sub.w	r4, r1, #4
 8004e5a:	bfb8      	it	lt
 8004e5c:	18e4      	addlt	r4, r4, r3
 8004e5e:	f000 f8df 	bl	8005020 <__malloc_lock>
 8004e62:	4a1e      	ldr	r2, [pc, #120]	; (8004edc <_free_r+0x94>)
 8004e64:	9801      	ldr	r0, [sp, #4]
 8004e66:	6813      	ldr	r3, [r2, #0]
 8004e68:	b933      	cbnz	r3, 8004e78 <_free_r+0x30>
 8004e6a:	6063      	str	r3, [r4, #4]
 8004e6c:	6014      	str	r4, [r2, #0]
 8004e6e:	b003      	add	sp, #12
 8004e70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e74:	f000 b8da 	b.w	800502c <__malloc_unlock>
 8004e78:	42a3      	cmp	r3, r4
 8004e7a:	d908      	bls.n	8004e8e <_free_r+0x46>
 8004e7c:	6825      	ldr	r5, [r4, #0]
 8004e7e:	1961      	adds	r1, r4, r5
 8004e80:	428b      	cmp	r3, r1
 8004e82:	bf01      	itttt	eq
 8004e84:	6819      	ldreq	r1, [r3, #0]
 8004e86:	685b      	ldreq	r3, [r3, #4]
 8004e88:	1949      	addeq	r1, r1, r5
 8004e8a:	6021      	streq	r1, [r4, #0]
 8004e8c:	e7ed      	b.n	8004e6a <_free_r+0x22>
 8004e8e:	461a      	mov	r2, r3
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	b10b      	cbz	r3, 8004e98 <_free_r+0x50>
 8004e94:	42a3      	cmp	r3, r4
 8004e96:	d9fa      	bls.n	8004e8e <_free_r+0x46>
 8004e98:	6811      	ldr	r1, [r2, #0]
 8004e9a:	1855      	adds	r5, r2, r1
 8004e9c:	42a5      	cmp	r5, r4
 8004e9e:	d10b      	bne.n	8004eb8 <_free_r+0x70>
 8004ea0:	6824      	ldr	r4, [r4, #0]
 8004ea2:	4421      	add	r1, r4
 8004ea4:	1854      	adds	r4, r2, r1
 8004ea6:	42a3      	cmp	r3, r4
 8004ea8:	6011      	str	r1, [r2, #0]
 8004eaa:	d1e0      	bne.n	8004e6e <_free_r+0x26>
 8004eac:	681c      	ldr	r4, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	6053      	str	r3, [r2, #4]
 8004eb2:	440c      	add	r4, r1
 8004eb4:	6014      	str	r4, [r2, #0]
 8004eb6:	e7da      	b.n	8004e6e <_free_r+0x26>
 8004eb8:	d902      	bls.n	8004ec0 <_free_r+0x78>
 8004eba:	230c      	movs	r3, #12
 8004ebc:	6003      	str	r3, [r0, #0]
 8004ebe:	e7d6      	b.n	8004e6e <_free_r+0x26>
 8004ec0:	6825      	ldr	r5, [r4, #0]
 8004ec2:	1961      	adds	r1, r4, r5
 8004ec4:	428b      	cmp	r3, r1
 8004ec6:	bf04      	itt	eq
 8004ec8:	6819      	ldreq	r1, [r3, #0]
 8004eca:	685b      	ldreq	r3, [r3, #4]
 8004ecc:	6063      	str	r3, [r4, #4]
 8004ece:	bf04      	itt	eq
 8004ed0:	1949      	addeq	r1, r1, r5
 8004ed2:	6021      	streq	r1, [r4, #0]
 8004ed4:	6054      	str	r4, [r2, #4]
 8004ed6:	e7ca      	b.n	8004e6e <_free_r+0x26>
 8004ed8:	b003      	add	sp, #12
 8004eda:	bd30      	pop	{r4, r5, pc}
 8004edc:	200002ec 	.word	0x200002ec

08004ee0 <sbrk_aligned>:
 8004ee0:	b570      	push	{r4, r5, r6, lr}
 8004ee2:	4e0e      	ldr	r6, [pc, #56]	; (8004f1c <sbrk_aligned+0x3c>)
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	6831      	ldr	r1, [r6, #0]
 8004ee8:	4605      	mov	r5, r0
 8004eea:	b911      	cbnz	r1, 8004ef2 <sbrk_aligned+0x12>
 8004eec:	f000 fcd8 	bl	80058a0 <_sbrk_r>
 8004ef0:	6030      	str	r0, [r6, #0]
 8004ef2:	4621      	mov	r1, r4
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	f000 fcd3 	bl	80058a0 <_sbrk_r>
 8004efa:	1c43      	adds	r3, r0, #1
 8004efc:	d00a      	beq.n	8004f14 <sbrk_aligned+0x34>
 8004efe:	1cc4      	adds	r4, r0, #3
 8004f00:	f024 0403 	bic.w	r4, r4, #3
 8004f04:	42a0      	cmp	r0, r4
 8004f06:	d007      	beq.n	8004f18 <sbrk_aligned+0x38>
 8004f08:	1a21      	subs	r1, r4, r0
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	f000 fcc8 	bl	80058a0 <_sbrk_r>
 8004f10:	3001      	adds	r0, #1
 8004f12:	d101      	bne.n	8004f18 <sbrk_aligned+0x38>
 8004f14:	f04f 34ff 	mov.w	r4, #4294967295
 8004f18:	4620      	mov	r0, r4
 8004f1a:	bd70      	pop	{r4, r5, r6, pc}
 8004f1c:	200002f0 	.word	0x200002f0

08004f20 <_malloc_r>:
 8004f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f24:	1ccd      	adds	r5, r1, #3
 8004f26:	f025 0503 	bic.w	r5, r5, #3
 8004f2a:	3508      	adds	r5, #8
 8004f2c:	2d0c      	cmp	r5, #12
 8004f2e:	bf38      	it	cc
 8004f30:	250c      	movcc	r5, #12
 8004f32:	2d00      	cmp	r5, #0
 8004f34:	4607      	mov	r7, r0
 8004f36:	db01      	blt.n	8004f3c <_malloc_r+0x1c>
 8004f38:	42a9      	cmp	r1, r5
 8004f3a:	d905      	bls.n	8004f48 <_malloc_r+0x28>
 8004f3c:	230c      	movs	r3, #12
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	2600      	movs	r6, #0
 8004f42:	4630      	mov	r0, r6
 8004f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800501c <_malloc_r+0xfc>
 8004f4c:	f000 f868 	bl	8005020 <__malloc_lock>
 8004f50:	f8d8 3000 	ldr.w	r3, [r8]
 8004f54:	461c      	mov	r4, r3
 8004f56:	bb5c      	cbnz	r4, 8004fb0 <_malloc_r+0x90>
 8004f58:	4629      	mov	r1, r5
 8004f5a:	4638      	mov	r0, r7
 8004f5c:	f7ff ffc0 	bl	8004ee0 <sbrk_aligned>
 8004f60:	1c43      	adds	r3, r0, #1
 8004f62:	4604      	mov	r4, r0
 8004f64:	d155      	bne.n	8005012 <_malloc_r+0xf2>
 8004f66:	f8d8 4000 	ldr.w	r4, [r8]
 8004f6a:	4626      	mov	r6, r4
 8004f6c:	2e00      	cmp	r6, #0
 8004f6e:	d145      	bne.n	8004ffc <_malloc_r+0xdc>
 8004f70:	2c00      	cmp	r4, #0
 8004f72:	d048      	beq.n	8005006 <_malloc_r+0xe6>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	4631      	mov	r1, r6
 8004f78:	4638      	mov	r0, r7
 8004f7a:	eb04 0903 	add.w	r9, r4, r3
 8004f7e:	f000 fc8f 	bl	80058a0 <_sbrk_r>
 8004f82:	4581      	cmp	r9, r0
 8004f84:	d13f      	bne.n	8005006 <_malloc_r+0xe6>
 8004f86:	6821      	ldr	r1, [r4, #0]
 8004f88:	1a6d      	subs	r5, r5, r1
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	4638      	mov	r0, r7
 8004f8e:	f7ff ffa7 	bl	8004ee0 <sbrk_aligned>
 8004f92:	3001      	adds	r0, #1
 8004f94:	d037      	beq.n	8005006 <_malloc_r+0xe6>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	442b      	add	r3, r5
 8004f9a:	6023      	str	r3, [r4, #0]
 8004f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d038      	beq.n	8005016 <_malloc_r+0xf6>
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	42a2      	cmp	r2, r4
 8004fa8:	d12b      	bne.n	8005002 <_malloc_r+0xe2>
 8004faa:	2200      	movs	r2, #0
 8004fac:	605a      	str	r2, [r3, #4]
 8004fae:	e00f      	b.n	8004fd0 <_malloc_r+0xb0>
 8004fb0:	6822      	ldr	r2, [r4, #0]
 8004fb2:	1b52      	subs	r2, r2, r5
 8004fb4:	d41f      	bmi.n	8004ff6 <_malloc_r+0xd6>
 8004fb6:	2a0b      	cmp	r2, #11
 8004fb8:	d917      	bls.n	8004fea <_malloc_r+0xca>
 8004fba:	1961      	adds	r1, r4, r5
 8004fbc:	42a3      	cmp	r3, r4
 8004fbe:	6025      	str	r5, [r4, #0]
 8004fc0:	bf18      	it	ne
 8004fc2:	6059      	strne	r1, [r3, #4]
 8004fc4:	6863      	ldr	r3, [r4, #4]
 8004fc6:	bf08      	it	eq
 8004fc8:	f8c8 1000 	streq.w	r1, [r8]
 8004fcc:	5162      	str	r2, [r4, r5]
 8004fce:	604b      	str	r3, [r1, #4]
 8004fd0:	4638      	mov	r0, r7
 8004fd2:	f104 060b 	add.w	r6, r4, #11
 8004fd6:	f000 f829 	bl	800502c <__malloc_unlock>
 8004fda:	f026 0607 	bic.w	r6, r6, #7
 8004fde:	1d23      	adds	r3, r4, #4
 8004fe0:	1af2      	subs	r2, r6, r3
 8004fe2:	d0ae      	beq.n	8004f42 <_malloc_r+0x22>
 8004fe4:	1b9b      	subs	r3, r3, r6
 8004fe6:	50a3      	str	r3, [r4, r2]
 8004fe8:	e7ab      	b.n	8004f42 <_malloc_r+0x22>
 8004fea:	42a3      	cmp	r3, r4
 8004fec:	6862      	ldr	r2, [r4, #4]
 8004fee:	d1dd      	bne.n	8004fac <_malloc_r+0x8c>
 8004ff0:	f8c8 2000 	str.w	r2, [r8]
 8004ff4:	e7ec      	b.n	8004fd0 <_malloc_r+0xb0>
 8004ff6:	4623      	mov	r3, r4
 8004ff8:	6864      	ldr	r4, [r4, #4]
 8004ffa:	e7ac      	b.n	8004f56 <_malloc_r+0x36>
 8004ffc:	4634      	mov	r4, r6
 8004ffe:	6876      	ldr	r6, [r6, #4]
 8005000:	e7b4      	b.n	8004f6c <_malloc_r+0x4c>
 8005002:	4613      	mov	r3, r2
 8005004:	e7cc      	b.n	8004fa0 <_malloc_r+0x80>
 8005006:	230c      	movs	r3, #12
 8005008:	603b      	str	r3, [r7, #0]
 800500a:	4638      	mov	r0, r7
 800500c:	f000 f80e 	bl	800502c <__malloc_unlock>
 8005010:	e797      	b.n	8004f42 <_malloc_r+0x22>
 8005012:	6025      	str	r5, [r4, #0]
 8005014:	e7dc      	b.n	8004fd0 <_malloc_r+0xb0>
 8005016:	605b      	str	r3, [r3, #4]
 8005018:	deff      	udf	#255	; 0xff
 800501a:	bf00      	nop
 800501c:	200002ec 	.word	0x200002ec

08005020 <__malloc_lock>:
 8005020:	4801      	ldr	r0, [pc, #4]	; (8005028 <__malloc_lock+0x8>)
 8005022:	f7ff bf0f 	b.w	8004e44 <__retarget_lock_acquire_recursive>
 8005026:	bf00      	nop
 8005028:	200002e8 	.word	0x200002e8

0800502c <__malloc_unlock>:
 800502c:	4801      	ldr	r0, [pc, #4]	; (8005034 <__malloc_unlock+0x8>)
 800502e:	f7ff bf0a 	b.w	8004e46 <__retarget_lock_release_recursive>
 8005032:	bf00      	nop
 8005034:	200002e8 	.word	0x200002e8

08005038 <__ssputs_r>:
 8005038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800503c:	688e      	ldr	r6, [r1, #8]
 800503e:	461f      	mov	r7, r3
 8005040:	42be      	cmp	r6, r7
 8005042:	680b      	ldr	r3, [r1, #0]
 8005044:	4682      	mov	sl, r0
 8005046:	460c      	mov	r4, r1
 8005048:	4690      	mov	r8, r2
 800504a:	d82c      	bhi.n	80050a6 <__ssputs_r+0x6e>
 800504c:	898a      	ldrh	r2, [r1, #12]
 800504e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005052:	d026      	beq.n	80050a2 <__ssputs_r+0x6a>
 8005054:	6965      	ldr	r5, [r4, #20]
 8005056:	6909      	ldr	r1, [r1, #16]
 8005058:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800505c:	eba3 0901 	sub.w	r9, r3, r1
 8005060:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005064:	1c7b      	adds	r3, r7, #1
 8005066:	444b      	add	r3, r9
 8005068:	106d      	asrs	r5, r5, #1
 800506a:	429d      	cmp	r5, r3
 800506c:	bf38      	it	cc
 800506e:	461d      	movcc	r5, r3
 8005070:	0553      	lsls	r3, r2, #21
 8005072:	d527      	bpl.n	80050c4 <__ssputs_r+0x8c>
 8005074:	4629      	mov	r1, r5
 8005076:	f7ff ff53 	bl	8004f20 <_malloc_r>
 800507a:	4606      	mov	r6, r0
 800507c:	b360      	cbz	r0, 80050d8 <__ssputs_r+0xa0>
 800507e:	6921      	ldr	r1, [r4, #16]
 8005080:	464a      	mov	r2, r9
 8005082:	f000 fc1d 	bl	80058c0 <memcpy>
 8005086:	89a3      	ldrh	r3, [r4, #12]
 8005088:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800508c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005090:	81a3      	strh	r3, [r4, #12]
 8005092:	6126      	str	r6, [r4, #16]
 8005094:	6165      	str	r5, [r4, #20]
 8005096:	444e      	add	r6, r9
 8005098:	eba5 0509 	sub.w	r5, r5, r9
 800509c:	6026      	str	r6, [r4, #0]
 800509e:	60a5      	str	r5, [r4, #8]
 80050a0:	463e      	mov	r6, r7
 80050a2:	42be      	cmp	r6, r7
 80050a4:	d900      	bls.n	80050a8 <__ssputs_r+0x70>
 80050a6:	463e      	mov	r6, r7
 80050a8:	6820      	ldr	r0, [r4, #0]
 80050aa:	4632      	mov	r2, r6
 80050ac:	4641      	mov	r1, r8
 80050ae:	f000 fbbb 	bl	8005828 <memmove>
 80050b2:	68a3      	ldr	r3, [r4, #8]
 80050b4:	1b9b      	subs	r3, r3, r6
 80050b6:	60a3      	str	r3, [r4, #8]
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	4433      	add	r3, r6
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	2000      	movs	r0, #0
 80050c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c4:	462a      	mov	r2, r5
 80050c6:	f000 fc09 	bl	80058dc <_realloc_r>
 80050ca:	4606      	mov	r6, r0
 80050cc:	2800      	cmp	r0, #0
 80050ce:	d1e0      	bne.n	8005092 <__ssputs_r+0x5a>
 80050d0:	6921      	ldr	r1, [r4, #16]
 80050d2:	4650      	mov	r0, sl
 80050d4:	f7ff feb8 	bl	8004e48 <_free_r>
 80050d8:	230c      	movs	r3, #12
 80050da:	f8ca 3000 	str.w	r3, [sl]
 80050de:	89a3      	ldrh	r3, [r4, #12]
 80050e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050e4:	81a3      	strh	r3, [r4, #12]
 80050e6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ea:	e7e9      	b.n	80050c0 <__ssputs_r+0x88>

080050ec <_svfiprintf_r>:
 80050ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f0:	4698      	mov	r8, r3
 80050f2:	898b      	ldrh	r3, [r1, #12]
 80050f4:	061b      	lsls	r3, r3, #24
 80050f6:	b09d      	sub	sp, #116	; 0x74
 80050f8:	4607      	mov	r7, r0
 80050fa:	460d      	mov	r5, r1
 80050fc:	4614      	mov	r4, r2
 80050fe:	d50e      	bpl.n	800511e <_svfiprintf_r+0x32>
 8005100:	690b      	ldr	r3, [r1, #16]
 8005102:	b963      	cbnz	r3, 800511e <_svfiprintf_r+0x32>
 8005104:	2140      	movs	r1, #64	; 0x40
 8005106:	f7ff ff0b 	bl	8004f20 <_malloc_r>
 800510a:	6028      	str	r0, [r5, #0]
 800510c:	6128      	str	r0, [r5, #16]
 800510e:	b920      	cbnz	r0, 800511a <_svfiprintf_r+0x2e>
 8005110:	230c      	movs	r3, #12
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	f04f 30ff 	mov.w	r0, #4294967295
 8005118:	e0d0      	b.n	80052bc <_svfiprintf_r+0x1d0>
 800511a:	2340      	movs	r3, #64	; 0x40
 800511c:	616b      	str	r3, [r5, #20]
 800511e:	2300      	movs	r3, #0
 8005120:	9309      	str	r3, [sp, #36]	; 0x24
 8005122:	2320      	movs	r3, #32
 8005124:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005128:	f8cd 800c 	str.w	r8, [sp, #12]
 800512c:	2330      	movs	r3, #48	; 0x30
 800512e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80052d4 <_svfiprintf_r+0x1e8>
 8005132:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005136:	f04f 0901 	mov.w	r9, #1
 800513a:	4623      	mov	r3, r4
 800513c:	469a      	mov	sl, r3
 800513e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005142:	b10a      	cbz	r2, 8005148 <_svfiprintf_r+0x5c>
 8005144:	2a25      	cmp	r2, #37	; 0x25
 8005146:	d1f9      	bne.n	800513c <_svfiprintf_r+0x50>
 8005148:	ebba 0b04 	subs.w	fp, sl, r4
 800514c:	d00b      	beq.n	8005166 <_svfiprintf_r+0x7a>
 800514e:	465b      	mov	r3, fp
 8005150:	4622      	mov	r2, r4
 8005152:	4629      	mov	r1, r5
 8005154:	4638      	mov	r0, r7
 8005156:	f7ff ff6f 	bl	8005038 <__ssputs_r>
 800515a:	3001      	adds	r0, #1
 800515c:	f000 80a9 	beq.w	80052b2 <_svfiprintf_r+0x1c6>
 8005160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005162:	445a      	add	r2, fp
 8005164:	9209      	str	r2, [sp, #36]	; 0x24
 8005166:	f89a 3000 	ldrb.w	r3, [sl]
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 80a1 	beq.w	80052b2 <_svfiprintf_r+0x1c6>
 8005170:	2300      	movs	r3, #0
 8005172:	f04f 32ff 	mov.w	r2, #4294967295
 8005176:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800517a:	f10a 0a01 	add.w	sl, sl, #1
 800517e:	9304      	str	r3, [sp, #16]
 8005180:	9307      	str	r3, [sp, #28]
 8005182:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005186:	931a      	str	r3, [sp, #104]	; 0x68
 8005188:	4654      	mov	r4, sl
 800518a:	2205      	movs	r2, #5
 800518c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005190:	4850      	ldr	r0, [pc, #320]	; (80052d4 <_svfiprintf_r+0x1e8>)
 8005192:	f7fb f81d 	bl	80001d0 <memchr>
 8005196:	9a04      	ldr	r2, [sp, #16]
 8005198:	b9d8      	cbnz	r0, 80051d2 <_svfiprintf_r+0xe6>
 800519a:	06d0      	lsls	r0, r2, #27
 800519c:	bf44      	itt	mi
 800519e:	2320      	movmi	r3, #32
 80051a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051a4:	0711      	lsls	r1, r2, #28
 80051a6:	bf44      	itt	mi
 80051a8:	232b      	movmi	r3, #43	; 0x2b
 80051aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051ae:	f89a 3000 	ldrb.w	r3, [sl]
 80051b2:	2b2a      	cmp	r3, #42	; 0x2a
 80051b4:	d015      	beq.n	80051e2 <_svfiprintf_r+0xf6>
 80051b6:	9a07      	ldr	r2, [sp, #28]
 80051b8:	4654      	mov	r4, sl
 80051ba:	2000      	movs	r0, #0
 80051bc:	f04f 0c0a 	mov.w	ip, #10
 80051c0:	4621      	mov	r1, r4
 80051c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051c6:	3b30      	subs	r3, #48	; 0x30
 80051c8:	2b09      	cmp	r3, #9
 80051ca:	d94d      	bls.n	8005268 <_svfiprintf_r+0x17c>
 80051cc:	b1b0      	cbz	r0, 80051fc <_svfiprintf_r+0x110>
 80051ce:	9207      	str	r2, [sp, #28]
 80051d0:	e014      	b.n	80051fc <_svfiprintf_r+0x110>
 80051d2:	eba0 0308 	sub.w	r3, r0, r8
 80051d6:	fa09 f303 	lsl.w	r3, r9, r3
 80051da:	4313      	orrs	r3, r2
 80051dc:	9304      	str	r3, [sp, #16]
 80051de:	46a2      	mov	sl, r4
 80051e0:	e7d2      	b.n	8005188 <_svfiprintf_r+0x9c>
 80051e2:	9b03      	ldr	r3, [sp, #12]
 80051e4:	1d19      	adds	r1, r3, #4
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	9103      	str	r1, [sp, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	bfbb      	ittet	lt
 80051ee:	425b      	neglt	r3, r3
 80051f0:	f042 0202 	orrlt.w	r2, r2, #2
 80051f4:	9307      	strge	r3, [sp, #28]
 80051f6:	9307      	strlt	r3, [sp, #28]
 80051f8:	bfb8      	it	lt
 80051fa:	9204      	strlt	r2, [sp, #16]
 80051fc:	7823      	ldrb	r3, [r4, #0]
 80051fe:	2b2e      	cmp	r3, #46	; 0x2e
 8005200:	d10c      	bne.n	800521c <_svfiprintf_r+0x130>
 8005202:	7863      	ldrb	r3, [r4, #1]
 8005204:	2b2a      	cmp	r3, #42	; 0x2a
 8005206:	d134      	bne.n	8005272 <_svfiprintf_r+0x186>
 8005208:	9b03      	ldr	r3, [sp, #12]
 800520a:	1d1a      	adds	r2, r3, #4
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	9203      	str	r2, [sp, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	bfb8      	it	lt
 8005214:	f04f 33ff 	movlt.w	r3, #4294967295
 8005218:	3402      	adds	r4, #2
 800521a:	9305      	str	r3, [sp, #20]
 800521c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80052e4 <_svfiprintf_r+0x1f8>
 8005220:	7821      	ldrb	r1, [r4, #0]
 8005222:	2203      	movs	r2, #3
 8005224:	4650      	mov	r0, sl
 8005226:	f7fa ffd3 	bl	80001d0 <memchr>
 800522a:	b138      	cbz	r0, 800523c <_svfiprintf_r+0x150>
 800522c:	9b04      	ldr	r3, [sp, #16]
 800522e:	eba0 000a 	sub.w	r0, r0, sl
 8005232:	2240      	movs	r2, #64	; 0x40
 8005234:	4082      	lsls	r2, r0
 8005236:	4313      	orrs	r3, r2
 8005238:	3401      	adds	r4, #1
 800523a:	9304      	str	r3, [sp, #16]
 800523c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005240:	4825      	ldr	r0, [pc, #148]	; (80052d8 <_svfiprintf_r+0x1ec>)
 8005242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005246:	2206      	movs	r2, #6
 8005248:	f7fa ffc2 	bl	80001d0 <memchr>
 800524c:	2800      	cmp	r0, #0
 800524e:	d038      	beq.n	80052c2 <_svfiprintf_r+0x1d6>
 8005250:	4b22      	ldr	r3, [pc, #136]	; (80052dc <_svfiprintf_r+0x1f0>)
 8005252:	bb1b      	cbnz	r3, 800529c <_svfiprintf_r+0x1b0>
 8005254:	9b03      	ldr	r3, [sp, #12]
 8005256:	3307      	adds	r3, #7
 8005258:	f023 0307 	bic.w	r3, r3, #7
 800525c:	3308      	adds	r3, #8
 800525e:	9303      	str	r3, [sp, #12]
 8005260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005262:	4433      	add	r3, r6
 8005264:	9309      	str	r3, [sp, #36]	; 0x24
 8005266:	e768      	b.n	800513a <_svfiprintf_r+0x4e>
 8005268:	fb0c 3202 	mla	r2, ip, r2, r3
 800526c:	460c      	mov	r4, r1
 800526e:	2001      	movs	r0, #1
 8005270:	e7a6      	b.n	80051c0 <_svfiprintf_r+0xd4>
 8005272:	2300      	movs	r3, #0
 8005274:	3401      	adds	r4, #1
 8005276:	9305      	str	r3, [sp, #20]
 8005278:	4619      	mov	r1, r3
 800527a:	f04f 0c0a 	mov.w	ip, #10
 800527e:	4620      	mov	r0, r4
 8005280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005284:	3a30      	subs	r2, #48	; 0x30
 8005286:	2a09      	cmp	r2, #9
 8005288:	d903      	bls.n	8005292 <_svfiprintf_r+0x1a6>
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0c6      	beq.n	800521c <_svfiprintf_r+0x130>
 800528e:	9105      	str	r1, [sp, #20]
 8005290:	e7c4      	b.n	800521c <_svfiprintf_r+0x130>
 8005292:	fb0c 2101 	mla	r1, ip, r1, r2
 8005296:	4604      	mov	r4, r0
 8005298:	2301      	movs	r3, #1
 800529a:	e7f0      	b.n	800527e <_svfiprintf_r+0x192>
 800529c:	ab03      	add	r3, sp, #12
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	462a      	mov	r2, r5
 80052a2:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <_svfiprintf_r+0x1f4>)
 80052a4:	a904      	add	r1, sp, #16
 80052a6:	4638      	mov	r0, r7
 80052a8:	f3af 8000 	nop.w
 80052ac:	1c42      	adds	r2, r0, #1
 80052ae:	4606      	mov	r6, r0
 80052b0:	d1d6      	bne.n	8005260 <_svfiprintf_r+0x174>
 80052b2:	89ab      	ldrh	r3, [r5, #12]
 80052b4:	065b      	lsls	r3, r3, #25
 80052b6:	f53f af2d 	bmi.w	8005114 <_svfiprintf_r+0x28>
 80052ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052bc:	b01d      	add	sp, #116	; 0x74
 80052be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c2:	ab03      	add	r3, sp, #12
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	462a      	mov	r2, r5
 80052c8:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <_svfiprintf_r+0x1f4>)
 80052ca:	a904      	add	r1, sp, #16
 80052cc:	4638      	mov	r0, r7
 80052ce:	f000 f879 	bl	80053c4 <_printf_i>
 80052d2:	e7eb      	b.n	80052ac <_svfiprintf_r+0x1c0>
 80052d4:	08005b34 	.word	0x08005b34
 80052d8:	08005b3e 	.word	0x08005b3e
 80052dc:	00000000 	.word	0x00000000
 80052e0:	08005039 	.word	0x08005039
 80052e4:	08005b3a 	.word	0x08005b3a

080052e8 <_printf_common>:
 80052e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052ec:	4616      	mov	r6, r2
 80052ee:	4699      	mov	r9, r3
 80052f0:	688a      	ldr	r2, [r1, #8]
 80052f2:	690b      	ldr	r3, [r1, #16]
 80052f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052f8:	4293      	cmp	r3, r2
 80052fa:	bfb8      	it	lt
 80052fc:	4613      	movlt	r3, r2
 80052fe:	6033      	str	r3, [r6, #0]
 8005300:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005304:	4607      	mov	r7, r0
 8005306:	460c      	mov	r4, r1
 8005308:	b10a      	cbz	r2, 800530e <_printf_common+0x26>
 800530a:	3301      	adds	r3, #1
 800530c:	6033      	str	r3, [r6, #0]
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	0699      	lsls	r1, r3, #26
 8005312:	bf42      	ittt	mi
 8005314:	6833      	ldrmi	r3, [r6, #0]
 8005316:	3302      	addmi	r3, #2
 8005318:	6033      	strmi	r3, [r6, #0]
 800531a:	6825      	ldr	r5, [r4, #0]
 800531c:	f015 0506 	ands.w	r5, r5, #6
 8005320:	d106      	bne.n	8005330 <_printf_common+0x48>
 8005322:	f104 0a19 	add.w	sl, r4, #25
 8005326:	68e3      	ldr	r3, [r4, #12]
 8005328:	6832      	ldr	r2, [r6, #0]
 800532a:	1a9b      	subs	r3, r3, r2
 800532c:	42ab      	cmp	r3, r5
 800532e:	dc26      	bgt.n	800537e <_printf_common+0x96>
 8005330:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005334:	1e13      	subs	r3, r2, #0
 8005336:	6822      	ldr	r2, [r4, #0]
 8005338:	bf18      	it	ne
 800533a:	2301      	movne	r3, #1
 800533c:	0692      	lsls	r2, r2, #26
 800533e:	d42b      	bmi.n	8005398 <_printf_common+0xb0>
 8005340:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005344:	4649      	mov	r1, r9
 8005346:	4638      	mov	r0, r7
 8005348:	47c0      	blx	r8
 800534a:	3001      	adds	r0, #1
 800534c:	d01e      	beq.n	800538c <_printf_common+0xa4>
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	6922      	ldr	r2, [r4, #16]
 8005352:	f003 0306 	and.w	r3, r3, #6
 8005356:	2b04      	cmp	r3, #4
 8005358:	bf02      	ittt	eq
 800535a:	68e5      	ldreq	r5, [r4, #12]
 800535c:	6833      	ldreq	r3, [r6, #0]
 800535e:	1aed      	subeq	r5, r5, r3
 8005360:	68a3      	ldr	r3, [r4, #8]
 8005362:	bf0c      	ite	eq
 8005364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005368:	2500      	movne	r5, #0
 800536a:	4293      	cmp	r3, r2
 800536c:	bfc4      	itt	gt
 800536e:	1a9b      	subgt	r3, r3, r2
 8005370:	18ed      	addgt	r5, r5, r3
 8005372:	2600      	movs	r6, #0
 8005374:	341a      	adds	r4, #26
 8005376:	42b5      	cmp	r5, r6
 8005378:	d11a      	bne.n	80053b0 <_printf_common+0xc8>
 800537a:	2000      	movs	r0, #0
 800537c:	e008      	b.n	8005390 <_printf_common+0xa8>
 800537e:	2301      	movs	r3, #1
 8005380:	4652      	mov	r2, sl
 8005382:	4649      	mov	r1, r9
 8005384:	4638      	mov	r0, r7
 8005386:	47c0      	blx	r8
 8005388:	3001      	adds	r0, #1
 800538a:	d103      	bne.n	8005394 <_printf_common+0xac>
 800538c:	f04f 30ff 	mov.w	r0, #4294967295
 8005390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005394:	3501      	adds	r5, #1
 8005396:	e7c6      	b.n	8005326 <_printf_common+0x3e>
 8005398:	18e1      	adds	r1, r4, r3
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	2030      	movs	r0, #48	; 0x30
 800539e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053a2:	4422      	add	r2, r4
 80053a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053ac:	3302      	adds	r3, #2
 80053ae:	e7c7      	b.n	8005340 <_printf_common+0x58>
 80053b0:	2301      	movs	r3, #1
 80053b2:	4622      	mov	r2, r4
 80053b4:	4649      	mov	r1, r9
 80053b6:	4638      	mov	r0, r7
 80053b8:	47c0      	blx	r8
 80053ba:	3001      	adds	r0, #1
 80053bc:	d0e6      	beq.n	800538c <_printf_common+0xa4>
 80053be:	3601      	adds	r6, #1
 80053c0:	e7d9      	b.n	8005376 <_printf_common+0x8e>
	...

080053c4 <_printf_i>:
 80053c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053c8:	7e0f      	ldrb	r7, [r1, #24]
 80053ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053cc:	2f78      	cmp	r7, #120	; 0x78
 80053ce:	4691      	mov	r9, r2
 80053d0:	4680      	mov	r8, r0
 80053d2:	460c      	mov	r4, r1
 80053d4:	469a      	mov	sl, r3
 80053d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053da:	d807      	bhi.n	80053ec <_printf_i+0x28>
 80053dc:	2f62      	cmp	r7, #98	; 0x62
 80053de:	d80a      	bhi.n	80053f6 <_printf_i+0x32>
 80053e0:	2f00      	cmp	r7, #0
 80053e2:	f000 80d4 	beq.w	800558e <_printf_i+0x1ca>
 80053e6:	2f58      	cmp	r7, #88	; 0x58
 80053e8:	f000 80c0 	beq.w	800556c <_printf_i+0x1a8>
 80053ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053f4:	e03a      	b.n	800546c <_printf_i+0xa8>
 80053f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053fa:	2b15      	cmp	r3, #21
 80053fc:	d8f6      	bhi.n	80053ec <_printf_i+0x28>
 80053fe:	a101      	add	r1, pc, #4	; (adr r1, 8005404 <_printf_i+0x40>)
 8005400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005404:	0800545d 	.word	0x0800545d
 8005408:	08005471 	.word	0x08005471
 800540c:	080053ed 	.word	0x080053ed
 8005410:	080053ed 	.word	0x080053ed
 8005414:	080053ed 	.word	0x080053ed
 8005418:	080053ed 	.word	0x080053ed
 800541c:	08005471 	.word	0x08005471
 8005420:	080053ed 	.word	0x080053ed
 8005424:	080053ed 	.word	0x080053ed
 8005428:	080053ed 	.word	0x080053ed
 800542c:	080053ed 	.word	0x080053ed
 8005430:	08005575 	.word	0x08005575
 8005434:	0800549d 	.word	0x0800549d
 8005438:	0800552f 	.word	0x0800552f
 800543c:	080053ed 	.word	0x080053ed
 8005440:	080053ed 	.word	0x080053ed
 8005444:	08005597 	.word	0x08005597
 8005448:	080053ed 	.word	0x080053ed
 800544c:	0800549d 	.word	0x0800549d
 8005450:	080053ed 	.word	0x080053ed
 8005454:	080053ed 	.word	0x080053ed
 8005458:	08005537 	.word	0x08005537
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	1d1a      	adds	r2, r3, #4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	602a      	str	r2, [r5, #0]
 8005464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800546c:	2301      	movs	r3, #1
 800546e:	e09f      	b.n	80055b0 <_printf_i+0x1ec>
 8005470:	6820      	ldr	r0, [r4, #0]
 8005472:	682b      	ldr	r3, [r5, #0]
 8005474:	0607      	lsls	r7, r0, #24
 8005476:	f103 0104 	add.w	r1, r3, #4
 800547a:	6029      	str	r1, [r5, #0]
 800547c:	d501      	bpl.n	8005482 <_printf_i+0xbe>
 800547e:	681e      	ldr	r6, [r3, #0]
 8005480:	e003      	b.n	800548a <_printf_i+0xc6>
 8005482:	0646      	lsls	r6, r0, #25
 8005484:	d5fb      	bpl.n	800547e <_printf_i+0xba>
 8005486:	f9b3 6000 	ldrsh.w	r6, [r3]
 800548a:	2e00      	cmp	r6, #0
 800548c:	da03      	bge.n	8005496 <_printf_i+0xd2>
 800548e:	232d      	movs	r3, #45	; 0x2d
 8005490:	4276      	negs	r6, r6
 8005492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005496:	485a      	ldr	r0, [pc, #360]	; (8005600 <_printf_i+0x23c>)
 8005498:	230a      	movs	r3, #10
 800549a:	e012      	b.n	80054c2 <_printf_i+0xfe>
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	6820      	ldr	r0, [r4, #0]
 80054a0:	1d19      	adds	r1, r3, #4
 80054a2:	6029      	str	r1, [r5, #0]
 80054a4:	0605      	lsls	r5, r0, #24
 80054a6:	d501      	bpl.n	80054ac <_printf_i+0xe8>
 80054a8:	681e      	ldr	r6, [r3, #0]
 80054aa:	e002      	b.n	80054b2 <_printf_i+0xee>
 80054ac:	0641      	lsls	r1, r0, #25
 80054ae:	d5fb      	bpl.n	80054a8 <_printf_i+0xe4>
 80054b0:	881e      	ldrh	r6, [r3, #0]
 80054b2:	4853      	ldr	r0, [pc, #332]	; (8005600 <_printf_i+0x23c>)
 80054b4:	2f6f      	cmp	r7, #111	; 0x6f
 80054b6:	bf0c      	ite	eq
 80054b8:	2308      	moveq	r3, #8
 80054ba:	230a      	movne	r3, #10
 80054bc:	2100      	movs	r1, #0
 80054be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054c2:	6865      	ldr	r5, [r4, #4]
 80054c4:	60a5      	str	r5, [r4, #8]
 80054c6:	2d00      	cmp	r5, #0
 80054c8:	bfa2      	ittt	ge
 80054ca:	6821      	ldrge	r1, [r4, #0]
 80054cc:	f021 0104 	bicge.w	r1, r1, #4
 80054d0:	6021      	strge	r1, [r4, #0]
 80054d2:	b90e      	cbnz	r6, 80054d8 <_printf_i+0x114>
 80054d4:	2d00      	cmp	r5, #0
 80054d6:	d04b      	beq.n	8005570 <_printf_i+0x1ac>
 80054d8:	4615      	mov	r5, r2
 80054da:	fbb6 f1f3 	udiv	r1, r6, r3
 80054de:	fb03 6711 	mls	r7, r3, r1, r6
 80054e2:	5dc7      	ldrb	r7, [r0, r7]
 80054e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054e8:	4637      	mov	r7, r6
 80054ea:	42bb      	cmp	r3, r7
 80054ec:	460e      	mov	r6, r1
 80054ee:	d9f4      	bls.n	80054da <_printf_i+0x116>
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d10b      	bne.n	800550c <_printf_i+0x148>
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	07de      	lsls	r6, r3, #31
 80054f8:	d508      	bpl.n	800550c <_printf_i+0x148>
 80054fa:	6923      	ldr	r3, [r4, #16]
 80054fc:	6861      	ldr	r1, [r4, #4]
 80054fe:	4299      	cmp	r1, r3
 8005500:	bfde      	ittt	le
 8005502:	2330      	movle	r3, #48	; 0x30
 8005504:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005508:	f105 35ff 	addle.w	r5, r5, #4294967295
 800550c:	1b52      	subs	r2, r2, r5
 800550e:	6122      	str	r2, [r4, #16]
 8005510:	f8cd a000 	str.w	sl, [sp]
 8005514:	464b      	mov	r3, r9
 8005516:	aa03      	add	r2, sp, #12
 8005518:	4621      	mov	r1, r4
 800551a:	4640      	mov	r0, r8
 800551c:	f7ff fee4 	bl	80052e8 <_printf_common>
 8005520:	3001      	adds	r0, #1
 8005522:	d14a      	bne.n	80055ba <_printf_i+0x1f6>
 8005524:	f04f 30ff 	mov.w	r0, #4294967295
 8005528:	b004      	add	sp, #16
 800552a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	f043 0320 	orr.w	r3, r3, #32
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	4833      	ldr	r0, [pc, #204]	; (8005604 <_printf_i+0x240>)
 8005538:	2778      	movs	r7, #120	; 0x78
 800553a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	6829      	ldr	r1, [r5, #0]
 8005542:	061f      	lsls	r7, r3, #24
 8005544:	f851 6b04 	ldr.w	r6, [r1], #4
 8005548:	d402      	bmi.n	8005550 <_printf_i+0x18c>
 800554a:	065f      	lsls	r7, r3, #25
 800554c:	bf48      	it	mi
 800554e:	b2b6      	uxthmi	r6, r6
 8005550:	07df      	lsls	r7, r3, #31
 8005552:	bf48      	it	mi
 8005554:	f043 0320 	orrmi.w	r3, r3, #32
 8005558:	6029      	str	r1, [r5, #0]
 800555a:	bf48      	it	mi
 800555c:	6023      	strmi	r3, [r4, #0]
 800555e:	b91e      	cbnz	r6, 8005568 <_printf_i+0x1a4>
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	f023 0320 	bic.w	r3, r3, #32
 8005566:	6023      	str	r3, [r4, #0]
 8005568:	2310      	movs	r3, #16
 800556a:	e7a7      	b.n	80054bc <_printf_i+0xf8>
 800556c:	4824      	ldr	r0, [pc, #144]	; (8005600 <_printf_i+0x23c>)
 800556e:	e7e4      	b.n	800553a <_printf_i+0x176>
 8005570:	4615      	mov	r5, r2
 8005572:	e7bd      	b.n	80054f0 <_printf_i+0x12c>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	6826      	ldr	r6, [r4, #0]
 8005578:	6961      	ldr	r1, [r4, #20]
 800557a:	1d18      	adds	r0, r3, #4
 800557c:	6028      	str	r0, [r5, #0]
 800557e:	0635      	lsls	r5, r6, #24
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	d501      	bpl.n	8005588 <_printf_i+0x1c4>
 8005584:	6019      	str	r1, [r3, #0]
 8005586:	e002      	b.n	800558e <_printf_i+0x1ca>
 8005588:	0670      	lsls	r0, r6, #25
 800558a:	d5fb      	bpl.n	8005584 <_printf_i+0x1c0>
 800558c:	8019      	strh	r1, [r3, #0]
 800558e:	2300      	movs	r3, #0
 8005590:	6123      	str	r3, [r4, #16]
 8005592:	4615      	mov	r5, r2
 8005594:	e7bc      	b.n	8005510 <_printf_i+0x14c>
 8005596:	682b      	ldr	r3, [r5, #0]
 8005598:	1d1a      	adds	r2, r3, #4
 800559a:	602a      	str	r2, [r5, #0]
 800559c:	681d      	ldr	r5, [r3, #0]
 800559e:	6862      	ldr	r2, [r4, #4]
 80055a0:	2100      	movs	r1, #0
 80055a2:	4628      	mov	r0, r5
 80055a4:	f7fa fe14 	bl	80001d0 <memchr>
 80055a8:	b108      	cbz	r0, 80055ae <_printf_i+0x1ea>
 80055aa:	1b40      	subs	r0, r0, r5
 80055ac:	6060      	str	r0, [r4, #4]
 80055ae:	6863      	ldr	r3, [r4, #4]
 80055b0:	6123      	str	r3, [r4, #16]
 80055b2:	2300      	movs	r3, #0
 80055b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055b8:	e7aa      	b.n	8005510 <_printf_i+0x14c>
 80055ba:	6923      	ldr	r3, [r4, #16]
 80055bc:	462a      	mov	r2, r5
 80055be:	4649      	mov	r1, r9
 80055c0:	4640      	mov	r0, r8
 80055c2:	47d0      	blx	sl
 80055c4:	3001      	adds	r0, #1
 80055c6:	d0ad      	beq.n	8005524 <_printf_i+0x160>
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	079b      	lsls	r3, r3, #30
 80055cc:	d413      	bmi.n	80055f6 <_printf_i+0x232>
 80055ce:	68e0      	ldr	r0, [r4, #12]
 80055d0:	9b03      	ldr	r3, [sp, #12]
 80055d2:	4298      	cmp	r0, r3
 80055d4:	bfb8      	it	lt
 80055d6:	4618      	movlt	r0, r3
 80055d8:	e7a6      	b.n	8005528 <_printf_i+0x164>
 80055da:	2301      	movs	r3, #1
 80055dc:	4632      	mov	r2, r6
 80055de:	4649      	mov	r1, r9
 80055e0:	4640      	mov	r0, r8
 80055e2:	47d0      	blx	sl
 80055e4:	3001      	adds	r0, #1
 80055e6:	d09d      	beq.n	8005524 <_printf_i+0x160>
 80055e8:	3501      	adds	r5, #1
 80055ea:	68e3      	ldr	r3, [r4, #12]
 80055ec:	9903      	ldr	r1, [sp, #12]
 80055ee:	1a5b      	subs	r3, r3, r1
 80055f0:	42ab      	cmp	r3, r5
 80055f2:	dcf2      	bgt.n	80055da <_printf_i+0x216>
 80055f4:	e7eb      	b.n	80055ce <_printf_i+0x20a>
 80055f6:	2500      	movs	r5, #0
 80055f8:	f104 0619 	add.w	r6, r4, #25
 80055fc:	e7f5      	b.n	80055ea <_printf_i+0x226>
 80055fe:	bf00      	nop
 8005600:	08005b45 	.word	0x08005b45
 8005604:	08005b56 	.word	0x08005b56

08005608 <__sflush_r>:
 8005608:	898a      	ldrh	r2, [r1, #12]
 800560a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800560e:	4605      	mov	r5, r0
 8005610:	0710      	lsls	r0, r2, #28
 8005612:	460c      	mov	r4, r1
 8005614:	d458      	bmi.n	80056c8 <__sflush_r+0xc0>
 8005616:	684b      	ldr	r3, [r1, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	dc05      	bgt.n	8005628 <__sflush_r+0x20>
 800561c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800561e:	2b00      	cmp	r3, #0
 8005620:	dc02      	bgt.n	8005628 <__sflush_r+0x20>
 8005622:	2000      	movs	r0, #0
 8005624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005628:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800562a:	2e00      	cmp	r6, #0
 800562c:	d0f9      	beq.n	8005622 <__sflush_r+0x1a>
 800562e:	2300      	movs	r3, #0
 8005630:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005634:	682f      	ldr	r7, [r5, #0]
 8005636:	6a21      	ldr	r1, [r4, #32]
 8005638:	602b      	str	r3, [r5, #0]
 800563a:	d032      	beq.n	80056a2 <__sflush_r+0x9a>
 800563c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800563e:	89a3      	ldrh	r3, [r4, #12]
 8005640:	075a      	lsls	r2, r3, #29
 8005642:	d505      	bpl.n	8005650 <__sflush_r+0x48>
 8005644:	6863      	ldr	r3, [r4, #4]
 8005646:	1ac0      	subs	r0, r0, r3
 8005648:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800564a:	b10b      	cbz	r3, 8005650 <__sflush_r+0x48>
 800564c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800564e:	1ac0      	subs	r0, r0, r3
 8005650:	2300      	movs	r3, #0
 8005652:	4602      	mov	r2, r0
 8005654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005656:	6a21      	ldr	r1, [r4, #32]
 8005658:	4628      	mov	r0, r5
 800565a:	47b0      	blx	r6
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	89a3      	ldrh	r3, [r4, #12]
 8005660:	d106      	bne.n	8005670 <__sflush_r+0x68>
 8005662:	6829      	ldr	r1, [r5, #0]
 8005664:	291d      	cmp	r1, #29
 8005666:	d82b      	bhi.n	80056c0 <__sflush_r+0xb8>
 8005668:	4a29      	ldr	r2, [pc, #164]	; (8005710 <__sflush_r+0x108>)
 800566a:	410a      	asrs	r2, r1
 800566c:	07d6      	lsls	r6, r2, #31
 800566e:	d427      	bmi.n	80056c0 <__sflush_r+0xb8>
 8005670:	2200      	movs	r2, #0
 8005672:	6062      	str	r2, [r4, #4]
 8005674:	04d9      	lsls	r1, r3, #19
 8005676:	6922      	ldr	r2, [r4, #16]
 8005678:	6022      	str	r2, [r4, #0]
 800567a:	d504      	bpl.n	8005686 <__sflush_r+0x7e>
 800567c:	1c42      	adds	r2, r0, #1
 800567e:	d101      	bne.n	8005684 <__sflush_r+0x7c>
 8005680:	682b      	ldr	r3, [r5, #0]
 8005682:	b903      	cbnz	r3, 8005686 <__sflush_r+0x7e>
 8005684:	6560      	str	r0, [r4, #84]	; 0x54
 8005686:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005688:	602f      	str	r7, [r5, #0]
 800568a:	2900      	cmp	r1, #0
 800568c:	d0c9      	beq.n	8005622 <__sflush_r+0x1a>
 800568e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005692:	4299      	cmp	r1, r3
 8005694:	d002      	beq.n	800569c <__sflush_r+0x94>
 8005696:	4628      	mov	r0, r5
 8005698:	f7ff fbd6 	bl	8004e48 <_free_r>
 800569c:	2000      	movs	r0, #0
 800569e:	6360      	str	r0, [r4, #52]	; 0x34
 80056a0:	e7c0      	b.n	8005624 <__sflush_r+0x1c>
 80056a2:	2301      	movs	r3, #1
 80056a4:	4628      	mov	r0, r5
 80056a6:	47b0      	blx	r6
 80056a8:	1c41      	adds	r1, r0, #1
 80056aa:	d1c8      	bne.n	800563e <__sflush_r+0x36>
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0c5      	beq.n	800563e <__sflush_r+0x36>
 80056b2:	2b1d      	cmp	r3, #29
 80056b4:	d001      	beq.n	80056ba <__sflush_r+0xb2>
 80056b6:	2b16      	cmp	r3, #22
 80056b8:	d101      	bne.n	80056be <__sflush_r+0xb6>
 80056ba:	602f      	str	r7, [r5, #0]
 80056bc:	e7b1      	b.n	8005622 <__sflush_r+0x1a>
 80056be:	89a3      	ldrh	r3, [r4, #12]
 80056c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056c4:	81a3      	strh	r3, [r4, #12]
 80056c6:	e7ad      	b.n	8005624 <__sflush_r+0x1c>
 80056c8:	690f      	ldr	r7, [r1, #16]
 80056ca:	2f00      	cmp	r7, #0
 80056cc:	d0a9      	beq.n	8005622 <__sflush_r+0x1a>
 80056ce:	0793      	lsls	r3, r2, #30
 80056d0:	680e      	ldr	r6, [r1, #0]
 80056d2:	bf08      	it	eq
 80056d4:	694b      	ldreq	r3, [r1, #20]
 80056d6:	600f      	str	r7, [r1, #0]
 80056d8:	bf18      	it	ne
 80056da:	2300      	movne	r3, #0
 80056dc:	eba6 0807 	sub.w	r8, r6, r7
 80056e0:	608b      	str	r3, [r1, #8]
 80056e2:	f1b8 0f00 	cmp.w	r8, #0
 80056e6:	dd9c      	ble.n	8005622 <__sflush_r+0x1a>
 80056e8:	6a21      	ldr	r1, [r4, #32]
 80056ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056ec:	4643      	mov	r3, r8
 80056ee:	463a      	mov	r2, r7
 80056f0:	4628      	mov	r0, r5
 80056f2:	47b0      	blx	r6
 80056f4:	2800      	cmp	r0, #0
 80056f6:	dc06      	bgt.n	8005706 <__sflush_r+0xfe>
 80056f8:	89a3      	ldrh	r3, [r4, #12]
 80056fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056fe:	81a3      	strh	r3, [r4, #12]
 8005700:	f04f 30ff 	mov.w	r0, #4294967295
 8005704:	e78e      	b.n	8005624 <__sflush_r+0x1c>
 8005706:	4407      	add	r7, r0
 8005708:	eba8 0800 	sub.w	r8, r8, r0
 800570c:	e7e9      	b.n	80056e2 <__sflush_r+0xda>
 800570e:	bf00      	nop
 8005710:	dfbffffe 	.word	0xdfbffffe

08005714 <_fflush_r>:
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	690b      	ldr	r3, [r1, #16]
 8005718:	4605      	mov	r5, r0
 800571a:	460c      	mov	r4, r1
 800571c:	b913      	cbnz	r3, 8005724 <_fflush_r+0x10>
 800571e:	2500      	movs	r5, #0
 8005720:	4628      	mov	r0, r5
 8005722:	bd38      	pop	{r3, r4, r5, pc}
 8005724:	b118      	cbz	r0, 800572e <_fflush_r+0x1a>
 8005726:	6a03      	ldr	r3, [r0, #32]
 8005728:	b90b      	cbnz	r3, 800572e <_fflush_r+0x1a>
 800572a:	f7ff f989 	bl	8004a40 <__sinit>
 800572e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f3      	beq.n	800571e <_fflush_r+0xa>
 8005736:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005738:	07d0      	lsls	r0, r2, #31
 800573a:	d404      	bmi.n	8005746 <_fflush_r+0x32>
 800573c:	0599      	lsls	r1, r3, #22
 800573e:	d402      	bmi.n	8005746 <_fflush_r+0x32>
 8005740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005742:	f7ff fb7f 	bl	8004e44 <__retarget_lock_acquire_recursive>
 8005746:	4628      	mov	r0, r5
 8005748:	4621      	mov	r1, r4
 800574a:	f7ff ff5d 	bl	8005608 <__sflush_r>
 800574e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005750:	07da      	lsls	r2, r3, #31
 8005752:	4605      	mov	r5, r0
 8005754:	d4e4      	bmi.n	8005720 <_fflush_r+0xc>
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	059b      	lsls	r3, r3, #22
 800575a:	d4e1      	bmi.n	8005720 <_fflush_r+0xc>
 800575c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800575e:	f7ff fb72 	bl	8004e46 <__retarget_lock_release_recursive>
 8005762:	e7dd      	b.n	8005720 <_fflush_r+0xc>

08005764 <__swhatbuf_r>:
 8005764:	b570      	push	{r4, r5, r6, lr}
 8005766:	460c      	mov	r4, r1
 8005768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800576c:	2900      	cmp	r1, #0
 800576e:	b096      	sub	sp, #88	; 0x58
 8005770:	4615      	mov	r5, r2
 8005772:	461e      	mov	r6, r3
 8005774:	da0d      	bge.n	8005792 <__swhatbuf_r+0x2e>
 8005776:	89a3      	ldrh	r3, [r4, #12]
 8005778:	f013 0f80 	tst.w	r3, #128	; 0x80
 800577c:	f04f 0100 	mov.w	r1, #0
 8005780:	bf0c      	ite	eq
 8005782:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005786:	2340      	movne	r3, #64	; 0x40
 8005788:	2000      	movs	r0, #0
 800578a:	6031      	str	r1, [r6, #0]
 800578c:	602b      	str	r3, [r5, #0]
 800578e:	b016      	add	sp, #88	; 0x58
 8005790:	bd70      	pop	{r4, r5, r6, pc}
 8005792:	466a      	mov	r2, sp
 8005794:	f000 f862 	bl	800585c <_fstat_r>
 8005798:	2800      	cmp	r0, #0
 800579a:	dbec      	blt.n	8005776 <__swhatbuf_r+0x12>
 800579c:	9901      	ldr	r1, [sp, #4]
 800579e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80057a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80057a6:	4259      	negs	r1, r3
 80057a8:	4159      	adcs	r1, r3
 80057aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057ae:	e7eb      	b.n	8005788 <__swhatbuf_r+0x24>

080057b0 <__smakebuf_r>:
 80057b0:	898b      	ldrh	r3, [r1, #12]
 80057b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057b4:	079d      	lsls	r5, r3, #30
 80057b6:	4606      	mov	r6, r0
 80057b8:	460c      	mov	r4, r1
 80057ba:	d507      	bpl.n	80057cc <__smakebuf_r+0x1c>
 80057bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	6123      	str	r3, [r4, #16]
 80057c4:	2301      	movs	r3, #1
 80057c6:	6163      	str	r3, [r4, #20]
 80057c8:	b002      	add	sp, #8
 80057ca:	bd70      	pop	{r4, r5, r6, pc}
 80057cc:	ab01      	add	r3, sp, #4
 80057ce:	466a      	mov	r2, sp
 80057d0:	f7ff ffc8 	bl	8005764 <__swhatbuf_r>
 80057d4:	9900      	ldr	r1, [sp, #0]
 80057d6:	4605      	mov	r5, r0
 80057d8:	4630      	mov	r0, r6
 80057da:	f7ff fba1 	bl	8004f20 <_malloc_r>
 80057de:	b948      	cbnz	r0, 80057f4 <__smakebuf_r+0x44>
 80057e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057e4:	059a      	lsls	r2, r3, #22
 80057e6:	d4ef      	bmi.n	80057c8 <__smakebuf_r+0x18>
 80057e8:	f023 0303 	bic.w	r3, r3, #3
 80057ec:	f043 0302 	orr.w	r3, r3, #2
 80057f0:	81a3      	strh	r3, [r4, #12]
 80057f2:	e7e3      	b.n	80057bc <__smakebuf_r+0xc>
 80057f4:	89a3      	ldrh	r3, [r4, #12]
 80057f6:	6020      	str	r0, [r4, #0]
 80057f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fc:	81a3      	strh	r3, [r4, #12]
 80057fe:	9b00      	ldr	r3, [sp, #0]
 8005800:	6163      	str	r3, [r4, #20]
 8005802:	9b01      	ldr	r3, [sp, #4]
 8005804:	6120      	str	r0, [r4, #16]
 8005806:	b15b      	cbz	r3, 8005820 <__smakebuf_r+0x70>
 8005808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800580c:	4630      	mov	r0, r6
 800580e:	f000 f837 	bl	8005880 <_isatty_r>
 8005812:	b128      	cbz	r0, 8005820 <__smakebuf_r+0x70>
 8005814:	89a3      	ldrh	r3, [r4, #12]
 8005816:	f023 0303 	bic.w	r3, r3, #3
 800581a:	f043 0301 	orr.w	r3, r3, #1
 800581e:	81a3      	strh	r3, [r4, #12]
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	431d      	orrs	r5, r3
 8005824:	81a5      	strh	r5, [r4, #12]
 8005826:	e7cf      	b.n	80057c8 <__smakebuf_r+0x18>

08005828 <memmove>:
 8005828:	4288      	cmp	r0, r1
 800582a:	b510      	push	{r4, lr}
 800582c:	eb01 0402 	add.w	r4, r1, r2
 8005830:	d902      	bls.n	8005838 <memmove+0x10>
 8005832:	4284      	cmp	r4, r0
 8005834:	4623      	mov	r3, r4
 8005836:	d807      	bhi.n	8005848 <memmove+0x20>
 8005838:	1e43      	subs	r3, r0, #1
 800583a:	42a1      	cmp	r1, r4
 800583c:	d008      	beq.n	8005850 <memmove+0x28>
 800583e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005842:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005846:	e7f8      	b.n	800583a <memmove+0x12>
 8005848:	4402      	add	r2, r0
 800584a:	4601      	mov	r1, r0
 800584c:	428a      	cmp	r2, r1
 800584e:	d100      	bne.n	8005852 <memmove+0x2a>
 8005850:	bd10      	pop	{r4, pc}
 8005852:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005856:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800585a:	e7f7      	b.n	800584c <memmove+0x24>

0800585c <_fstat_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	4d07      	ldr	r5, [pc, #28]	; (800587c <_fstat_r+0x20>)
 8005860:	2300      	movs	r3, #0
 8005862:	4604      	mov	r4, r0
 8005864:	4608      	mov	r0, r1
 8005866:	4611      	mov	r1, r2
 8005868:	602b      	str	r3, [r5, #0]
 800586a:	f7fb fd20 	bl	80012ae <_fstat>
 800586e:	1c43      	adds	r3, r0, #1
 8005870:	d102      	bne.n	8005878 <_fstat_r+0x1c>
 8005872:	682b      	ldr	r3, [r5, #0]
 8005874:	b103      	cbz	r3, 8005878 <_fstat_r+0x1c>
 8005876:	6023      	str	r3, [r4, #0]
 8005878:	bd38      	pop	{r3, r4, r5, pc}
 800587a:	bf00      	nop
 800587c:	200002e4 	.word	0x200002e4

08005880 <_isatty_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4d06      	ldr	r5, [pc, #24]	; (800589c <_isatty_r+0x1c>)
 8005884:	2300      	movs	r3, #0
 8005886:	4604      	mov	r4, r0
 8005888:	4608      	mov	r0, r1
 800588a:	602b      	str	r3, [r5, #0]
 800588c:	f7fb fd1f 	bl	80012ce <_isatty>
 8005890:	1c43      	adds	r3, r0, #1
 8005892:	d102      	bne.n	800589a <_isatty_r+0x1a>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	b103      	cbz	r3, 800589a <_isatty_r+0x1a>
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	bd38      	pop	{r3, r4, r5, pc}
 800589c:	200002e4 	.word	0x200002e4

080058a0 <_sbrk_r>:
 80058a0:	b538      	push	{r3, r4, r5, lr}
 80058a2:	4d06      	ldr	r5, [pc, #24]	; (80058bc <_sbrk_r+0x1c>)
 80058a4:	2300      	movs	r3, #0
 80058a6:	4604      	mov	r4, r0
 80058a8:	4608      	mov	r0, r1
 80058aa:	602b      	str	r3, [r5, #0]
 80058ac:	f7fb fd28 	bl	8001300 <_sbrk>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	d102      	bne.n	80058ba <_sbrk_r+0x1a>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	b103      	cbz	r3, 80058ba <_sbrk_r+0x1a>
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	bd38      	pop	{r3, r4, r5, pc}
 80058bc:	200002e4 	.word	0x200002e4

080058c0 <memcpy>:
 80058c0:	440a      	add	r2, r1
 80058c2:	4291      	cmp	r1, r2
 80058c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80058c8:	d100      	bne.n	80058cc <memcpy+0xc>
 80058ca:	4770      	bx	lr
 80058cc:	b510      	push	{r4, lr}
 80058ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058d6:	4291      	cmp	r1, r2
 80058d8:	d1f9      	bne.n	80058ce <memcpy+0xe>
 80058da:	bd10      	pop	{r4, pc}

080058dc <_realloc_r>:
 80058dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e0:	4680      	mov	r8, r0
 80058e2:	4614      	mov	r4, r2
 80058e4:	460e      	mov	r6, r1
 80058e6:	b921      	cbnz	r1, 80058f2 <_realloc_r+0x16>
 80058e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058ec:	4611      	mov	r1, r2
 80058ee:	f7ff bb17 	b.w	8004f20 <_malloc_r>
 80058f2:	b92a      	cbnz	r2, 8005900 <_realloc_r+0x24>
 80058f4:	f7ff faa8 	bl	8004e48 <_free_r>
 80058f8:	4625      	mov	r5, r4
 80058fa:	4628      	mov	r0, r5
 80058fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005900:	f000 f81b 	bl	800593a <_malloc_usable_size_r>
 8005904:	4284      	cmp	r4, r0
 8005906:	4607      	mov	r7, r0
 8005908:	d802      	bhi.n	8005910 <_realloc_r+0x34>
 800590a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800590e:	d812      	bhi.n	8005936 <_realloc_r+0x5a>
 8005910:	4621      	mov	r1, r4
 8005912:	4640      	mov	r0, r8
 8005914:	f7ff fb04 	bl	8004f20 <_malloc_r>
 8005918:	4605      	mov	r5, r0
 800591a:	2800      	cmp	r0, #0
 800591c:	d0ed      	beq.n	80058fa <_realloc_r+0x1e>
 800591e:	42bc      	cmp	r4, r7
 8005920:	4622      	mov	r2, r4
 8005922:	4631      	mov	r1, r6
 8005924:	bf28      	it	cs
 8005926:	463a      	movcs	r2, r7
 8005928:	f7ff ffca 	bl	80058c0 <memcpy>
 800592c:	4631      	mov	r1, r6
 800592e:	4640      	mov	r0, r8
 8005930:	f7ff fa8a 	bl	8004e48 <_free_r>
 8005934:	e7e1      	b.n	80058fa <_realloc_r+0x1e>
 8005936:	4635      	mov	r5, r6
 8005938:	e7df      	b.n	80058fa <_realloc_r+0x1e>

0800593a <_malloc_usable_size_r>:
 800593a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800593e:	1f18      	subs	r0, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	bfbc      	itt	lt
 8005944:	580b      	ldrlt	r3, [r1, r0]
 8005946:	18c0      	addlt	r0, r0, r3
 8005948:	4770      	bx	lr
	...

0800594c <_init>:
 800594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594e:	bf00      	nop
 8005950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005952:	bc08      	pop	{r3}
 8005954:	469e      	mov	lr, r3
 8005956:	4770      	bx	lr

08005958 <_fini>:
 8005958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595a:	bf00      	nop
 800595c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595e:	bc08      	pop	{r3}
 8005960:	469e      	mov	lr, r3
 8005962:	4770      	bx	lr
